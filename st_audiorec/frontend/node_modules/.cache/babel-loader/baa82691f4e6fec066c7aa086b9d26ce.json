{"ast":null,"code":"import _defineProperty from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar _excluded = [\"readableStrategy\", \"writableStrategy\", \"queueingStrategy\"];\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Builder } from '../../builder/index';\n/** @ignore */\n\nexport function builderThroughDOMStream(options) {\n  return new BuilderTransform(options);\n}\n/** @ignore */\n\nexport var BuilderTransform = /*#__PURE__*/function () {\n  function BuilderTransform(options) {\n    var _this = this,\n        _ReadableStream,\n        _WritableStream;\n\n    _classCallCheck(this, BuilderTransform);\n\n    // Access properties by string indexers to defeat closure compiler\n    this._numChunks = 0;\n    this._finished = false;\n    this._bufferedSize = 0;\n\n    var readableStrategy = options['readableStrategy'],\n        writableStrategy = options['writableStrategy'],\n        _options$queueingStra = options['queueingStrategy'],\n        queueingStrategy = _options$queueingStra === void 0 ? 'count' : _options$queueingStra,\n        builderOptions = _objectWithoutProperties(options, _excluded);\n\n    this._controller = null;\n    this._builder = Builder.new(builderOptions);\n    this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n    var _readableStrategy = _objectSpread({}, readableStrategy),\n        _readableStrategy$hig = _readableStrategy['highWaterMark'],\n        readableHighWaterMark = _readableStrategy$hig === void 0 ? queueingStrategy === 'bytes' ? Math.pow(2, 14) : 1000 : _readableStrategy$hig;\n\n    var _writableStrategy = _objectSpread({}, writableStrategy),\n        _writableStrategy$hig = _writableStrategy['highWaterMark'],\n        writableHighWaterMark = _writableStrategy$hig === void 0 ? queueingStrategy === 'bytes' ? Math.pow(2, 14) : 1000 : _writableStrategy$hig;\n\n    this['readable'] = new ReadableStream((_ReadableStream = {}, _defineProperty(_ReadableStream, 'cancel', function cancel() {\n      _this._builder.clear();\n    }), _defineProperty(_ReadableStream, 'pull', function pull(c) {\n      _this._maybeFlush(_this._builder, _this._controller = c);\n    }), _defineProperty(_ReadableStream, 'start', function start(c) {\n      _this._maybeFlush(_this._builder, _this._controller = c);\n    }), _ReadableStream), {\n      'highWaterMark': readableHighWaterMark,\n      'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength\n    });\n    this['writable'] = new WritableStream((_WritableStream = {}, _defineProperty(_WritableStream, 'abort', function abort() {\n      _this._builder.clear();\n    }), _defineProperty(_WritableStream, 'write', function write() {\n      _this._maybeFlush(_this._builder, _this._controller);\n    }), _defineProperty(_WritableStream, 'close', function close() {\n      _this._maybeFlush(_this._builder.finish(), _this._controller);\n    }), _WritableStream), {\n      'highWaterMark': writableHighWaterMark,\n      'size': function size(value) {\n        return _this._writeValueAndReturnChunkSize(value);\n      }\n    });\n  }\n\n  _createClass(BuilderTransform, [{\n    key: \"_writeValueAndReturnChunkSize\",\n    value: function _writeValueAndReturnChunkSize(value) {\n      var bufferedSize = this._bufferedSize;\n      this._bufferedSize = this._getSize(this._builder.append(value));\n      return this._bufferedSize - bufferedSize;\n    }\n  }, {\n    key: \"_maybeFlush\",\n    value: function _maybeFlush(builder, controller) {\n      if (controller === null) {\n        return;\n      }\n\n      if (this._bufferedSize >= controller.desiredSize) {\n        ++this._numChunks && this._enqueue(controller, builder.toVector());\n      }\n\n      if (builder.finished) {\n        if (builder.length > 0 || this._numChunks === 0) {\n          ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n\n        if (!this._finished && (this._finished = true)) {\n          this._enqueue(controller, null);\n        }\n      }\n    }\n  }, {\n    key: \"_enqueue\",\n    value: function _enqueue(controller, chunk) {\n      this._bufferedSize = 0;\n      this._controller = null;\n      chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n  }]);\n\n  return BuilderTransform;\n}();\n/** @ignore */\n\nvar chunkLength = function chunkLength(chunk) {\n  return chunk.length;\n};\n/** @ignore */\n\n\nvar chunkByteLength = function chunkByteLength(chunk) {\n  return chunk.byteLength;\n};","map":{"version":3,"mappings":"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","names":["Builder","builderThroughDOMStream","options","BuilderTransform","readableStrategy","writableStrategy","queueingStrategy","builderOptions","_controller","_builder","new","_getSize","chunkLength","chunkByteLength","readableHighWaterMark","writableHighWaterMark","ReadableStream","clear","c","_maybeFlush","WritableStream","finish","value","_writeValueAndReturnChunkSize","bufferedSize","_bufferedSize","append","builder","controller","desiredSize","_numChunks","_enqueue","toVector","finished","length","_finished","chunk","close","enqueue","byteLength"],"sources":["io/whatwg/builder.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Vector } from '../../vector';\nimport { VectorType as V } from '../../interfaces';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    readableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    writableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\n    return new BuilderTransform(options);\n}\n\n/** @ignore */\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\n\n    public readable: ReadableStream<V<T>>;\n    public writable: WritableStream<T['TValue'] | TNull>;\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\n\n    private _numChunks = 0;\n    private _finished = false;\n    private _bufferedSize = 0;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(options: BuilderTransformOptions<T, TNull>) {\n\n        // Access properties by string indexers to defeat closure compiler\n\n        const {\n            ['readableStrategy']: readableStrategy,\n            ['writableStrategy']: writableStrategy,\n            ['queueingStrategy']: queueingStrategy = 'count',\n            ...builderOptions\n        } = options;\n\n        this._controller = null;\n        this._builder = Builder.new<T, TNull>(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n\n        this['readable'] = new ReadableStream<V<T>>({\n            ['cancel']: ()  => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\n        if (controller === null) { return; }\n        if (this._bufferedSize >= controller.desiredSize!) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\n\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\n"]},"metadata":{},"sourceType":"module"}