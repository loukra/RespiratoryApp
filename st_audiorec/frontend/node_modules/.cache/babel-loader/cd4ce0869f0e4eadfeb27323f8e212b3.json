{"ast":null,"code":"import _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\n/** @ignore */\n\nexport var TypeComparator = /*#__PURE__*/function (_Visitor) {\n  _inherits(TypeComparator, _Visitor);\n\n  var _super = _createSuper(TypeComparator);\n\n  function TypeComparator() {\n    _classCallCheck(this, TypeComparator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TypeComparator, [{\n    key: \"compareSchemas\",\n    value: function compareSchemas(schema, other) {\n      return schema === other || other instanceof schema.constructor && instance.compareFields(schema.fields, other.fields);\n    }\n  }, {\n    key: \"compareFields\",\n    value: function compareFields(fields, others) {\n      return fields === others || Array.isArray(fields) && Array.isArray(others) && fields.length === others.length && fields.every(function (f, i) {\n        return instance.compareField(f, others[i]);\n      });\n    }\n  }, {\n    key: \"compareField\",\n    value: function compareField(field, other) {\n      return field === other || other instanceof field.constructor && field.name === other.name && field.nullable === other.nullable && instance.visit(field.type, other.type);\n    }\n  }]);\n\n  return TypeComparator;\n}(Visitor);\n\nfunction compareConstructor(type, other) {\n  return other instanceof type.constructor;\n}\n\nfunction compareAny(type, other) {\n  return type === other || compareConstructor(type, other);\n}\n\nfunction compareInt(type, other) {\n  return type === other || compareConstructor(type, other) && type.bitWidth === other.bitWidth && type.isSigned === other.isSigned;\n}\n\nfunction compareFloat(type, other) {\n  return type === other || compareConstructor(type, other) && type.precision === other.precision;\n}\n\nfunction compareFixedSizeBinary(type, other) {\n  return type === other || compareConstructor(type, other) && type.byteWidth === other.byteWidth;\n}\n\nfunction compareDate(type, other) {\n  return type === other || compareConstructor(type, other) && type.unit === other.unit;\n}\n\nfunction compareTimestamp(type, other) {\n  return type === other || compareConstructor(type, other) && type.unit === other.unit && type.timezone === other.timezone;\n}\n\nfunction compareTime(type, other) {\n  return type === other || compareConstructor(type, other) && type.unit === other.unit && type.bitWidth === other.bitWidth;\n}\n\nfunction compareList(type, other) {\n  return type === other || compareConstructor(type, other) && type.children.length === other.children.length && instance.compareFields(type.children, other.children);\n}\n\nfunction compareStruct(type, other) {\n  return type === other || compareConstructor(type, other) && type.children.length === other.children.length && instance.compareFields(type.children, other.children);\n}\n\nfunction compareUnion(type, other) {\n  return type === other || compareConstructor(type, other) && type.mode === other.mode && type.typeIds.every(function (x, i) {\n    return x === other.typeIds[i];\n  }) && instance.compareFields(type.children, other.children);\n}\n\nfunction compareDictionary(type, other) {\n  return type === other || compareConstructor(type, other) && type.id === other.id && type.isOrdered === other.isOrdered && instance.visit(type.indices, other.indices) && instance.visit(type.dictionary, other.dictionary);\n}\n\nfunction compareInterval(type, other) {\n  return type === other || compareConstructor(type, other) && type.unit === other.unit;\n}\n\nfunction compareFixedSizeList(type, other) {\n  return type === other || compareConstructor(type, other) && type.listSize === other.listSize && type.children.length === other.children.length && instance.compareFields(type.children, other.children);\n}\n\nfunction compareMap(type, other) {\n  return type === other || compareConstructor(type, other) && type.keysSorted === other.keysSorted && type.children.length === other.children.length && instance.compareFields(type.children, other.children);\n}\n\nTypeComparator.prototype.visitNull = compareAny;\nTypeComparator.prototype.visitBool = compareAny;\nTypeComparator.prototype.visitInt = compareInt;\nTypeComparator.prototype.visitInt8 = compareInt;\nTypeComparator.prototype.visitInt16 = compareInt;\nTypeComparator.prototype.visitInt32 = compareInt;\nTypeComparator.prototype.visitInt64 = compareInt;\nTypeComparator.prototype.visitUint8 = compareInt;\nTypeComparator.prototype.visitUint16 = compareInt;\nTypeComparator.prototype.visitUint32 = compareInt;\nTypeComparator.prototype.visitUint64 = compareInt;\nTypeComparator.prototype.visitFloat = compareFloat;\nTypeComparator.prototype.visitFloat16 = compareFloat;\nTypeComparator.prototype.visitFloat32 = compareFloat;\nTypeComparator.prototype.visitFloat64 = compareFloat;\nTypeComparator.prototype.visitUtf8 = compareAny;\nTypeComparator.prototype.visitBinary = compareAny;\nTypeComparator.prototype.visitFixedSizeBinary = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate = compareDate;\nTypeComparator.prototype.visitDateDay = compareDate;\nTypeComparator.prototype.visitDateMillisecond = compareDate;\nTypeComparator.prototype.visitTimestamp = compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond = compareTimestamp;\nTypeComparator.prototype.visitTime = compareTime;\nTypeComparator.prototype.visitTimeSecond = compareTime;\nTypeComparator.prototype.visitTimeMillisecond = compareTime;\nTypeComparator.prototype.visitTimeMicrosecond = compareTime;\nTypeComparator.prototype.visitTimeNanosecond = compareTime;\nTypeComparator.prototype.visitDecimal = compareAny;\nTypeComparator.prototype.visitList = compareList;\nTypeComparator.prototype.visitStruct = compareStruct;\nTypeComparator.prototype.visitUnion = compareUnion;\nTypeComparator.prototype.visitDenseUnion = compareUnion;\nTypeComparator.prototype.visitSparseUnion = compareUnion;\nTypeComparator.prototype.visitDictionary = compareDictionary;\nTypeComparator.prototype.visitInterval = compareInterval;\nTypeComparator.prototype.visitIntervalDayTime = compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth = compareInterval;\nTypeComparator.prototype.visitFixedSizeList = compareFixedSizeList;\nTypeComparator.prototype.visitMap = compareMap;\n/** @ignore */\n\nexport var instance = new TypeComparator();","map":{"version":3,"mappings":"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","names":["Visitor","TypeComparator","schema","other","constructor","instance","compareFields","fields","others","Array","isArray","length","every","f","i","compareField","field","name","nullable","visit","type","compareConstructor","compareAny","compareInt","bitWidth","isSigned","compareFloat","precision","compareFixedSizeBinary","byteWidth","compareDate","unit","compareTimestamp","timezone","compareTime","compareList","children","compareStruct","compareUnion","mode","typeIds","x","compareDictionary","id","isOrdered","indices","dictionary","compareInterval","compareFixedSizeList","listSize","compareMap","keysSorted","prototype","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap"],"sources":["visitor/typecomparator.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n"]},"metadata":{},"sourceType":"module"}