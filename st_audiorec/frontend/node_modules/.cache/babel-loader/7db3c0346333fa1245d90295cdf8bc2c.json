{"ast":null,"code":"import _createClass from\"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import AudioReactRecorder,{RecordState}from'audio-react-recorder';import'audio-react-recorder/dist/index.css';var StAudioRec=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(StAudioRec,_StreamlitComponentBa);var _super=_createSuper(StAudioRec);function StAudioRec(){var _this;_classCallCheck(this,StAudioRec);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={isFocused:false,recordState:null,audioDataURL:'',reset:false};_this.render=function(){// Arguments that are passed to the plugin in Python are accessible\n// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=_this.props.theme;var style={};var recordState=_this.state.recordState;// compatibility with older vers of Streamlit that don't send theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nvar borderStyling=\"1px solid \".concat(_this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}return/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{id:\"record\",onClick:_this.onClick_start},\"Start Recording\"),/*#__PURE__*/React.createElement(\"button\",{id:\"stop\",onClick:_this.onClick_stop},\"Stop\"),/*#__PURE__*/React.createElement(\"button\",{id:\"reset\",onClick:_this.onClick_reset},\"Reset!!!\"),/*#__PURE__*/React.createElement(AudioReactRecorder,{state:recordState,onStop:_this.onStop_audio,type:\"audio/wav\",backgroundColor:\"rgb(255, 255, 255)\",foregroundColor:\"rgb(255,76,75)\",canvasWidth:450,canvasHeight:100}),/*#__PURE__*/React.createElement(\"audio\",{id:\"audio\",controls:true,src:_this.state.audioDataURL})));};_this.onClick_start=function(){_this.setState({reset:false,audioDataURL:'',recordState:RecordState.START});Streamlit.setComponentValue('');};_this.onClick_stop=function(){_this.setState({reset:false,recordState:RecordState.STOP});};_this.onClick_reset=function(){_this.setState({reset:true,audioDataURL:'',recordState:RecordState.STOP});Streamlit.setComponentValue('');};_this.onClick_continue=function(){if(_this.state.audioDataURL!==''){// get datetime string for filename\nvar datetime=new Date().toLocaleString();datetime=datetime.replace(' ','');datetime=datetime.replace(/_/g,'');datetime=datetime.replace(',','');var filename='streamlit_audio_'+datetime+'.wav';// auromatically trigger download\nvar a=document.createElement('a');a.style.display='none';a.href=_this.state.audioDataURL;a.download=filename;document.body.appendChild(a);a.click();}};_this.onStop_audio=function(data){if(_this.state.reset===true){_this.setState({audioDataURL:''});Streamlit.setComponentValue('');}else{_this.setState({audioDataURL:data.url});fetch(data.url).then(function(ctx){return ctx.blob();}).then(function(blob){// converting blob to arrayBuffer, this process step needs to be be improved\n// this operation's time complexity scales exponentially with audio length\nreturn new Response(blob).arrayBuffer();}).then(function(buffer){Streamlit.setComponentValue({\"arr\":new Uint8Array(buffer)});});}};return _this;}return _createClass(StAudioRec);}(StreamlitComponentBase);// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec);// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onClick_start","onClick_stop","onClick_reset","onStop_audio","setState","START","setComponentValue","STOP","onClick_continue","datetime","Date","toLocaleString","replace","filename","a","document","createElement","display","href","download","body","appendChild","click","data","url","fetch","then","ctx","blob","Response","arrayBuffer","buffer","Uint8Array","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset!!!\n          </button>\n{/*\n          <button id='continue' onClick={this.onClick_continue}>\n            Download\n          </button>\n    */}\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(255, 255, 255)'\n            foregroundColor='rgb(255,76,75)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURL}\n          />\n\n        </div>\n      </span>\n    )\n  }\n\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '')\n    {\n      // get datetime string for filename\n      let datetime = new Date().toLocaleString();\n      datetime = datetime.replace(' ', '');\n      datetime = datetime.replace(/_/g, '');\n      datetime = datetime.replace(',', '');\n      var filename = 'streamlit_audio_' + datetime + '.wav';\n\n      // auromatically trigger download\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = this.state.audioDataURL;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataURL: data.url\n      })\n\n      fetch(data.url).then(function(ctx){\n        return ctx.blob()\n      }).then(function(blob){\n        // converting blob to arrayBuffer, this process step needs to be be improved\n        // this operation's time complexity scales exponentially with audio length\n        return (new Response(blob)).arrayBuffer()\n      }).then(function(buffer){\n        Streamlit.setComponentValue({\n          \"arr\": new Uint8Array(buffer)\n        })\n      })\n\n    }\n\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}