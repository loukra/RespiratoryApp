{"ast":null,"code":"import _objectSpread from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { AsyncByteStream } from '../../io/stream';\n/** @ignore */\n\nexport function recordBatchWriterThroughDOMStream(writableStrategy, readableStrategy) {\n  var writer = new this(writableStrategy);\n  var reader = new AsyncByteStream(writer);\n  var readable = new ReadableStream({\n    type: 'bytes',\n    cancel: function cancel() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return reader.cancel();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    pull: function pull(controller) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return next(controller);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    start: function start(controller) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return next(controller);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  }, _objectSpread({\n    'highWaterMark': Math.pow(2, 14)\n  }, readableStrategy));\n  return {\n    writable: new WritableStream(writer, writableStrategy),\n    readable: readable\n  };\n\n  function next(_x) {\n    return _next.apply(this, arguments);\n  }\n\n  function _next() {\n    _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(controller) {\n      var buf, size;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              buf = null;\n              size = controller.desiredSize;\n\n            case 2:\n              _context4.next = 4;\n              return reader.read(size || null);\n\n            case 4:\n              if (!(buf = _context4.sent)) {\n                _context4.next = 10;\n                break;\n              }\n\n              controller.enqueue(buf);\n\n              if (!(size != null && (size -= buf.byteLength) <= 0)) {\n                _context4.next = 8;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 8:\n              _context4.next = 2;\n              break;\n\n            case 10:\n              controller.close();\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _next.apply(this, arguments);\n  }\n}","map":{"version":3,"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SAASA,eAAT,QAAgC,iBAAhC;AAGA;;AACA,OAAM,SAAUC,iCAAV,CAEFC,gBAFE,EAGFC,gBAHE,EAGuD;AAGzD,MAAMC,MAAM,GAAG,IAAI,IAAJ,CAAYF,gBAAZ,CAAf;AACA,MAAMG,MAAM,GAAG,IAAIL,eAAJ,CAAoBI,MAApB,CAAf;AACA,MAAME,QAAQ,GAAG,IAAIC,cAAJ,CAAmB;AAChCC,QAAI,EAAE,OAD0B;AAE1BC,UAF0B,oBAEpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAWJ,MAAM,CAACI,MAAP,EAAX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B,KAFT;AAG1BC,QAH0B,gBAGrBC,UAHqB,EAGX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAUC,IAAI,CAACD,UAAD,CAAd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B,KAHlB;AAI1BE,SAJ0B,iBAIpBF,UAJoB,EAIV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAUC,IAAI,CAACD,UAAD,CAAd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AAJnB,GAAnB;AAKZ,8BAAiB,CAAjB,EAAsB,EAAtB;AALY,KAKiBR,gBALjB,EAAjB;AAOA,SAAO;AAAEW,YAAQ,EAAE,IAAIC,cAAJ,CAAmBX,MAAnB,EAA2BF,gBAA3B,CAAZ;AAA0DI,YAAQ,EAARA;AAA1D,GAAP;;AAZyD,WAc1CM,IAd0C;AAAA;AAAA;;AAAA;AAAA,qEAczD,kBAAoBD,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQK,iBADR,GACiC,IADjC;AAEQC,kBAFR,GAEeN,UAAU,CAACO,WAF1B;;AAAA;AAAA;AAAA,qBAGuBb,MAAM,CAACc,IAAP,CAAYF,IAAI,IAAI,IAApB,CAHvB;;AAAA;AAAA,oBAGWD,GAHX;AAAA;AAAA;AAAA;;AAIQL,wBAAU,CAACS,OAAX,CAAmBJ,GAAnB;;AAJR,oBAKYC,IAAI,IAAI,IAAR,IAAgB,CAACA,IAAI,IAAID,GAAG,CAACK,UAAb,KAA4B,CALxD;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAOIV,wBAAU,CAACW,KAAX;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAdyD;AAAA;AAAA;AAuB5D","names":["AsyncByteStream","recordBatchWriterThroughDOMStream","writableStrategy","readableStrategy","writer","reader","readable","ReadableStream","type","cancel","pull","controller","next","start","writable","WritableStream","buf","size","desiredSize","read","enqueue","byteLength","close"],"sources":["io/whatwg/writer.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}