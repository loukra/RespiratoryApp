{"ast":null,"code":"import _slicedToArray from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\n\nexport var ListBuilder = /*#__PURE__*/function (_VariableWidthBuilder) {\n  _inherits(ListBuilder, _VariableWidthBuilder);\n\n  var _super = _createSuper(ListBuilder);\n\n  function ListBuilder(opts) {\n    var _this;\n\n    _classCallCheck(this, ListBuilder);\n\n    _this = _super.call(this, opts);\n    _this._run = new Run();\n    _this._offsets = new OffsetsBufferBuilder();\n    return _this;\n  }\n\n  _createClass(ListBuilder, [{\n    key: \"addChild\",\n    value: function addChild(child) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n\n      if (this.numChildren > 0) {\n        throw new Error('ListBuilder can only have one child.');\n      }\n\n      this.children[this.numChildren] = child;\n      this.type = new List(new Field(name, child.type, true));\n      return this.numChildren - 1;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._run.clear();\n\n      return _get(_getPrototypeOf(ListBuilder.prototype), \"clear\", this).call(this);\n    }\n  }, {\n    key: \"_flushPending\",\n    value: function _flushPending(pending) {\n      var run = this._run;\n      var offsets = this._offsets;\n      var setValue = this._setValue;\n      var index = 0,\n          value;\n\n      var _iterator = _createForOfIteratorHelper(pending),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2);\n\n          index = _step$value[0];\n          value = _step$value[1];\n\n          if (value === undefined) {\n            offsets.set(index, 0);\n          } else {\n            offsets.set(index, value.length);\n            setValue(this, index, run.bind(value));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return ListBuilder;\n}(VariableWidthBuilder);","map":{"version":3,"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,GAAT,QAAoB,OAApB;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAAmBC,IAAnB,QAA+B,SAA/B;AACA,SAASC,oBAAT,QAAqC,UAArC;AACA,SAAkCC,oBAAlC,QAA8D,YAA9D;AAEA;;AACA,WAAaC,WAAb;AAAA;;AAAA;;AAGI,uBAAYC,IAAZ,EAAgD;AAAA;;AAAA;;AAC5C,8BAAMA,IAAN;AAHM,iBAAO,IAAIN,GAAJ,EAAP;AAIN,UAAKO,QAAL,GAAgB,IAAIJ,oBAAJ,EAAhB;AAF4C;AAG/C;;AANL;AAAA;AAAA,WAOW,kBAASK,KAAT,EAAsC;AAAA,UAAVC,IAAU,uEAAH,GAAG;;AACzC,UAAI,KAAKC,WAAL,GAAmB,CAAvB,EAA0B;AACtB,cAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACH;;AACD,WAAKC,QAAL,CAAc,KAAKF,WAAnB,IAAkCF,KAAlC;AACA,WAAKK,IAAL,GAAY,IAAIX,IAAJ,CAAS,IAAID,KAAJ,CAAUQ,IAAV,EAAgBD,KAAK,CAACK,IAAtB,EAA4B,IAA5B,CAAT,CAAZ;AACA,aAAO,KAAKH,WAAL,GAAmB,CAA1B;AACH;AAdL;AAAA;AAAA,WAeW,iBAAK;AACR,WAAKI,IAAL,CAAUC,KAAV;;AACA;AACH;AAlBL;AAAA;AAAA,WAmBc,uBAAcC,OAAd,EAA2D;AACjE,UAAMC,GAAG,GAAG,KAAKH,IAAjB;AACA,UAAMI,OAAO,GAAG,KAAKX,QAArB;AACA,UAAMY,QAAQ,GAAG,KAAKC,SAAtB;AACA,UAAIC,KAAK,GAAG,CAAZ;AAAA,UAAeC,KAAf;;AAJiE,iDAK1CN,OAL0C;AAAA;;AAAA;AAKjE,4DAAgC;AAAA;;AAA1BK,eAA0B;AAAnBC,eAAmB;;AAC5B,cAAIA,KAAK,KAAKC,SAAd,EAAyB;AACrBL,mBAAO,CAACM,GAAR,CAAYH,KAAZ,EAAmB,CAAnB;AACH,WAFD,MAEO;AACHH,mBAAO,CAACM,GAAR,CAAYH,KAAZ,EAAmBC,KAAK,CAACG,MAAzB;AACAN,oBAAQ,CAAC,IAAD,EAAOE,KAAP,EAAcJ,GAAG,CAACS,IAAJ,CAASJ,KAAT,CAAd,CAAR;AACH;AACJ;AAZgE;AAAA;AAAA;AAAA;AAAA;AAapE;AAhCL;;AAAA;AAAA,EAAwElB,oBAAxE","names":["Run","Field","List","OffsetsBufferBuilder","VariableWidthBuilder","ListBuilder","opts","_offsets","child","name","numChildren","Error","children","type","_run","clear","pending","run","offsets","setValue","_setValue","index","value","undefined","set","length","bind"],"sources":["builder/list.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}