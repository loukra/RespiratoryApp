{"ast":null,"code":"import _regeneratorRuntime from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _construct from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/construct\";\nvar _excluded = [\"values\"];\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\nimport * as fn from '../util/fn';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder } from '../builder';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n/** @nocollapse */\n\nVector.new = newVector;\n/** @nocollapse */\n\nVector.from = vectorFrom;\n/** @ignore */\n\nfunction newVector(data) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return _construct(getVectorConstructor.getVisitFn(data)(), [data].concat(args));\n}\n/** @ignore */\n\n\nexport function vectorFromValuesWithType(newDataType, input) {\n  if (isIterable(input)) {\n    return Vector.from({\n      'nullValues': [null, undefined],\n      type: newDataType(),\n      'values': input\n    });\n  } else if (isAsyncIterable(input)) {\n    return Vector.from({\n      'nullValues': [null, undefined],\n      type: newDataType(),\n      'values': input\n    });\n  }\n\n  var _input = _objectSpread({}, input),\n      _input$values = _input['values'],\n      values = _input$values === void 0 ? [] : _input$values,\n      _input$type = _input['type'],\n      type = _input$type === void 0 ? newDataType() : _input$type,\n      _input$nullValues = _input['nullValues'],\n      nullValues = _input$nullValues === void 0 ? [null, undefined] : _input$nullValues;\n\n  return isIterable(values) ? Vector.from(_objectSpread(_objectSpread({\n    nullValues: nullValues\n  }, input), {}, {\n    type: type\n  })) : Vector.from(_objectSpread(_objectSpread({\n    nullValues: nullValues\n  }, input), {}, {\n    type: type\n  }));\n}\n\nfunction vectorFrom(input) {\n  var _nullValues$input = _objectSpread({\n    'nullValues': [null, undefined]\n  }, input),\n      _nullValues$input$val = _nullValues$input['values'],\n      values = _nullValues$input$val === void 0 ? [] : _nullValues$input$val,\n      options = _objectWithoutProperties(_nullValues$input, _excluded);\n\n  if (isIterable(values)) {\n    var chunks = _toConsumableArray(Builder.throughIterable(options)(values));\n\n    return chunks.length === 1 ? chunks[0] : Chunked.concat(chunks);\n  }\n\n  return function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chunks) {\n      var transform, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              transform = Builder.throughAsyncIterable(options);\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 3;\n              _iterator = _asyncIterator(transform(values));\n\n            case 5:\n              _context.next = 7;\n              return _iterator.next();\n\n            case 7:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 13;\n                break;\n              }\n\n              chunk = _step.value;\n              chunks.push(chunk);\n\n            case 10:\n              _iteratorAbruptCompletion = false;\n              _context.next = 5;\n              break;\n\n            case 13:\n              _context.next = 19;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 19:\n              _context.prev = 19;\n              _context.prev = 20;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 24;\n                break;\n              }\n\n              _context.next = 24;\n              return _iterator.return();\n\n            case 24:\n              _context.prev = 24;\n\n              if (!_didIteratorError) {\n                _context.next = 27;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 27:\n              return _context.finish(24);\n\n            case 28:\n              return _context.finish(19);\n\n            case 29:\n              return _context.abrupt(\"return\", chunks.length === 1 ? chunks[0] : Chunked.concat(chunks));\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 15, 19, 29], [20,, 24, 28]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()([]);\n} //\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\n\nBaseVector.prototype.get = function baseVectorGet(index) {\n  return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet(index, value) {\n  return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {\n  return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray() {\n  return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {\n  return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {\n  return iteratorVisitor.visit(this);\n};\n\nBaseVector.prototype._bindDataAccessors = bindBaseVectorDataAccessors; // Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n\nObject.keys(Type).map(function (T) {\n  return Type[T];\n}).filter(function (T) {\n  return typeof T === 'number';\n}).filter(function (typeId) {\n  return typeId !== Type.NONE;\n}).forEach(function (typeId) {\n  var VectorCtor = getVectorConstructor.visit(typeId);\n  VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n  VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n});\n/** @ignore */\n\nfunction partialType0(visit) {\n  return function () {\n    return visit(this.type);\n  };\n}\n/** @ignore */\n\n\nfunction wrapNullableGet(fn) {\n  return function (i) {\n    return this.isValid(i) ? fn.call(this, i) : null;\n  };\n}\n/** @ignore */\n\n\nfunction wrapNullableSet(fn) {\n  return function (i, a) {\n    if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n      fn.call(this, i, a);\n    }\n  };\n}\n/** @ignore */\n\n\nfunction bindBaseVectorDataAccessors() {\n  var nullBitmap = this.nullBitmap;\n\n  if (nullBitmap && nullBitmap.byteLength > 0) {\n    this.get = wrapNullableGet(this.get);\n    this.set = wrapNullableSet(this.set);\n  }\n}","map":{"version":3,"mappings":"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","names":["Vector","BaseVector","BinaryVector","BoolVector","Chunked","DateVector","DateDayVector","DateMillisecondVector","DecimalVector","DictionaryVector","FixedSizeBinaryVector","FixedSizeListVector","FloatVector","Float16Vector","Float32Vector","Float64Vector","IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","IntVector","Int8Vector","Int16Vector","Int32Vector","Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","ListVector","MapVector","NullVector","StructVector","TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","UnionVector","DenseUnionVector","SparseUnionVector","Utf8Vector","MapRow","StructRow","fn","Type","setBool","isIterable","isAsyncIterable","Builder","instance","getVisitor","setVisitor","indexOfVisitor","toArrayVisitor","iteratorVisitor","byteWidthVisitor","getVectorConstructor","new","newVector","from","vectorFrom","data","args","getVisitFn","vectorFromValuesWithType","newDataType","input","undefined","type","values","nullValues","options","chunks","throughIterable","length","concat","transform","throughAsyncIterable","chunk","push","prototype","get","baseVectorGet","index","visit","set","baseVectorSet","value","indexOf","baseVectorIndexOf","fromIndex","toArray","baseVectorToArray","getByteWidth","baseVectorGetByteWidth","Symbol","iterator","baseVectorSymbolIterator","_bindDataAccessors","bindBaseVectorDataAccessors","Object","keys","map","T","filter","typeId","NONE","forEach","VectorCtor","partial1","partial2","partial0","partialType0","wrapNullableGet","i","isValid","call","wrapNullableSet","a","nullBitmap","offset","byteLength"],"sources":["vector/index.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}