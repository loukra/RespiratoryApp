{"ast":null,"code":"import _get from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\n/** @ignore */\n\nvar roundLengthUpToNearest64Bytes = function roundLengthUpToNearest64Bytes(len, BPE) {\n  return (len * BPE + 63 & ~63 || 64) / BPE;\n};\n/** @ignore */\n\n\nvar sliceOrExtendArray = function sliceOrExtendArray(arr) {\n  var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return arr.length >= len ? arr.subarray(0, len) : memcpy(new arr.constructor(len), arr, 0);\n};\n/** @ignore */\n\n\nexport var BufferBuilder = /*#__PURE__*/function () {\n  function BufferBuilder(buffer) {\n    var stride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    _classCallCheck(this, BufferBuilder);\n\n    this.buffer = buffer;\n    this.stride = stride;\n    this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n    this.ArrayType = buffer.constructor;\n\n    this._resize(this.length = buffer.length / stride | 0);\n  }\n\n  _createClass(BufferBuilder, [{\n    key: \"byteLength\",\n    get: function get() {\n      return this.length * this.stride * this.BYTES_PER_ELEMENT | 0;\n    }\n  }, {\n    key: \"reservedLength\",\n    get: function get() {\n      return this.buffer.length / this.stride;\n    }\n  }, {\n    key: \"reservedByteLength\",\n    get: function get() {\n      return this.buffer.byteLength;\n    } // @ts-ignore\n\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      return this;\n    }\n  }, {\n    key: \"append\",\n    value: function append(value) {\n      return this.set(this.length, value);\n    }\n  }, {\n    key: \"reserve\",\n    value: function reserve(extra) {\n      if (extra > 0) {\n        this.length += extra;\n        var stride = this.stride;\n        var length = this.length * stride;\n        var reserved = this.buffer.length;\n\n        if (length >= reserved) {\n          this._resize(reserved === 0 ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT) : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT));\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;\n      length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n      var array = sliceOrExtendArray(this.buffer, length);\n      this.clear();\n      return array;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.length = 0;\n\n      this._resize(0);\n\n      return this;\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(newLength) {\n      return this.buffer = memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n  }]);\n\n  return BufferBuilder;\n}();\nBufferBuilder.prototype.offset = 0;\n/** @ignore */\n\nexport var DataBufferBuilder = /*#__PURE__*/function (_BufferBuilder) {\n  _inherits(DataBufferBuilder, _BufferBuilder);\n\n  var _super = _createSuper(DataBufferBuilder);\n\n  function DataBufferBuilder() {\n    _classCallCheck(this, DataBufferBuilder);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DataBufferBuilder, [{\n    key: \"last\",\n    value: function last() {\n      return this.get(this.length - 1);\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this.buffer[index];\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this.reserve(index - this.length + 1);\n      this.buffer[index * this.stride] = value;\n      return this;\n    }\n  }]);\n\n  return DataBufferBuilder;\n}(BufferBuilder);\n/** @ignore */\n\nexport var BitmapBufferBuilder = /*#__PURE__*/function (_DataBufferBuilder) {\n  _inherits(BitmapBufferBuilder, _DataBufferBuilder);\n\n  var _super2 = _createSuper(BitmapBufferBuilder);\n\n  function BitmapBufferBuilder() {\n    var _this;\n\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array(0);\n\n    _classCallCheck(this, BitmapBufferBuilder);\n\n    _this = _super2.call(this, data, 1 / 8);\n    _this.numValid = 0;\n    return _this;\n  }\n\n  _createClass(BitmapBufferBuilder, [{\n    key: \"numInvalid\",\n    get: function get() {\n      return this.length - this.numValid;\n    }\n  }, {\n    key: \"get\",\n    value: function get(idx) {\n      return this.buffer[idx >> 3] >> idx % 8 & 1;\n    }\n  }, {\n    key: \"set\",\n    value: function set(idx, val) {\n      var _this$reserve = this.reserve(idx - this.length + 1),\n          buffer = _this$reserve.buffer;\n\n      var byte = idx >> 3,\n          bit = idx % 8,\n          cur = buffer[byte] >> bit & 1; // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n      // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n\n      val ? cur === 0 && (buffer[byte] |= 1 << bit, ++this.numValid) : cur === 1 && (buffer[byte] &= ~(1 << bit), --this.numValid);\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.numValid = 0;\n      return _get(_getPrototypeOf(BitmapBufferBuilder.prototype), \"clear\", this).call(this);\n    }\n  }]);\n\n  return BitmapBufferBuilder;\n}(DataBufferBuilder);\n/** @ignore */\n\nexport var OffsetsBufferBuilder = /*#__PURE__*/function (_DataBufferBuilder2) {\n  _inherits(OffsetsBufferBuilder, _DataBufferBuilder2);\n\n  var _super3 = _createSuper(OffsetsBufferBuilder);\n\n  function OffsetsBufferBuilder() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Int32Array(1);\n\n    _classCallCheck(this, OffsetsBufferBuilder);\n\n    return _super3.call(this, data, 1);\n  }\n\n  _createClass(OffsetsBufferBuilder, [{\n    key: \"append\",\n    value: function append(value) {\n      return this.set(this.length - 1, value);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      var offset = this.length - 1;\n      var buffer = this.reserve(index - offset + 1).buffer;\n\n      if (offset < index++) {\n        buffer.fill(buffer[offset], offset, index);\n      }\n\n      buffer[index] = buffer[index - 1] + value;\n      return this;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length - 1;\n\n      if (length > this.length) {\n        this.set(length - 1, 0);\n      }\n\n      return _get(_getPrototypeOf(OffsetsBufferBuilder.prototype), \"flush\", this).call(this, length + 1);\n    }\n  }]);\n\n  return OffsetsBufferBuilder;\n}(DataBufferBuilder);\n/** @ignore */\n\nexport var WideBufferBuilder = /*#__PURE__*/function (_BufferBuilder2) {\n  _inherits(WideBufferBuilder, _BufferBuilder2);\n\n  var _super4 = _createSuper(WideBufferBuilder);\n\n  function WideBufferBuilder() {\n    _classCallCheck(this, WideBufferBuilder);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(WideBufferBuilder, [{\n    key: \"ArrayType64\",\n    get: function get() {\n      return this._ArrayType64 || (this._ArrayType64 = this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this.reserve(index - this.length + 1);\n\n      switch (typeof value) {\n        case 'bigint':\n          this.buffer64[index] = value;\n          break;\n\n        case 'number':\n          this.buffer[index * this.stride] = value;\n          break;\n\n        default:\n          this.buffer.set(value, index * this.stride);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(newLength) {\n      var data = _get(_getPrototypeOf(WideBufferBuilder.prototype), \"_resize\", this).call(this, newLength);\n\n      var length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n\n      if (BigIntAvailable) {\n        this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n      }\n\n      return data;\n    }\n  }]);\n\n  return WideBufferBuilder;\n}(BufferBuilder);","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,eAAT,EAA0BC,aAA1B,EAAyCC,cAAzC,QAA+D,gBAA/D;AAaA;;AACA,IAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACC,GAAD,EAAcC,GAAd;AAAA,SAA8B,CAAID,GAAG,GAAGC,GAAP,GAAc,EAAf,GAAqB,CAAC,EAAvB,IAA8B,EAA/B,IAAqCA,GAAnE;AAAA,CAAtC;AACA;;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAqCC,GAArC;AAAA,MAA6CH,GAA7C,uEAAmD,CAAnD;AAAA,SACvBG,GAAG,CAACC,MAAJ,IAAcJ,GAAd,GAAoBG,GAAG,CAACE,QAAJ,CAAa,CAAb,EAAgBL,GAAhB,CAApB,GAA2CL,MAAM,CAAC,IAAKQ,GAAG,CAACG,WAAT,CAA6BN,GAA7B,CAAD,EAAoCG,GAApC,EAAyC,CAAzC,CAD1B;AAAA,CAA3B;AASA;;;AACA,WAAaI,aAAb;AAEI,yBAAYC,MAAZ,EAAiC;AAAA,QAAVC,MAAU,uEAAD,CAAC;;AAAA;;AAC7B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,iBAAL,GAAyBF,MAAM,CAACE,iBAAhC;AACA,SAAKC,SAAL,GAAiBH,MAAM,CAACF,WAAxB;;AACA,SAAKM,OAAL,CAAa,KAAKR,MAAL,GAAcI,MAAM,CAACJ,MAAP,GAAgBK,MAAhB,GAAyB,CAApD;AACH;;AARL;AAAA;AAAA,SAgBI,eAAqB;AAAK,aAAO,KAAKL,MAAL,GAAc,KAAKK,MAAnB,GAA4B,KAAKC,iBAAjC,GAAqD,CAA5D;AAAgE;AAhB9F;AAAA;AAAA,SAiBI,eAAyB;AAAK,aAAO,KAAKF,MAAL,CAAYJ,MAAZ,GAAqB,KAAKK,MAAjC;AAA0C;AAjB5E;AAAA;AAAA,SAkBI,eAA6B;AAAK,aAAO,KAAKD,MAAL,CAAYK,UAAnB;AAAgC,KAlBtE,CAoBI;;AApBJ;AAAA;AAAA,WAqBW,aAAIC,KAAJ,EAAmBC,KAAnB,EAAgC;AAAI,aAAO,IAAP;AAAc;AArB7D;AAAA;AAAA,WAsBW,gBAAOA,KAAP,EAAoB;AAAI,aAAO,KAAKC,GAAL,CAAS,KAAKZ,MAAd,EAAsBW,KAAtB,CAAP;AAAsC;AAtBzE;AAAA;AAAA,WAuBW,iBAAQE,KAAR,EAAqB;AACxB,UAAIA,KAAK,GAAG,CAAZ,EAAe;AACX,aAAKb,MAAL,IAAea,KAAf;AACA,YAAMR,MAAM,GAAG,KAAKA,MAApB;AACA,YAAML,MAAM,GAAG,KAAKA,MAAL,GAAcK,MAA7B;AACA,YAAMS,QAAQ,GAAG,KAAKV,MAAL,CAAYJ,MAA7B;;AACA,YAAIA,MAAM,IAAIc,QAAd,EAAwB;AACpB,eAAKN,OAAL,CAAaM,QAAQ,KAAK,CAAb,GACPnB,6BAA6B,CAACK,MAAM,GAAG,CAAV,EAAa,KAAKM,iBAAlB,CADtB,GAEPX,6BAA6B,CAACK,MAAM,GAAG,CAAV,EAAa,KAAKM,iBAAlB,CAFnC;AAIH;AACJ;;AACD,aAAO,IAAP;AACH;AArCL;AAAA;AAAA,WAsCW,iBAA0B;AAAA,UAApBN,MAAoB,uEAAX,KAAKA,MAAM;AAC7BA,YAAM,GAAGL,6BAA6B,CAACK,MAAM,GAAG,KAAKK,MAAf,EAAuB,KAAKC,iBAA5B,CAAtC;AACA,UAAMS,KAAK,GAAGjB,kBAAkB,CAAI,KAAKM,MAAT,EAAiBJ,MAAjB,CAAhC;AACA,WAAKgB,KAAL;AACA,aAAOD,KAAP;AACH;AA3CL;AAAA;AAAA,WA4CW,iBAAK;AACR,WAAKf,MAAL,GAAc,CAAd;;AACA,WAAKQ,OAAL,CAAa,CAAb;;AACA,aAAO,IAAP;AACH;AAhDL;AAAA;AAAA,WAiDc,iBAAQS,SAAR,EAAyB;AAC/B,aAAO,KAAKb,MAAL,GAAkBb,MAAM,CAAC,IAAI,KAAKgB,SAAT,CAAmBU,SAAnB,CAAD,EAAgC,KAAKb,MAArC,CAA/B;AACH;AAnDL;;AAAA;AAAA;AAsDCD,aAAa,CAACe,SAAd,CAAgCC,MAAhC,GAAyC,CAAzC;AAED;;AACA,WAAaC,iBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACW,gBAAI;AAAK,aAAO,KAAKC,GAAL,CAAS,KAAKrB,MAAL,GAAc,CAAvB,CAAP;AAAmC;AADvD;AAAA;AAAA,WAEW,aAAIU,KAAJ,EAAiB;AAAI,aAAO,KAAKN,MAAL,CAAYM,KAAZ,CAAP;AAA4B;AAF5D;AAAA;AAAA,WAGW,aAAIA,KAAJ,EAAmBC,KAAnB,EAAgC;AACnC,WAAKW,OAAL,CAAaZ,KAAK,GAAG,KAAKV,MAAb,GAAsB,CAAnC;AACA,WAAKI,MAAL,CAAYM,KAAK,GAAG,KAAKL,MAAzB,IAAmCM,KAAnC;AACA,aAAO,IAAP;AACH;AAPL;;AAAA;AAAA,EAA6DR,aAA7D;AAUA;;AACA,WAAaoB,mBAAb;AAAA;;AAAA;;AAEI,iCAAoC;AAAA;;AAAA,QAAxBC,IAAwB,uEAAjB,IAAIC,UAAJ,CAAe,CAAf,CAAiB;;AAAA;;AAAI,+BAAMD,IAAN,EAAY,IAAI,CAAhB;AAEjC,qBAAW,CAAX;AAF6B;AAAyB;;AAFjE;AAAA;AAAA,SAKI,eAAqB;AAAK,aAAO,KAAKxB,MAAL,GAAc,KAAK0B,QAA1B;AAAqC;AALnE;AAAA;AAAA,WAMW,aAAIC,GAAJ,EAAe;AAAI,aAAO,KAAKvB,MAAL,CAAYuB,GAAG,IAAI,CAAnB,KAAyBA,GAAG,GAAG,CAA/B,GAAmC,CAA1C;AAA8C;AAN5E;AAAA;AAAA,WAOW,aAAIA,GAAJ,EAAiBC,GAAjB,EAA4B;AAC/B,0BAAmB,KAAKN,OAAL,CAAaK,GAAG,GAAG,KAAK3B,MAAX,GAAoB,CAAjC,CAAnB;AAAA,UAAQI,MAAR,iBAAQA,MAAR;;AACA,UAAMyB,IAAI,GAAGF,GAAG,IAAI,CAApB;AAAA,UAAuBG,GAAG,GAAGH,GAAG,GAAG,CAAnC;AAAA,UAAsCI,GAAG,GAAG3B,MAAM,CAACyB,IAAD,CAAN,IAAgBC,GAAhB,GAAsB,CAAlE,CAF+B,CAG/B;AACA;;AACAF,SAAG,GAAGG,GAAG,KAAK,CAAR,KAAe3B,MAAM,CAACyB,IAAD,CAAN,IAAkB,KAAKC,GAAxB,EAA+B,EAAE,KAAKJ,QAApD,CAAH,GACGK,GAAG,KAAK,CAAR,KAAe3B,MAAM,CAACyB,IAAD,CAAN,IAAgB,EAAE,KAAKC,GAAP,CAAjB,EAA+B,EAAE,KAAKJ,QAApD,CADN;AAEA,aAAO,IAAP;AACH;AAfL;AAAA;AAAA,WAgBW,iBAAK;AACR,WAAKA,QAAL,GAAgB,CAAhB;AACA;AACH;AAnBL;;AAAA;AAAA,EAAyCN,iBAAzC;AAsBA;;AACA,WAAaY,oBAAb;AAAA;;AAAA;;AACI,kCAAoC;AAAA,QAAxBR,IAAwB,uEAAjB,IAAIS,UAAJ,CAAe,CAAf,CAAiB;;AAAA;;AAAA,8BAAUT,IAAV,EAAgB,CAAhB;AAAqB;;AAD7D;AAAA;AAAA,WAEW,gBAAOb,KAAP,EAAoB;AACvB,aAAO,KAAKC,GAAL,CAAS,KAAKZ,MAAL,GAAc,CAAvB,EAA0BW,KAA1B,CAAP;AACH;AAJL;AAAA;AAAA,WAKW,aAAID,KAAJ,EAAmBC,KAAnB,EAAgC;AACnC,UAAMQ,MAAM,GAAG,KAAKnB,MAAL,GAAc,CAA7B;AACA,UAAMI,MAAM,GAAG,KAAKkB,OAAL,CAAaZ,KAAK,GAAGS,MAAR,GAAiB,CAA9B,EAAiCf,MAAhD;;AACA,UAAIe,MAAM,GAAGT,KAAK,EAAlB,EAAsB;AAClBN,cAAM,CAAC8B,IAAP,CAAY9B,MAAM,CAACe,MAAD,CAAlB,EAA4BA,MAA5B,EAAoCT,KAApC;AACH;;AACDN,YAAM,CAACM,KAAD,CAAN,GAAgBN,MAAM,CAACM,KAAK,GAAG,CAAT,CAAN,GAAoBC,KAApC;AACA,aAAO,IAAP;AACH;AAbL;AAAA;AAAA,WAcW,iBAA8B;AAAA,UAAxBX,MAAwB,uEAAf,KAAKA,MAAL,GAAc,CAAC;;AACjC,UAAIA,MAAM,GAAG,KAAKA,MAAlB,EAA0B;AACtB,aAAKY,GAAL,CAASZ,MAAM,GAAG,CAAlB,EAAqB,CAArB;AACH;;AACD,6FAAmBA,MAAM,GAAG,CAA5B;AACH;AAnBL;;AAAA;AAAA,EAA0CoB,iBAA1C;AAsBA;;AACA,WAAae,iBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,SAKI,eAAsB;AAClB,aAAO,KAAKC,YAAL,KAAsB,KAAKA,YAAL,GAAiD,KAAKhC,MAAL,YAAuB6B,UAAvB,GAAoCxC,aAApC,GAAoDC,cAA3H,CAAP;AACH;AAPL;AAAA;AAAA,WAQW,aAAIgB,KAAJ,EAAmBC,KAAnB,EAAsC;AACzC,WAAKW,OAAL,CAAaZ,KAAK,GAAG,KAAKV,MAAb,GAAsB,CAAnC;;AACA,cAAQ,OAAOW,KAAf;AACI,aAAK,QAAL;AAAe,eAAK0B,QAAL,CAAc3B,KAAd,IAAuBC,KAAvB;AAA8B;;AAC7C,aAAK,QAAL;AAAe,eAAKP,MAAL,CAAYM,KAAK,GAAG,KAAKL,MAAzB,IAAmCM,KAAnC;AAA0C;;AACzD;AAAS,eAAKP,MAAL,CAAYQ,GAAZ,CAAgBD,KAAhB,EAAqCD,KAAK,GAAG,KAAKL,MAAlD;AAHb;;AAKA,aAAO,IAAP;AACH;AAhBL;AAAA;AAAA,WAiBc,iBAAQY,SAAR,EAAyB;AAC/B,UAAMO,IAAI,kFAAiBP,SAAjB,CAAV;;AACA,UAAMjB,MAAM,GAAGwB,IAAI,CAACf,UAAL,IAAmB,KAAKH,iBAAL,GAAyB,KAAKD,MAAjD,CAAf;;AACA,UAAIb,eAAJ,EAAqB;AACjB,aAAK6C,QAAL,GAAgB,IAAI,KAAKC,WAAT,CAAqBd,IAAI,CAACpB,MAA1B,EAAkCoB,IAAI,CAACe,UAAvC,EAAmDvC,MAAnD,CAAhB;AACH;;AACD,aAAOwB,IAAP;AACH;AAxBL;;AAAA;AAAA,EAAoFrB,aAApF","names":["memcpy","BigIntAvailable","BigInt64Array","BigUint64Array","roundLengthUpToNearest64Bytes","len","BPE","sliceOrExtendArray","arr","length","subarray","constructor","BufferBuilder","buffer","stride","BYTES_PER_ELEMENT","ArrayType","_resize","byteLength","index","value","set","extra","reserved","array","clear","newLength","prototype","offset","DataBufferBuilder","get","reserve","BitmapBufferBuilder","data","Uint8Array","numValid","idx","val","byte","bit","cur","OffsetsBufferBuilder","Int32Array","fill","WideBufferBuilder","_ArrayType64","buffer64","ArrayType64","byteOffset"],"sources":["builder/buffer.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}