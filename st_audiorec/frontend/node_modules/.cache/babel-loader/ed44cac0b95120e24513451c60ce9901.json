{"ast":null,"code":"import _toConsumableArray from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { Chunked } from './vector/chunked';\nexport var Column = /*#__PURE__*/function (_Chunked) {\n  _inherits(Column, _Chunked);\n\n  var _super = _createSuper(Column);\n\n  function Column(field) {\n    var _this;\n\n    var vectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var offsets = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Column);\n\n    vectors = Chunked.flatten.apply(Chunked, _toConsumableArray(vectors));\n    _this = _super.call(this, field.type, vectors, offsets);\n    _this._field = field;\n\n    if (vectors.length === 1 && !(_assertThisInitialized(_this) instanceof SingleChunkColumn)) {\n      return _possibleConstructorReturn(_this, new SingleChunkColumn(field, vectors[0], _this._chunkOffsets));\n    }\n\n    return _this;\n  }\n  /** @nocollapse */\n\n\n  _createClass(Column, [{\n    key: \"field\",\n    get: function get() {\n      return this._field;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._field.name;\n    }\n  }, {\n    key: \"nullable\",\n    get: function get() {\n      return this._field.nullable;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._field.metadata;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;\n      return new Column(this._field, chunks);\n    }\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      if (index < 0 || index >= this.numChildren) {\n        return null;\n      }\n\n      var columns = this._children || (this._children = []);\n      var column, field, chunks;\n\n      if (column = columns[index]) {\n        return column;\n      }\n\n      if (field = (this.type.children || [])[index]) {\n        chunks = this._chunks.map(function (vector) {\n          return vector.getChildAt(index);\n        }).filter(function (vec) {\n          return vec != null;\n        });\n\n        if (chunks.length > 0) {\n          return columns[index] = new Column(field, chunks);\n        }\n      }\n\n      return null;\n    }\n  }], [{\n    key: \"new\",\n    value: function _new(field, data) {\n      for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        rest[_key - 2] = arguments[_key];\n      }\n\n      var chunks = Chunked.flatten(Array.isArray(data) ? [].concat(_toConsumableArray(data), rest) : data instanceof Vector ? [data].concat(rest) : [Vector.new.apply(Vector, [data].concat(rest))]);\n\n      if (typeof field === 'string') {\n        var type = chunks[0].data.type;\n        field = new Field(field, type, true);\n      } else if (!field.nullable && chunks.some(function (_ref) {\n        var nullCount = _ref.nullCount;\n        return nullCount > 0;\n      })) {\n        field = field.clone({\n          nullable: true\n        });\n      }\n\n      return new Column(field, chunks);\n    }\n  }]);\n\n  return Column;\n}(Chunked);\n/** @ignore */\n\nvar SingleChunkColumn = /*#__PURE__*/function (_Column) {\n  _inherits(SingleChunkColumn, _Column);\n\n  var _super2 = _createSuper(SingleChunkColumn);\n\n  function SingleChunkColumn(field, vector, offsets) {\n    var _this2;\n\n    _classCallCheck(this, SingleChunkColumn);\n\n    _this2 = _super2.call(this, field, [vector], offsets);\n    _this2._chunk = vector;\n    return _this2;\n  }\n\n  _createClass(SingleChunkColumn, [{\n    key: \"search\",\n    value: function search(index, then) {\n      return then ? then(this, 0, index) : [0, index];\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(index) {\n      return this._chunk.isValid(index);\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this._chunk.get(index);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this._chunk.set(index, value);\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(element, offset) {\n      return this._chunk.indexOf(element, offset);\n    }\n  }]);\n\n  return SingleChunkColumn;\n}(Column);","map":{"version":3,"mappings":"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","names":["Field","Vector","Chunked","Column","field","vectors","offsets","flatten","type","_field","length","SingleChunkColumn","_chunkOffsets","name","nullable","metadata","chunks","_chunks","index","numChildren","columns","_children","column","children","map","vector","getChildAt","filter","vec","data","rest","Array","isArray","new","some","nullCount","clone","_chunk","then","isValid","get","value","set","element","offset","indexOf"],"sources":["column.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}