{"ast":null,"code":"import _regeneratorRuntime from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/regenerator\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\n/** @ignore */\n\nexport var IteratorVisitor = /*#__PURE__*/function (_Visitor) {\n  _inherits(IteratorVisitor, _Visitor);\n\n  var _super = _createSuper(IteratorVisitor);\n\n  function IteratorVisitor() {\n    _classCallCheck(this, IteratorVisitor);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(IteratorVisitor);\n}(Visitor);\n/** @ignore */\n\nfunction nullableIterator(vector) {\n  var getFn = getVisitor.getVisitFn(vector);\n  return iterateBits(vector.nullBitmap, vector.offset, vector.length, vector, function (vec, idx, nullByte, nullBit) {\n    return (nullByte & 1 << nullBit) !== 0 ? getFn(vec, idx) : null;\n  });\n}\n/** @ignore */\n\n\nfunction vectorIterator(vector) {\n  // If nullable, iterate manually\n  if (vector.nullCount > 0) {\n    return nullableIterator(vector);\n  }\n\n  var type = vector.type,\n      typeId = vector.typeId,\n      length = vector.length; // Fast case, defer to native iterators if possible\n\n  if (vector.stride === 1 && (typeId === Type.Timestamp || typeId === Type.Int && type.bitWidth !== 64 || typeId === Type.Time && type.bitWidth !== 64 || typeId === Type.Float && type.precision > 0\n  /* Precision.HALF */\n  )) {\n    return vector.values.subarray(0, length)[Symbol.iterator]();\n  } // Otherwise, iterate manually\n\n\n  return /*#__PURE__*/_regeneratorRuntime.mark(function _callee(getFn) {\n    var index;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            index = -1;\n\n          case 1:\n            if (!(++index < length)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 4;\n            return getFn(vector, index);\n\n          case 4:\n            _context.next = 1;\n            break;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull = vectorIterator;\nIteratorVisitor.prototype.visitBool = vectorIterator;\nIteratorVisitor.prototype.visitInt = vectorIterator;\nIteratorVisitor.prototype.visitInt8 = vectorIterator;\nIteratorVisitor.prototype.visitInt16 = vectorIterator;\nIteratorVisitor.prototype.visitInt32 = vectorIterator;\nIteratorVisitor.prototype.visitInt64 = vectorIterator;\nIteratorVisitor.prototype.visitUint8 = vectorIterator;\nIteratorVisitor.prototype.visitUint16 = vectorIterator;\nIteratorVisitor.prototype.visitUint32 = vectorIterator;\nIteratorVisitor.prototype.visitUint64 = vectorIterator;\nIteratorVisitor.prototype.visitFloat = vectorIterator;\nIteratorVisitor.prototype.visitFloat16 = vectorIterator;\nIteratorVisitor.prototype.visitFloat32 = vectorIterator;\nIteratorVisitor.prototype.visitFloat64 = vectorIterator;\nIteratorVisitor.prototype.visitUtf8 = vectorIterator;\nIteratorVisitor.prototype.visitBinary = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;\nIteratorVisitor.prototype.visitDate = vectorIterator;\nIteratorVisitor.prototype.visitDateDay = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitTime = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitDecimal = vectorIterator;\nIteratorVisitor.prototype.visitList = vectorIterator;\nIteratorVisitor.prototype.visitStruct = vectorIterator;\nIteratorVisitor.prototype.visitUnion = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion = vectorIterator;\nIteratorVisitor.prototype.visitDictionary = vectorIterator;\nIteratorVisitor.prototype.visitInterval = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList = vectorIterator;\nIteratorVisitor.prototype.visitMap = vectorIterator;\n/** @ignore */\n\nexport var instance = new IteratorVisitor();","map":{"version":3,"mappings":"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","names":["Type","Visitor","iterateBits","instance","getVisitor","IteratorVisitor","nullableIterator","vector","getFn","getVisitFn","nullBitmap","offset","length","vec","idx","nullByte","nullBit","vectorIterator","nullCount","type","typeId","stride","Timestamp","Int","bitWidth","Time","Float","precision","values","subarray","Symbol","iterator","index","prototype","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap"],"sources":["visitor/iterator.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n"]},"metadata":{},"sourceType":"module"}