{"ast":null,"code":"import _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DateUnit } from '../enum';\nimport { BaseVector } from './base';\nimport { vectorFromValuesWithType } from './index';\nimport { DateDay, DateMillisecond } from '../type';\n/** @ignore */\n\nexport var DateVector = /*#__PURE__*/function (_BaseVector) {\n  _inherits(DateVector, _BaseVector);\n\n  var _super = _createSuper(DateVector);\n\n  function DateVector() {\n    _classCallCheck(this, DateVector);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DateVector, null, [{\n    key: \"from\",\n    value:\n    /** @nocollapse */\n    function from() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (args.length === 2) {\n        return vectorFromValuesWithType(function () {\n          return args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond();\n        }, args[0]);\n      }\n\n      return vectorFromValuesWithType(function () {\n        return new DateMillisecond();\n      }, args[0]);\n    }\n  }]);\n\n  return DateVector;\n}(BaseVector);\n/** @ignore */\n\nexport var DateDayVector = /*#__PURE__*/function (_DateVector) {\n  _inherits(DateDayVector, _DateVector);\n\n  var _super2 = _createSuper(DateDayVector);\n\n  function DateDayVector() {\n    _classCallCheck(this, DateDayVector);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return _createClass(DateDayVector);\n}(DateVector);\n/** @ignore */\n\nexport var DateMillisecondVector = /*#__PURE__*/function (_DateVector2) {\n  _inherits(DateMillisecondVector, _DateVector2);\n\n  var _super3 = _createSuper(DateMillisecondVector);\n\n  function DateMillisecondVector() {\n    _classCallCheck(this, DateMillisecondVector);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return _createClass(DateMillisecondVector);\n}(DateVector);","map":{"version":3,"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,SAAzB;AAEA,SAASC,UAAT,QAA2B,QAA3B;AAGA,SAASC,wBAAT,QAAyC,SAAzC;AAEA,SAAgBC,OAAhB,EAAyBC,eAAzB,QAAiD,SAAjD;AAKA;;AACA,WAAaC,UAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOI;AACO,oBAA8L;AAAA,wCAAjJC,IAAiJ;AAAjJA,YAAiJ;AAAA;;AACjM,UAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACnB,eAAOL,wBAAwB,CAAC;AAAA,iBAAMI,IAAI,CAAC,CAAD,CAAJ,KAAYN,QAAQ,CAACQ,GAArB,GAA2B,IAAIL,OAAJ,EAA3B,GAA2C,IAAIC,eAAJ,EAAjD;AAAA,SAAD,EAA8EE,IAAI,CAAC,CAAD,CAAlF,CAA/B;AACH;;AACD,aAAOJ,wBAAwB,CAAC;AAAA,eAAM,IAAIE,eAAJ,EAAN;AAAA,OAAD,EAAmCE,IAAI,CAAC,CAAD,CAAvC,CAA/B;AACH;AAbL;;AAAA;AAAA,EAAyDL,UAAzD;AAgBA;;AACA,WAAaQ,aAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAAmCJ,UAAnC;AAEA;;AACA,WAAaK,qBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAA2CL,UAA3C","names":["DateUnit","BaseVector","vectorFromValuesWithType","DateDay","DateMillisecond","DateVector","args","length","DAY","DateDayVector","DateMillisecondVector"],"sources":["vector/date.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DateUnit } from '../enum';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>]) {\n        if (args.length === 2) {\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\n        }\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n"]},"metadata":{},"sourceType":"module"}