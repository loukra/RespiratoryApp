{"ast":null,"code":"import _toConsumableArray from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder } from '../builder';\nimport { Union } from '../type';\n/** @ignore */\n\nexport var UnionBuilder = /*#__PURE__*/function (_Builder) {\n  _inherits(UnionBuilder, _Builder);\n\n  var _super = _createSuper(UnionBuilder);\n\n  function UnionBuilder(options) {\n    var _this;\n\n    _classCallCheck(this, UnionBuilder);\n\n    _this = _super.call(this, options);\n    _this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n\n    if (typeof options['valueToChildTypeId'] === 'function') {\n      _this._valueToChildTypeId = options['valueToChildTypeId'];\n    }\n\n    return _this;\n  }\n\n  _createClass(UnionBuilder, [{\n    key: \"typeIdToChildIndex\",\n    get: function get() {\n      return this.type.typeIdToChildIndex;\n    }\n  }, {\n    key: \"append\",\n    value: function append(value, childTypeId) {\n      return this.set(this.length, value, childTypeId);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value, childTypeId) {\n      if (childTypeId === undefined) {\n        childTypeId = this._valueToChildTypeId(this, value, index);\n      }\n\n      if (this.setValid(index, this.isValid(value))) {\n        this.setValue(index, value, childTypeId);\n      }\n\n      return this;\n    } // @ts-ignore\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(index, value, childTypeId) {\n      this._typeIds.set(index, childTypeId);\n\n      _get(_getPrototypeOf(UnionBuilder.prototype), \"setValue\", this).call(this, index, value);\n    } // @ts-ignore\n\n  }, {\n    key: \"addChild\",\n    value: function addChild(child) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\".concat(this.children.length);\n      var childTypeId = this.children.push(child);\n      var _this$type = this.type,\n          children = _this$type.children,\n          mode = _this$type.mode,\n          typeIds = _this$type.typeIds;\n      var fields = [].concat(_toConsumableArray(children), [new Field(name, child.type)]);\n      this.type = new Union(mode, [].concat(_toConsumableArray(typeIds), [childTypeId]), fields);\n      return childTypeId;\n    }\n    /** @ignore */\n    // @ts-ignore\n\n  }, {\n    key: \"_valueToChildTypeId\",\n    value: function _valueToChildTypeId(builder, value, offset) {\n      throw new Error(\"Cannot map UnionBuilder value to child typeId. Pass the `childTypeId` as the second argument to unionBuilder.append(), or supply a `valueToChildTypeId` function as part of the UnionBuilder constructor options.\");\n    }\n  }]);\n\n  return UnionBuilder;\n}(Builder);\n/** @ignore */\n\nexport var SparseUnionBuilder = /*#__PURE__*/function (_UnionBuilder) {\n  _inherits(SparseUnionBuilder, _UnionBuilder);\n\n  var _super2 = _createSuper(SparseUnionBuilder);\n\n  function SparseUnionBuilder() {\n    _classCallCheck(this, SparseUnionBuilder);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return _createClass(SparseUnionBuilder);\n}(UnionBuilder);\n/** @ignore */\n\nexport var DenseUnionBuilder = /*#__PURE__*/function (_UnionBuilder2) {\n  _inherits(DenseUnionBuilder, _UnionBuilder2);\n\n  var _super3 = _createSuper(DenseUnionBuilder);\n\n  function DenseUnionBuilder(options) {\n    var _this2;\n\n    _classCallCheck(this, DenseUnionBuilder);\n\n    _this2 = _super3.call(this, options);\n    _this2._offsets = new DataBufferBuilder(new Int32Array(0));\n    return _this2;\n  }\n  /** @ignore */\n\n\n  _createClass(DenseUnionBuilder, [{\n    key: \"setValue\",\n    value: function setValue(index, value, childTypeId) {\n      var childIndex = this.type.typeIdToChildIndex[childTypeId];\n\n      this._offsets.set(index, this.getChildAt(childIndex).length);\n\n      return _get(_getPrototypeOf(DenseUnionBuilder.prototype), \"setValue\", this).call(this, index, value, childTypeId);\n    }\n  }]);\n\n  return DenseUnionBuilder;\n}(UnionBuilder);","map":{"version":3,"mappings":"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","names":["Field","DataBufferBuilder","Builder","Union","UnionBuilder","options","_typeIds","Int8Array","_valueToChildTypeId","type","typeIdToChildIndex","value","childTypeId","set","length","index","undefined","setValid","isValid","setValue","child","name","children","push","mode","typeIds","fields","builder","offset","Error","SparseUnionBuilder","DenseUnionBuilder","_offsets","Int32Array","childIndex","getChildAt"],"sources":["builder/union.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}