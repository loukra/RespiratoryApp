{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\n\nexport function createIsValidFunction(nullValues) {\n  if (!nullValues || nullValues.length <= 0) {\n    // @ts-ignore\n    return function isValid(value) {\n      return true;\n    };\n  }\n\n  var fnBody = '';\n  var noNaNs = nullValues.filter(function (x) {\n    return x === x;\n  });\n\n  if (noNaNs.length > 0) {\n    fnBody = \"\\n    switch (x) {\".concat(noNaNs.map(function (x) {\n      return \"\\n        case \".concat(valueToCase(x), \":\");\n    }).join(''), \"\\n            return false;\\n    }\");\n  } // NaN doesn't equal anything including itself, so it doesn't work as a\n  // switch case. Instead we must explicitly check for NaN before the switch.\n\n\n  if (nullValues.length !== noNaNs.length) {\n    fnBody = \"if (x !== x) return false;\\n\".concat(fnBody);\n  }\n\n  return new Function(\"x\", \"\".concat(fnBody, \"\\nreturn true;\"));\n}\n/** @ignore */\n\nfunction valueToCase(x) {\n  if (typeof x !== 'bigint') {\n    return valueToString(x);\n  } else if (BigIntAvailable) {\n    return \"\".concat(valueToString(x), \"n\");\n  }\n\n  return \"\\\"\".concat(valueToString(x), \"\\\"\");\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,aAAT,QAA8B,gBAA9B;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,SAAUC,qBAAV,CAAuEC,UAAvE,EAAwG;AAE1G,MAAI,CAACA,UAAD,IAAeA,UAAU,CAACC,MAAX,IAAqB,CAAxC,EAA2C;AACvC;AACA,WAAO,SAASC,OAAT,CAAiBC,KAAjB,EAA2B;AAAI,aAAO,IAAP;AAAc,KAApD;AACH;;AAED,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,MAAM,GAAGL,UAAU,CAACM,MAAX,CAAkB,UAACC,CAAD;AAAA,WAAOA,CAAC,KAAKA,CAAb;AAAA,GAAlB,CAAb;;AAEA,MAAIF,MAAM,CAACJ,MAAP,GAAgB,CAApB,EAAuB;AACnBG,UAAM,+BACIC,MAAM,CAACG,GAAP,CAAW,UAACD,CAAD;AAAA,sCACdE,WAAW,CAACF,CAAD,CADG;AAAA,KAAX,EACgBG,IADhB,CACqB,EADrB,CADJ,uCAAN;AAKH,GAhByG,CAkB1G;AACA;;;AACA,MAAIV,UAAU,CAACC,MAAX,KAAsBI,MAAM,CAACJ,MAAjC,EAAyC;AACrCG,UAAM,yCAAkCA,MAAlC,CAAN;AACH;;AAED,SAAO,IAAIO,QAAJ,gBAAqBP,MAArB,oBAAP;AACH;AAED;;AACA,SAASK,WAAT,CAAqBF,CAArB,EAA2B;AACvB,MAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACvB,WAAOV,aAAa,CAACU,CAAD,CAApB;AACH,GAFD,MAEO,IAAIT,eAAJ,EAAqB;AACxB,qBAAUD,aAAa,CAACU,CAAD,CAAvB;AACH;;AACD,qBAAWV,aAAa,CAACU,CAAD,CAAxB;AACH","names":["valueToString","BigIntAvailable","createIsValidFunction","nullValues","length","isValid","value","fnBody","noNaNs","filter","x","map","valueToCase","join","Function"],"sources":["builder/valid.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n"]},"metadata":{},"sourceType":"module"}