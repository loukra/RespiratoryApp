{"ast":null,"code":"import _toConsumableArray from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _regeneratorRuntime from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ITERATOR_DONE } from '../io/interfaces';\n/** @ignore */\n\nvar invalidMessageType = function invalidMessageType(type) {\n  return \"Expected \".concat(MessageHeader[type], \" Message in stream, but was null or length 0.\");\n};\n/** @ignore */\n\n\nvar nullMessage = function nullMessage(type) {\n  return \"Header pointer of flatbuffer-encoded \".concat(MessageHeader[type], \" Message is null or length 0.\");\n};\n/** @ignore */\n\n\nvar invalidMessageMetadata = function invalidMessageMetadata(expected, actual) {\n  return \"Expected to read \".concat(expected, \" metadata bytes, but only read \").concat(actual, \".\");\n};\n/** @ignore */\n\n\nvar invalidMessageBodyLength = function invalidMessageBodyLength(expected, actual) {\n  return \"Expected to read \".concat(expected, \" bytes for message body, but only read \").concat(actual, \".\");\n};\n/** @ignore */\n\n\nexport var MessageReader = /*#__PURE__*/function (_Symbol$iterator) {\n  function MessageReader(source) {\n    _classCallCheck(this, MessageReader);\n\n    this.source = source instanceof ByteStream ? source : new ByteStream(source);\n  }\n\n  _createClass(MessageReader, [{\n    key: _Symbol$iterator,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var r;\n\n      if ((r = this.readMetadataLength()).done) {\n        return ITERATOR_DONE;\n      } // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n      // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n      // pre-v0.15 message, where the first 4 bytes are the metadata length.\n\n\n      if (r.value === -1 && (r = this.readMetadataLength()).done) {\n        return ITERATOR_DONE;\n      }\n\n      if ((r = this.readMetadata(r.value)).done) {\n        return ITERATOR_DONE;\n      }\n\n      return r;\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      return this.source.throw(value);\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      return this.source.return(value);\n    }\n  }, {\n    key: \"readMessage\",\n    value: function readMessage(type) {\n      var r;\n\n      if ((r = this.next()).done) {\n        return null;\n      }\n\n      if (type != null && r.value.headerType !== type) {\n        throw new Error(invalidMessageType(type));\n      }\n\n      return r.value;\n    }\n  }, {\n    key: \"readMessageBody\",\n    value: function readMessageBody(bodyLength) {\n      if (bodyLength <= 0) {\n        return new Uint8Array(0);\n      }\n\n      var buf = toUint8Array(this.source.read(bodyLength));\n\n      if (buf.byteLength < bodyLength) {\n        throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n      } // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n      // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n\n\n      return (\n        /* 1. */\n        buf.byteOffset % 8 === 0 &&\n        /* 2. */\n        buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice()\n      );\n    }\n  }, {\n    key: \"readSchema\",\n    value: function readSchema() {\n      var throwIfNull = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var type = MessageHeader.Schema;\n      var message = this.readMessage(type);\n      var schema = message && message.header();\n\n      if (throwIfNull && !schema) {\n        throw new Error(nullMessage(type));\n      }\n\n      return schema;\n    }\n  }, {\n    key: \"readMetadataLength\",\n    value: function readMetadataLength() {\n      var buf = this.source.read(PADDING);\n      var bb = buf && new ByteBuffer(buf);\n      var len = bb && bb.readInt32(0) || 0;\n      return {\n        done: len === 0,\n        value: len\n      };\n    }\n  }, {\n    key: \"readMetadata\",\n    value: function readMetadata(metadataLength) {\n      var buf = this.source.read(metadataLength);\n\n      if (!buf) {\n        return ITERATOR_DONE;\n      }\n\n      if (buf.byteLength < metadataLength) {\n        throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n      }\n\n      return {\n        done: false,\n        value: Message.decode(buf)\n      };\n    }\n  }]);\n\n  return MessageReader;\n}(Symbol.iterator);\n/** @ignore */\n\nexport var AsyncMessageReader = /*#__PURE__*/function (_Symbol$asyncIterator) {\n  function AsyncMessageReader(source, byteLength) {\n    _classCallCheck(this, AsyncMessageReader);\n\n    this.source = source instanceof AsyncByteStream ? source : isFileHandle(source) ? new AsyncRandomAccessFile(source, byteLength) : new AsyncByteStream(source);\n  }\n\n  _createClass(AsyncMessageReader, [{\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var r;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.readMetadataLength();\n\n              case 2:\n                if (!(r = _context.sent).done) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", ITERATOR_DONE);\n\n              case 4:\n                _context.t0 = r.value === -1;\n\n                if (!_context.t0) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 8;\n                return this.readMetadataLength();\n\n              case 8:\n                _context.t0 = (r = _context.sent).done;\n\n              case 9:\n                if (!_context.t0) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", ITERATOR_DONE);\n\n              case 11:\n                _context.next = 13;\n                return this.readMetadata(r.value);\n\n              case 13:\n                if (!(r = _context.sent).done) {\n                  _context.next = 15;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", ITERATOR_DONE);\n\n              case 15:\n                return _context.abrupt(\"return\", r);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function next() {\n        return _next.apply(this, arguments);\n      }\n\n      return next;\n    }()\n  }, {\n    key: \"throw\",\n    value: function () {\n      var _throw2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.source.throw(value);\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _throw(_x) {\n        return _throw2.apply(this, arguments);\n      }\n\n      return _throw;\n    }()\n  }, {\n    key: \"return\",\n    value: function () {\n      var _return2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(value) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.source.return(value);\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _return(_x2) {\n        return _return2.apply(this, arguments);\n      }\n\n      return _return;\n    }()\n  }, {\n    key: \"readMessage\",\n    value: function () {\n      var _readMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(type) {\n        var r;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.next();\n\n              case 2:\n                if (!(r = _context4.sent).done) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 4:\n                if (!(type != null && r.value.headerType !== type)) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(invalidMessageType(type));\n\n              case 6:\n                return _context4.abrupt(\"return\", r.value);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function readMessage(_x3) {\n        return _readMessage.apply(this, arguments);\n      }\n\n      return readMessage;\n    }()\n  }, {\n    key: \"readMessageBody\",\n    value: function () {\n      var _readMessageBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(bodyLength) {\n        var buf;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(bodyLength <= 0)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", new Uint8Array(0));\n\n              case 2:\n                _context5.t0 = toUint8Array;\n                _context5.next = 5;\n                return this.source.read(bodyLength);\n\n              case 5:\n                _context5.t1 = _context5.sent;\n                buf = (0, _context5.t0)(_context5.t1);\n\n                if (!(buf.byteLength < bodyLength)) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n\n              case 9:\n                return _context5.abrupt(\"return\",\n                /* 1. */\n                buf.byteOffset % 8 === 0 &&\n                /* 2. */\n                buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice());\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function readMessageBody(_x4) {\n        return _readMessageBody.apply(this, arguments);\n      }\n\n      return readMessageBody;\n    }()\n  }, {\n    key: \"readSchema\",\n    value: function () {\n      var _readSchema = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var throwIfNull,\n            type,\n            message,\n            schema,\n            _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                throwIfNull = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : false;\n                type = MessageHeader.Schema;\n                _context6.next = 4;\n                return this.readMessage(type);\n\n              case 4:\n                message = _context6.sent;\n                schema = message && message.header();\n\n                if (!(throwIfNull && !schema)) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                throw new Error(nullMessage(type));\n\n              case 8:\n                return _context6.abrupt(\"return\", schema);\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function readSchema() {\n        return _readSchema.apply(this, arguments);\n      }\n\n      return readSchema;\n    }()\n  }, {\n    key: \"readMetadataLength\",\n    value: function () {\n      var _readMetadataLength = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var buf, bb, len;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.source.read(PADDING);\n\n              case 2:\n                buf = _context7.sent;\n                bb = buf && new ByteBuffer(buf);\n                len = bb && bb.readInt32(0) || 0;\n                return _context7.abrupt(\"return\", {\n                  done: len === 0,\n                  value: len\n                });\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function readMetadataLength() {\n        return _readMetadataLength.apply(this, arguments);\n      }\n\n      return readMetadataLength;\n    }()\n  }, {\n    key: \"readMetadata\",\n    value: function () {\n      var _readMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(metadataLength) {\n        var buf;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.source.read(metadataLength);\n\n              case 2:\n                buf = _context8.sent;\n\n                if (buf) {\n                  _context8.next = 5;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", ITERATOR_DONE);\n\n              case 5:\n                if (!(buf.byteLength < metadataLength)) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n\n              case 7:\n                return _context8.abrupt(\"return\", {\n                  done: false,\n                  value: Message.decode(buf)\n                });\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function readMetadata(_x5) {\n        return _readMetadata.apply(this, arguments);\n      }\n\n      return readMetadata;\n    }()\n  }]);\n\n  return AsyncMessageReader;\n}(Symbol.asyncIterator);\n/** @ignore */\n\nexport var JSONMessageReader = /*#__PURE__*/function (_MessageReader) {\n  _inherits(JSONMessageReader, _MessageReader);\n\n  var _super = _createSuper(JSONMessageReader);\n\n  function JSONMessageReader(source) {\n    var _this;\n\n    _classCallCheck(this, JSONMessageReader);\n\n    _this = _super.call(this, new Uint8Array(0));\n    _this._schema = false;\n    _this._body = [];\n    _this._batchIndex = 0;\n    _this._dictionaryIndex = 0;\n    _this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    return _this;\n  }\n\n  _createClass(JSONMessageReader, [{\n    key: \"next\",\n    value: function next() {\n      var _json = this._json;\n\n      if (!this._schema) {\n        this._schema = true;\n        var message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n        return {\n          done: false,\n          value: message\n        };\n      }\n\n      if (this._dictionaryIndex < _json.dictionaries.length) {\n        var batch = _json.dictionaries[this._dictionaryIndex++];\n        this._body = batch['data']['columns'];\n\n        var _message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n\n        return {\n          done: false,\n          value: _message\n        };\n      }\n\n      if (this._batchIndex < _json.batches.length) {\n        var _batch = _json.batches[this._batchIndex++];\n        this._body = _batch['columns'];\n\n        var _message2 = Message.fromJSON(_batch, MessageHeader.RecordBatch);\n\n        return {\n          done: false,\n          value: _message2\n        };\n      }\n\n      this._body = [];\n      return ITERATOR_DONE;\n    }\n  }, {\n    key: \"readMessageBody\",\n    value: function readMessageBody(_bodyLength) {\n      return flattenDataSources(this._body);\n\n      function flattenDataSources(xs) {\n        return (xs || []).reduce(function (buffers, column) {\n          return [].concat(_toConsumableArray(buffers), _toConsumableArray(column['VALIDITY'] && [column['VALIDITY']] || []), _toConsumableArray(column['TYPE'] && [column['TYPE']] || []), _toConsumableArray(column['OFFSET'] && [column['OFFSET']] || []), _toConsumableArray(column['DATA'] && [column['DATA']] || []), _toConsumableArray(flattenDataSources(column['children'])));\n        }, []);\n      }\n    }\n  }, {\n    key: \"readMessage\",\n    value: function readMessage(type) {\n      var r;\n\n      if ((r = this.next()).done) {\n        return null;\n      }\n\n      if (type != null && r.value.headerType !== type) {\n        throw new Error(invalidMessageType(type));\n      }\n\n      return r.value;\n    }\n  }, {\n    key: \"readSchema\",\n    value: function readSchema() {\n      var type = MessageHeader.Schema;\n      var message = this.readMessage(type);\n      var schema = message && message.header();\n\n      if (!message || !schema) {\n        throw new Error(nullMessage(type));\n      }\n\n      return schema;\n    }\n  }]);\n\n  return JSONMessageReader;\n}(MessageReader);\n/** @ignore */\n\nexport var PADDING = 4;\n/** @ignore */\n\nexport var MAGIC_STR = 'ARROW1';\n/** @ignore */\n\nexport var MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (var i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n  MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n/** @ignore */\n\n\nexport function checkForMagicArrowString(buffer) {\n  var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  for (var _i = -1, n = MAGIC.length; ++_i < n;) {\n    if (MAGIC[_i] !== buffer[index + _i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/** @ignore */\n\nexport var magicLength = MAGIC.length;\n/** @ignore */\n\nexport var magicAndPadding = magicLength + PADDING;\n/** @ignore */\n\nexport var magicX2AndPadding = magicLength * 2 + PADDING;","map":{"version":3,"mappings":"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","names":["MessageHeader","flatbuffers","ByteBuffer","Message","isFileHandle","AsyncRandomAccessFile","toUint8Array","ByteStream","AsyncByteStream","ArrowJSON","ITERATOR_DONE","invalidMessageType","type","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","MessageReader","source","r","readMetadataLength","done","value","readMetadata","throw","return","next","headerType","Error","bodyLength","Uint8Array","buf","read","byteLength","byteOffset","buffer","slice","throwIfNull","Schema","message","readMessage","schema","header","PADDING","bb","len","readInt32","metadataLength","decode","Symbol","iterator","AsyncMessageReader","asyncIterator","JSONMessageReader","_json","_schema","fromJSON","_dictionaryIndex","dictionaries","length","batch","_body","DictionaryBatch","_batchIndex","batches","RecordBatch","_bodyLength","flattenDataSources","xs","reduce","buffers","column","MAGIC_STR","MAGIC","i","charCodeAt","checkForMagicArrowString","index","n","magicLength","magicAndPadding","magicX2AndPadding"],"sources":["ipc/message.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n"]},"metadata":{},"sourceType":"module"}