{"ast":null,"code":"import _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { vectorFromValuesWithType } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array as _toBigInt64Array, toBigUint64Array as _toBigUint64Array } from '../util/buffer';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\n/** @ignore */\n\nexport var IntVector = /*#__PURE__*/function (_BaseVector) {\n  _inherits(IntVector, _BaseVector);\n\n  var _super = _createSuper(IntVector);\n\n  function IntVector() {\n    _classCallCheck(this, IntVector);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(IntVector, null, [{\n    key: \"from\",\n    value:\n    /** @nocollapse */\n    function from() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var input = args[0],\n          _args$ = args[1],\n          is64bit = _args$ === void 0 ? false : _args$;\n      var ArrowType = vectorTypeToDataType(this, is64bit);\n\n      if (input instanceof ArrayBuffer || ArrayBuffer.isView(input)) {\n        var InputType = arrayTypeToDataType(input.constructor, is64bit) || ArrowType; // Special case, infer the Arrow DataType from the input if calling the base\n        // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n\n        if (ArrowType === null) {\n          ArrowType = InputType;\n        } // If the DataType inferred from the Vector constructor matches the\n        // DataType inferred from the input arguments, return zero-copy view\n\n\n        if (ArrowType && ArrowType === InputType) {\n          var type = new ArrowType();\n          var length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT; // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n\n          if (convert32To64Bit(ArrowType, input.constructor)) {\n            length *= 0.5;\n          }\n\n          return Vector.new(Data.Int(type, 0, length, 0, null, input));\n        }\n      }\n\n      if (ArrowType) {\n        // If the DataType inferred from the Vector constructor is different than\n        // the DataType inferred from the input TypedArray, or if input isn't a\n        // TypedArray, use the Builders to construct the result Vector\n        return vectorFromValuesWithType(function () {\n          return new ArrowType();\n        }, input);\n      }\n\n      if (input instanceof DataView || input instanceof ArrayBuffer) {\n        throw new TypeError(\"Cannot infer integer type from instance of \".concat(input.constructor.name));\n      }\n\n      throw new TypeError('Unrecognized IntVector input');\n    }\n  }]);\n\n  return IntVector;\n}(BaseVector);\n/** @ignore */\n\nexport var Int8Vector = /*#__PURE__*/function (_IntVector) {\n  _inherits(Int8Vector, _IntVector);\n\n  var _super2 = _createSuper(Int8Vector);\n\n  function Int8Vector() {\n    _classCallCheck(this, Int8Vector);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return _createClass(Int8Vector);\n}(IntVector);\n/** @ignore */\n\nexport var Int16Vector = /*#__PURE__*/function (_IntVector2) {\n  _inherits(Int16Vector, _IntVector2);\n\n  var _super3 = _createSuper(Int16Vector);\n\n  function Int16Vector() {\n    _classCallCheck(this, Int16Vector);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return _createClass(Int16Vector);\n}(IntVector);\n/** @ignore */\n\nexport var Int32Vector = /*#__PURE__*/function (_IntVector3) {\n  _inherits(Int32Vector, _IntVector3);\n\n  var _super4 = _createSuper(Int32Vector);\n\n  function Int32Vector() {\n    _classCallCheck(this, Int32Vector);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return _createClass(Int32Vector);\n}(IntVector);\n/** @ignore */\n\nexport var Int64Vector = /*#__PURE__*/function (_IntVector4) {\n  _inherits(Int64Vector, _IntVector4);\n\n  var _super5 = _createSuper(Int64Vector);\n\n  function Int64Vector() {\n    _classCallCheck(this, Int64Vector);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(Int64Vector, [{\n    key: \"toBigInt64Array\",\n    value: function toBigInt64Array() {\n      return _toBigInt64Array(this.values);\n    }\n  }, {\n    key: \"values64\",\n    get: function get() {\n      return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n  }]);\n\n  return Int64Vector;\n}(IntVector);\n/** @ignore */\n\nexport var Uint8Vector = /*#__PURE__*/function (_IntVector5) {\n  _inherits(Uint8Vector, _IntVector5);\n\n  var _super6 = _createSuper(Uint8Vector);\n\n  function Uint8Vector() {\n    _classCallCheck(this, Uint8Vector);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return _createClass(Uint8Vector);\n}(IntVector);\n/** @ignore */\n\nexport var Uint16Vector = /*#__PURE__*/function (_IntVector6) {\n  _inherits(Uint16Vector, _IntVector6);\n\n  var _super7 = _createSuper(Uint16Vector);\n\n  function Uint16Vector() {\n    _classCallCheck(this, Uint16Vector);\n\n    return _super7.apply(this, arguments);\n  }\n\n  return _createClass(Uint16Vector);\n}(IntVector);\n/** @ignore */\n\nexport var Uint32Vector = /*#__PURE__*/function (_IntVector7) {\n  _inherits(Uint32Vector, _IntVector7);\n\n  var _super8 = _createSuper(Uint32Vector);\n\n  function Uint32Vector() {\n    _classCallCheck(this, Uint32Vector);\n\n    return _super8.apply(this, arguments);\n  }\n\n  return _createClass(Uint32Vector);\n}(IntVector);\n/** @ignore */\n\nexport var Uint64Vector = /*#__PURE__*/function (_IntVector8) {\n  _inherits(Uint64Vector, _IntVector8);\n\n  var _super9 = _createSuper(Uint64Vector);\n\n  function Uint64Vector() {\n    _classCallCheck(this, Uint64Vector);\n\n    return _super9.apply(this, arguments);\n  }\n\n  _createClass(Uint64Vector, [{\n    key: \"toBigUint64Array\",\n    value: function toBigUint64Array() {\n      return _toBigUint64Array(this.values);\n    }\n  }, {\n    key: \"values64\",\n    get: function get() {\n      return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n  }]);\n\n  return Uint64Vector;\n}(IntVector);\n\nvar convert32To64Bit = function convert32To64Bit(typeCtor, dataCtor) {\n  return (typeCtor === Int64 || typeCtor === Uint64) && (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n/** @ignore */\n\n\nvar arrayTypeToDataType = function arrayTypeToDataType(ctor, is64bit) {\n  switch (ctor) {\n    case Int8Array:\n      return Int8;\n\n    case Int16Array:\n      return Int16;\n\n    case Int32Array:\n      return is64bit ? Int64 : Int32;\n\n    case BigInt64Array:\n      return Int64;\n\n    case Uint8Array:\n      return Uint8;\n\n    case Uint16Array:\n      return Uint16;\n\n    case Uint32Array:\n      return is64bit ? Uint64 : Uint32;\n\n    case BigUint64Array:\n      return Uint64;\n\n    default:\n      return null;\n  }\n};\n/** @ignore */\n\n\nvar vectorTypeToDataType = function vectorTypeToDataType(ctor, is64bit) {\n  switch (ctor) {\n    case Int8Vector:\n      return Int8;\n\n    case Int16Vector:\n      return Int16;\n\n    case Int32Vector:\n      return is64bit ? Int64 : Int32;\n\n    case Int64Vector:\n      return Int64;\n\n    case Uint8Vector:\n      return Uint8;\n\n    case Uint16Vector:\n      return Uint16;\n\n    case Uint32Vector:\n      return is64bit ? Uint64 : Uint32;\n\n    case Uint64Vector:\n      return Uint64;\n\n    default:\n      return null;\n  }\n};","map":{"version":3,"mappings":"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","names":["Data","Vector","BaseVector","vectorFromValuesWithType","BigInt64Array","BigUint64Array","toBigInt64Array","toBigUint64Array","Uint8","Uint16","Uint32","Uint64","Int8","Int16","Int32","Int64","IntVector","args","input","is64bit","ArrowType","vectorTypeToDataType","ArrayBuffer","isView","InputType","arrayTypeToDataType","constructor","type","length","byteLength","ArrayType","BYTES_PER_ELEMENT","convert32To64Bit","new","Int","DataView","TypeError","name","Int8Vector","Int16Vector","Int32Vector","Int64Vector","values","_values64","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","typeCtor","dataCtor","Int32Array","Uint32Array","ctor","Int8Array","Int16Array","Uint8Array","Uint16Array"],"sources":["vector/int.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\n\n/** @ignore */\ntype IntVectorConstructors =\n    typeof IntVector    |\n    typeof Int8Vector   |\n    typeof Int16Vector  |\n    typeof Int32Vector  |\n    typeof Uint8Vector  |\n    typeof Uint16Vector |\n    typeof Uint32Vector |\n    typeof Int64Vector  |\n    typeof Uint64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Int, TNull = any> =\n    IntArray | BigIntArray              |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\n\n/** @ignore */\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\n\n    // Not zero-copy\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\n\n        let [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Array:      return Int8;\n        case Int16Array:     return Int16;\n        case Int32Array:     return is64bit ? Int64 : Int32;\n        case BigInt64Array:  return Int64;\n        case Uint8Array:     return Uint8;\n        case Uint16Array:    return Uint16;\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\n        case BigUint64Array: return Uint64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Vector:   return Int8;\n        case Int16Vector:  return Int16;\n        case Int32Vector:  return is64bit ? Int64 : Int32;\n        case Int64Vector:  return Int64;\n        case Uint8Vector:  return Uint8;\n        case Uint16Vector: return Uint16;\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\n        case Uint64Vector: return Uint64;\n        default: return null;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}