{"ast":null,"code":"import _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\n/** @ignore */\n\nvar kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\n\nexport var StructVector = /*#__PURE__*/function (_BaseVector) {\n  _inherits(StructVector, _BaseVector);\n\n  var _super = _createSuper(StructVector);\n\n  function StructVector() {\n    _classCallCheck(this, StructVector);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(StructVector, [{\n    key: \"bind\",\n    value: function bind(index) {\n      var proto = this._row || (this._row = new StructRow(this));\n      var bound = Object.create(proto);\n      bound[kRowIndex] = index;\n      return bound;\n    }\n  }]);\n\n  return StructVector;\n}(BaseVector);","map":{"version":3,"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,QAA2B,QAA3B;AAGA;;AAAe,IAAMC,SAAS,GAAGC,MAAM,CAACC,GAAP,CAAW,UAAX,CAAlB;AACf;;AACA,WAAaC,YAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAGW,cAAKC,KAAL,EAAkB;AACrB,UAAMC,KAAK,GAAG,KAAKC,IAAL,KAAc,KAAKA,IAAL,GAAY,IAAIR,SAAJ,CAAiB,IAAjB,CAA1B,CAAd;AACA,UAAMS,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAd,CAAd;AACAE,WAAK,CAACP,SAAD,CAAL,GAAmBI,KAAnB;AACA,aAAOG,KAAP;AACH;AARL;;AAAA;AAAA,EAA+ER,UAA/E","names":["StructRow","BaseVector","kRowIndex","Symbol","for","StructVector","index","proto","_row","bound","Object","create"],"sources":["vector/struct.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    // @ts-ignore\n    private _row: StructRow<T>;\n    public bind(index: number): Struct<T>['TValue'] {\n        const proto = this._row || (this._row = new StructRow<T>(this));\n        const bound = Object.create(proto);\n        bound[kRowIndex] = index;\n        return bound;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}