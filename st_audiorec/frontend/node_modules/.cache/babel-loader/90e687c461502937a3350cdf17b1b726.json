{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n} // A type of promise-like that resolves synchronously and supports only one observer\n\n\nvar _iteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\")) : \"@@iterator\";\n\nvar _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\")) : \"@@asyncIterator\"; // Asynchronously call a function and send errors to recovery continuation\n\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nvar RecordState = Object.freeze({\n  START: 'start',\n  PAUSE: 'pause',\n  STOP: 'stop',\n  NONE: 'none'\n});\n\nvar AudioReactRecorder = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(AudioReactRecorder, _React$Component);\n\n  function AudioReactRecorder(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n\n    _this.init = function () {\n      try {\n        _this.leftchannel = [];\n        _this.rightchannel = [];\n        _this.recorder = null;\n        _this.recording = false;\n        _this.recordingLength = 0;\n        _this.volume = null;\n        _this.audioInput = null;\n        _this.sampleRate = null;\n        _this.AudioContext = window.AudioContext || window.webkitAudioContext;\n        _this.context = null;\n        _this.analyser = null;\n        _this.canvas = _this.canvasRef.current;\n        _this.canvasCtx = _this.canvas.getContext('2d');\n        _this.stream = null;\n        _this.tested = false;\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n        return Promise.resolve();\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n\n    _this.getStream = function (constraints) {\n      if (!constraints) {\n        constraints = {\n          audio: true,\n          video: false\n        };\n      }\n\n      return navigator.mediaDevices.getUserMedia(constraints);\n    };\n\n    _this.setUpRecording = function () {\n      _this.context = new _this.AudioContext();\n      _this.sampleRate = _this.context.sampleRate;\n      _this.volume = _this.context.createGain();\n      _this.audioInput = _this.context.createMediaStreamSource(_this.stream);\n      _this.analyser = _this.context.createAnalyser();\n\n      _this.audioInput.connect(_this.analyser);\n\n      var bufferSize = 2048;\n      _this.recorder = _this.context.createScriptProcessor(bufferSize, 2, 2);\n\n      _this.analyser.connect(_this.recorder);\n\n      _this.recorder.connect(_this.context.destination);\n\n      var self = _assertThisInitialized(_this);\n\n      _this.recorder.onaudioprocess = function (e) {\n        if (!self.recording) return;\n        var left = e.inputBuffer.getChannelData(0);\n        var right = e.inputBuffer.getChannelData(1);\n\n        if (!self.tested) {\n          self.tested = true;\n\n          if (!left.reduce(function (a, b) {\n            return a + b;\n          })) {\n            console.log('Error: There seems to be an issue with your Mic');\n            self.stop();\n            self.stream.getTracks().forEach(function (track) {\n              track.stop();\n            });\n            self.context.close();\n          }\n        }\n\n        self.leftchannel.push(new Float32Array(left));\n        self.rightchannel.push(new Float32Array(right));\n        self.recordingLength += bufferSize;\n      };\n\n      _this.visualize();\n    };\n\n    _this.mergeBuffers = function (channelBuffer, recordingLength) {\n      var result = new Float32Array(recordingLength);\n      var offset = 0;\n      var lng = channelBuffer.length;\n\n      for (var i = 0; i < lng; i++) {\n        var buffer = channelBuffer[i];\n        result.set(buffer, offset);\n        offset += buffer.length;\n      }\n\n      return result;\n    };\n\n    _this.interleave = function (leftChannel, rightChannel) {\n      var length = leftChannel.length + rightChannel.length;\n      var result = new Float32Array(length);\n      var inputIndex = 0;\n\n      for (var index = 0; index < length;) {\n        result[index++] = leftChannel[inputIndex];\n        result[index++] = rightChannel[inputIndex];\n        inputIndex++;\n      }\n\n      return result;\n    };\n\n    _this.writeUTFBytes = function (view, offset, string) {\n      var lng = string.length;\n\n      for (var i = 0; i < lng; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n\n    _this.visualize = function () {\n      var _this$props = _this.props,\n          backgroundColor = _this$props.backgroundColor,\n          foregroundColor = _this$props.foregroundColor;\n      _this.WIDTH = _this.canvas.width;\n      _this.HEIGHT = _this.canvas.height;\n      _this.CENTERX = _this.canvas.width / 2;\n      _this.CENTERY = _this.canvas.height / 2;\n      if (!_this.analyser) return;\n      _this.analyser.fftSize = 2048;\n      var bufferLength = _this.analyser.fftSize;\n      var dataArray = new Uint8Array(bufferLength);\n\n      _this.canvasCtx.clearRect(0, 0, _this.WIDTH, _this.HEIGHT);\n\n      var self = _assertThisInitialized(_this);\n\n      var draw = function draw() {\n        self.drawVisual = requestAnimationFrame(draw);\n        self.analyser.getByteTimeDomainData(dataArray);\n        self.canvasCtx.fillStyle = backgroundColor;\n        self.canvasCtx.fillRect(0, 0, self.WIDTH, self.HEIGHT);\n        self.canvasCtx.lineWidth = 2;\n        self.canvasCtx.strokeStyle = foregroundColor;\n        self.canvasCtx.beginPath();\n        var sliceWidth = self.WIDTH * 1.0 / bufferLength;\n        var x = 0;\n\n        for (var i = 0; i < bufferLength; i++) {\n          var v = dataArray[i] / 128.0;\n          var y = v * self.HEIGHT / 2;\n\n          if (i === 0) {\n            self.canvasCtx.moveTo(x, y);\n          } else {\n            self.canvasCtx.lineTo(x, y);\n          }\n\n          x += sliceWidth;\n        }\n\n        self.canvasCtx.lineTo(self.canvas.width, self.canvas.height / 2);\n        self.canvasCtx.stroke();\n      };\n\n      draw();\n    };\n\n    _this.setupMic = function () {\n      try {\n        var _temp3 = function _temp3() {\n          _this.setUpRecording();\n        };\n\n        var _temp4 = _catch(function () {\n          return Promise.resolve(_this.getStream()).then(function (_this$getStream) {\n            window.stream = _this.stream = _this$getStream;\n          });\n        }, function (err) {\n          console.log('Error: Issue getting mic', err);\n        });\n\n        return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n\n    _this.start = function () {\n      try {\n        return Promise.resolve(_this.setupMic()).then(function () {\n          _this.recording = true;\n          _this.leftchannel.length = _this.rightchannel.length = 0;\n          _this.recordingLength = 0;\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n\n    _this.stop = function () {\n      var _this$props2 = _this.props,\n          onStop = _this$props2.onStop,\n          type = _this$props2.type;\n      _this.recording = false;\n\n      _this.closeMic();\n\n      _this.leftBuffer = _this.mergeBuffers(_this.leftchannel, _this.recordingLength);\n      _this.rightBuffer = _this.mergeBuffers(_this.rightchannel, _this.recordingLength);\n\n      var interleaved = _this.interleave(_this.leftBuffer, _this.rightBuffer);\n\n      var buffer = new ArrayBuffer(44 + interleaved.length * 2);\n      var view = new DataView(buffer);\n\n      _this.writeUTFBytes(view, 0, 'RIFF');\n\n      view.setUint32(4, 44 + interleaved.length * 2, true);\n\n      _this.writeUTFBytes(view, 8, 'WAVE');\n\n      _this.writeUTFBytes(view, 12, 'fmt ');\n\n      view.setUint32(16, 16, true);\n      view.setUint16(20, 1, true);\n      view.setUint16(22, 2, true);\n      view.setUint32(24, _this.sampleRate, true);\n      view.setUint32(28, _this.sampleRate * 4, true);\n      view.setUint16(32, 4, true);\n      view.setUint16(34, 16, true);\n\n      _this.writeUTFBytes(view, 36, 'data');\n\n      view.setUint32(40, interleaved.length * 2, true);\n      var lng = interleaved.length;\n      var index = 44;\n      var volume = 1;\n\n      for (var i = 0; i < lng; i++) {\n        view.setInt16(index, interleaved[i] * (0x7fff * volume), true);\n        index += 2;\n      }\n\n      var blob = new Blob([view], {\n        type: type\n      });\n      var audioUrl = URL.createObjectURL(blob);\n      onStop && onStop({\n        blob: blob,\n        url: audioUrl,\n        type: type\n      });\n    };\n\n    _this.pause = function () {\n      _this.recording = false;\n\n      _this.closeMic();\n    };\n\n    _this.resume = function () {\n      _this.setupMic();\n\n      _this.recording = true;\n    };\n\n    _this.closeMic = function () {\n      _this.stream.getAudioTracks().forEach(function (track) {\n        track.stop();\n      });\n\n      _this.audioInput.disconnect(0);\n\n      _this.analyser.disconnect(0);\n\n      _this.recorder.disconnect(0);\n    };\n\n    _this.canvasRef = React.createRef();\n    return _this;\n  }\n\n  var _proto = AudioReactRecorder.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.init();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var state = this.props.state;\n    this.checkState(prevProps.state, state);\n  };\n\n  _proto.checkState = function checkState(previousState) {\n    switch (previousState) {\n      case RecordState.START:\n        this.doIfState(RecordState.PAUSE, this.pause);\n        this.doIfState(RecordState.STOP, this.stop);\n        break;\n\n      case RecordState.PAUSE:\n        this.doIfState(RecordState.START, this.resume);\n        this.doIfState(RecordState.STOP, this.stop);\n        break;\n\n      case RecordState.STOP:\n        this.doIfState(RecordState.START, this.start);\n        break;\n\n      default:\n        this.doIfState(RecordState.START, this.start);\n        break;\n    }\n  };\n\n  _proto.doIfState = function doIfState(state, cb) {\n    if (this.props.state == state) {\n      cb && cb();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {};\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        canvasWidth = _this$props3.canvasWidth,\n        canvasHeight = _this$props3.canvasHeight;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"audio-react-recorder\"\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      width: canvasWidth,\n      height: canvasHeight,\n      className: \"audio-react-recorder__canvas\"\n    }));\n  };\n\n  return AudioReactRecorder;\n}(React.Component);\n\nAudioReactRecorder.propTypes = {\n  state: PropTypes.string,\n  type: PropTypes.string.isRequired,\n  backgroundColor: PropTypes.string,\n  foregroundColor: PropTypes.string,\n  canvasWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  canvasHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onStop: PropTypes.func\n};\nAudioReactRecorder.defaultProps = {\n  state: RecordState.NONE,\n  type: 'audio/wav',\n  backgroundColor: 'rgb(200, 200, 200)',\n  foregroundColor: 'rgb(0, 0, 0)',\n  canvasWidth: 500,\n  canvasHeight: 300\n};\nexport default AudioReactRecorder;\nexport { RecordState };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;EAAA;;;AAoKO,IAAMA,eAAe,gBAAiB,OAAOC,MAAP,KAAkB,WAAlB,GAAiCA,MAAM,CAACC,QAAP,KAAoBD,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAAC,iBAAD,CAA5C,CAAjC,GAAqG,YAA3I;;AA6DA,IAAME,oBAAoB,gBAAiB,OAAOF,MAAP,KAAkB,WAAlB,GAAiCA,MAAM,CAACG,aAAP,KAAyBH,MAAM,CAACG,aAAP,GAAuBH,MAAM,CAAC,sBAAD,CAAtD,CAAjC,GAAoH,iBAA/J,C,CAgVP;;;AACO,SAASI,MAAT,CAAgBC,IAAhB,EAAsBC,OAAtB,EAA+B;AACrC,MAAI;AACH,QAAIC,MAAM,GAAGF,IAAI,EAAjB;AACA,GAFD,CAEE,OAAMG,CAAN,EAAS;AACV,WAAOF,OAAO,CAACE,CAAD,CAAd;AACA;;AACD,MAAID,MAAM,IAAIA,MAAM,CAACE,IAArB,EAA2B;AAC1B,WAAOF,MAAM,CAACE,IAAP,CAAY,KAAK,CAAjB,EAAoBH,OAApB,CAAP;AACA;;AACD,SAAOC,MAAP;AACD;;ICpjBaG,WAAW,GAAGC,MAAM,CAACC,MAAPD,CAAc;AACvCE,OAAK,EAAE,OADgC;AAEvCC,OAAK,EAAE,OAFgC;AAGvCC,MAAI,EAAE,MAHiC;AAIvCC,MAAI,EAAE;AAJiC,CAAdL;;IAONM;;;AAEnB,8BAAYC,KAAZ,EAAmB;AAAA;;AACjBC,wCAAMD,KAAN;;AADiBC,UAmEnBC,IAnEmB;AAAA,UAmEA;AACjBD,cAAKE,WAAL,GAAmB,EAAnB;AACAF,cAAKG,YAAL,GAAoB,EAApB;AACAH,cAAKI,QAAL,GAAgB,IAAhB;AACAJ,cAAKK,SAAL,GAAiB,KAAjB;AACAL,cAAKM,eAAL,GAAuB,CAAvB;AACAN,cAAKO,MAAL,GAAc,IAAd;AACAP,cAAKQ,UAAL,GAAkB,IAAlB;AACAR,cAAKS,UAAL,GAAkB,IAAlB;AACAT,cAAKU,YAAL,GAAoBC,MAAM,CAACD,YAAPC,IAAuBA,MAAM,CAACC,kBAAlD;AACAZ,cAAKa,OAAL,GAAe,IAAf;AACAb,cAAKc,QAAL,GAAgB,IAAhB;AACAd,cAAKe,MAAL,GAAcf,MAAKgB,SAAL,CAAeC,OAA7B;AACAjB,cAAKkB,SAAL,GAAiBlB,MAAKe,MAAL,CAAYI,UAAZ,CAAuB,IAAvB,CAAjB;AACAnB,cAAKoB,MAAL,GAAc,IAAd;AACApB,cAAKqB,MAAL,GAAc,KAAd;AAEAC,iBAAS,CAACC,YAAVD,GACEA,SAAS,CAACC,YAAVD,IACAA,SAAS,CAACE,kBADVF,IAEAA,SAAS,CAACG,eAHZH;AAjBiB;AAnEA;AAAA;AAAA;AAAA;;AAAAtB,UA2FnB0B,SA3FmB,GA2FP,UAACC,WAAD,EAAiB;AAC3B,UAAI,CAACA,WAAL,EAAkB;AAChBA,mBAAW,GAAG;AAAEC,eAAK,EAAE,IAAT;AAAeC,eAAK,EAAE;AAAtB,SAAdF;AACD;;AAED,aAAOL,SAAS,CAACQ,YAAVR,CAAuBC,YAAvBD,CAAoCK,WAApCL,CAAP;AAhGiB;;AAAAtB,UAmGnB+B,cAnGmB,GAmGF,YAAM;AACrB/B,YAAKa,OAAL,GAAe,IAAIb,MAAKU,YAAT,EAAf;AACAV,YAAKS,UAAL,GAAkBT,MAAKa,OAAL,CAAaJ,UAA/B;AAGAT,YAAKO,MAAL,GAAcP,MAAKa,OAAL,CAAamB,UAAb,EAAd;AAGAhC,YAAKQ,UAAL,GAAkBR,MAAKa,OAAL,CAAaoB,uBAAb,CAAqCjC,MAAKoB,MAA1C,CAAlB;AAGApB,YAAKc,QAAL,GAAgBd,MAAKa,OAAL,CAAaqB,cAAb,EAAhB;;AAGAlC,YAAKQ,UAAL,CAAgB2B,OAAhB,CAAwBnC,MAAKc,QAA7B;;AAKA,UAAIsB,UAAU,GAAG,IAAjB;AACApC,YAAKI,QAAL,GAAgBJ,MAAKa,OAAL,CAAawB,qBAAb,CAAmCD,UAAnC,EAA+C,CAA/C,EAAkD,CAAlD,CAAhB;;AAKApC,YAAKc,QAAL,CAAcqB,OAAd,CAAsBnC,MAAKI,QAA3B;;AAGAJ,YAAKI,QAAL,CAAc+B,OAAd,CAAsBnC,MAAKa,OAAL,CAAayB,WAAnC;;AAEA,UAAMC,IAAI,gCAAV;;AACAvC,YAAKI,QAAL,CAAcoC,cAAd,GAA+B,UAAUnD,CAAV,EAAa;AAE1C,YAAI,CAACkD,IAAI,CAAClC,SAAV,EAAqB;AAErB,YAAIoC,IAAI,GAAGpD,CAAC,CAACqD,WAAFrD,CAAcsD,cAAdtD,CAA6B,CAA7BA,CAAX;AACA,YAAIuD,KAAK,GAAGvD,CAAC,CAACqD,WAAFrD,CAAcsD,cAAdtD,CAA6B,CAA7BA,CAAZ;;AACA,YAAI,CAACkD,IAAI,CAAClB,MAAV,EAAkB;AAChBkB,cAAI,CAAClB,MAALkB,GAAc,IAAdA;;AAEA,cAAI,CAACE,IAAI,CAACI,MAALJ,CAAY,UAACK,CAAD,EAAIC,CAAJ;AAAA,mBAAUD,CAAC,GAAGC,CAAd;AAAZ,YAAL,EAAmC;AACjCC,mBAAO,CAACC,GAARD,CAAY,iDAAZA;AAEAT,gBAAI,CAACW,IAALX;AACAA,gBAAI,CAACnB,MAALmB,CAAYY,SAAZZ,GAAwBa,OAAxBb,CAAgC,UAAUc,KAAV,EAAiB;AAC/CA,mBAAK,CAACH,IAANG;AADF;AAGAd,gBAAI,CAAC1B,OAAL0B,CAAae,KAAbf;AACD;AACF;;AAEDA,YAAI,CAACrC,WAALqC,CAAiBgB,IAAjBhB,CAAsB,IAAIiB,YAAJ,CAAiBf,IAAjB,CAAtBF;AACAA,YAAI,CAACpC,YAALoC,CAAkBgB,IAAlBhB,CAAuB,IAAIiB,YAAJ,CAAiBZ,KAAjB,CAAvBL;AACAA,YAAI,CAACjC,eAALiC,IAAwBH,UAAxBG;AAtBF;;AAwBAvC,YAAKyD,SAAL;AA1JiB;;AAAAzD,UA6JnB0D,YA7JmB,GA6JJ,UAACC,aAAD,EAAgBrD,eAAhB,EAAoC;AACjD,UAAIlB,MAAM,GAAG,IAAIoE,YAAJ,CAAiBlD,eAAjB,CAAb;AACA,UAAIsD,MAAM,GAAG,CAAb;AACA,UAAIC,GAAG,GAAGF,aAAa,CAACG,MAAxB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5B,YAAIC,MAAM,GAAGL,aAAa,CAACI,CAAD,CAA1B;AACA3E,cAAM,CAAC6E,GAAP7E,CAAW4E,MAAX5E,EAAmBwE,MAAnBxE;AACAwE,cAAM,IAAII,MAAM,CAACF,MAAjBF;AACD;;AACD,aAAOxE,MAAP;AAtKiB;;AAAAY,UAyKnBkE,UAzKmB,GAyKN,UAACC,WAAD,EAAcC,YAAd,EAA+B;AAC1C,UAAIN,MAAM,GAAGK,WAAW,CAACL,MAAZK,GAAqBC,YAAY,CAACN,MAA/C;AACA,UAAI1E,MAAM,GAAG,IAAIoE,YAAJ,CAAiBM,MAAjB,CAAb;AAEA,UAAIO,UAAU,GAAG,CAAjB;;AAEA,WAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGR,MAA5B,GAAsC;AACpC1E,cAAM,CAACkF,KAAK,EAAN,CAANlF,GAAkB+E,WAAW,CAACE,UAAD,CAA7BjF;AACAA,cAAM,CAACkF,KAAK,EAAN,CAANlF,GAAkBgF,YAAY,CAACC,UAAD,CAA9BjF;AACAiF,kBAAU;AACX;;AACD,aAAOjF,MAAP;AApLiB;;AAAAY,UAuLnBuE,aAvLmB,GAuLH,UAACC,IAAD,EAAOZ,MAAP,EAAea,MAAf,EAA0B;AACxC,UAAIZ,GAAG,GAAGY,MAAM,CAACX,MAAjB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5BS,YAAI,CAACE,QAALF,CAAcZ,MAAM,GAAGG,CAAvBS,EAA0BC,MAAM,CAACE,UAAPF,CAAkBV,CAAlBU,CAA1BD;AACD;AA3LgB;;AAAAxE,UA8LnByD,SA9LmB,GA8LP,YAAM;AAAA,wBAC6BzD,MAAKD,KADlC;AAAA,UACR6E,eADQ,eACRA,eADQ;AAAA,UACSC,eADT,eACSA,eADT;AAGhB7E,YAAK8E,KAAL,GAAa9E,MAAKe,MAAL,CAAYgE,KAAzB;AACA/E,YAAKgF,MAAL,GAAchF,MAAKe,MAAL,CAAYkE,MAA1B;AACAjF,YAAKkF,OAAL,GAAelF,MAAKe,MAAL,CAAYgE,KAAZ,GAAoB,CAAnC;AACA/E,YAAKmF,OAAL,GAAenF,MAAKe,MAAL,CAAYkE,MAAZ,GAAqB,CAApC;AAEA,UAAI,CAACjF,MAAKc,QAAV,EAAoB;AAEpBd,YAAKc,QAAL,CAAcsE,OAAd,GAAwB,IAAxB;AACA,UAAMC,YAAY,GAAGrF,MAAKc,QAAL,CAAcsE,OAAnC;AACA,UAAME,SAAS,GAAG,IAAIC,UAAJ,CAAeF,YAAf,CAAlB;;AAEArF,YAAKkB,SAAL,CAAesE,SAAf,CAAyB,CAAzB,EAA4B,CAA5B,EAA+BxF,MAAK8E,KAApC,EAA2C9E,MAAKgF,MAAhD;;AAGA,UAAIzC,IAAI,gCAAR;;AACA,UAAMkD,IAAI,GAAG,SAAPA,IAAO,GAAY;AACvBlD,YAAI,CAACmD,UAALnD,GAAkBoD,qBAAqB,CAACF,IAAD,CAAvClD;AAEAA,YAAI,CAACzB,QAALyB,CAAcqD,qBAAdrD,CAAoC+C,SAApC/C;AAEAA,YAAI,CAACrB,SAALqB,CAAesD,SAAftD,GAA2BqC,eAA3BrC;AACAA,YAAI,CAACrB,SAALqB,CAAeuD,QAAfvD,CAAwB,CAAxBA,EAA2B,CAA3BA,EAA8BA,IAAI,CAACuC,KAAnCvC,EAA0CA,IAAI,CAACyC,MAA/CzC;AAEAA,YAAI,CAACrB,SAALqB,CAAewD,SAAfxD,GAA2B,CAA3BA;AACAA,YAAI,CAACrB,SAALqB,CAAeyD,WAAfzD,GAA6BsC,eAA7BtC;AAEAA,YAAI,CAACrB,SAALqB,CAAe0D,SAAf1D;AAEA,YAAI2D,UAAU,GAAI3D,IAAI,CAACuC,KAALvC,GAAa,GAAbA,GAAoB8C,YAAtC;AACA,YAAIc,CAAC,GAAG,CAAR;;AAEA,aAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,YAApB,EAAkCtB,CAAC,EAAnC,EAAuC;AACrC,cAAIqC,CAAC,GAAGd,SAAS,CAACvB,CAAD,CAATuB,GAAe,KAAvB;AACA,cAAIe,CAAC,GAAID,CAAC,GAAG7D,IAAI,CAACyC,MAAToB,GAAmB,CAA5B;;AAEA,cAAIrC,CAAC,KAAK,CAAV,EAAa;AACXxB,gBAAI,CAACrB,SAALqB,CAAe+D,MAAf/D,CAAsB4D,CAAtB5D,EAAyB8D,CAAzB9D;AADF,iBAEO;AACLA,gBAAI,CAACrB,SAALqB,CAAegE,MAAfhE,CAAsB4D,CAAtB5D,EAAyB8D,CAAzB9D;AACD;;AAED4D,WAAC,IAAID,UAALC;AACD;;AAED5D,YAAI,CAACrB,SAALqB,CAAegE,MAAfhE,CAAsBA,IAAI,CAACxB,MAALwB,CAAYwC,KAAlCxC,EAAyCA,IAAI,CAACxB,MAALwB,CAAY0C,MAAZ1C,GAAqB,CAA9DA;AACAA,YAAI,CAACrB,SAALqB,CAAeiE,MAAfjE;AA9BF;;AAiCAkD,UAAI;AAjPa;;AAAAzF,UAoPnByG,QApPmB;AAAA,UAoPI;AAAA;AAUrBzG,gBAAK+B,cAAL;AAVqB;;AAAA,wCAEjB;AAAA,iCACkC/B,MAAK0B,SAAL,EADlC;AACFf,kBAAM,CAACS,MAAPT,GAAgBX,MAAKoB,MAAL,kBAAhBT;AADE;AAFiB,qBAKZ+F,GALY,EAKP;AAEZ1D,iBAAO,CAACC,GAARD,CAAY,0BAAZA,EAAwC0D,GAAxC1D;AAPmB;;AAAA;AApPJ;AAAA;AAAA;AAAA;;AAAAhD,UAiQnB2G,KAjQmB;AAAA,UAiQC;AAAA,+BACZ3G,MAAKyG,QAAL,EADY;AAGlBzG,gBAAKK,SAAL,GAAiB,IAAjB;AAEAL,gBAAKE,WAAL,CAAiB4D,MAAjB,GAA0B9D,MAAKG,YAAL,CAAkB2D,MAAlB,GAA2B,CAArD;AACA9D,gBAAKM,eAAL,GAAuB,CAAvB;AANkB;AAjQD;AAAA;AAAA;AAAA;;AAAAN,UA0QnBkD,IA1QmB,GA0QZ,YAAM;AAAA,yBACclD,MAAKD,KADnB;AAAA,UACH6G,MADG,gBACHA,MADG;AAAA,UACKC,IADL,gBACKA,IADL;AAGX7G,YAAKK,SAAL,GAAiB,KAAjB;;AACAL,YAAK8G,QAAL;;AAGA9G,YAAK+G,UAAL,GAAkB/G,MAAK0D,YAAL,CAAkB1D,MAAKE,WAAvB,EAAoCF,MAAKM,eAAzC,CAAlB;AACAN,YAAKgH,WAAL,GAAmBhH,MAAK0D,YAAL,CACjB1D,MAAKG,YADY,EAEjBH,MAAKM,eAFY,CAAnB;;AAKA,UAAI2G,WAAW,GAAGjH,MAAKkE,UAAL,CAAgBlE,MAAK+G,UAArB,EAAiC/G,MAAKgH,WAAtC,CAAlB;;AAOA,UAAIhD,MAAM,GAAG,IAAIkD,WAAJ,CAAgB,KAAKD,WAAW,CAACnD,MAAZmD,GAAqB,CAA1C,CAAb;AACA,UAAIzC,IAAI,GAAG,IAAI2C,QAAJ,CAAanD,MAAb,CAAX;;AAGAhE,YAAKuE,aAAL,CAAmBC,IAAnB,EAAyB,CAAzB,EAA4B,MAA5B;;AACAA,UAAI,CAAC4C,SAAL5C,CAAe,CAAfA,EAAkB,KAAKyC,WAAW,CAACnD,MAAZmD,GAAqB,CAA5CzC,EAA+C,IAA/CA;;AACAxE,YAAKuE,aAAL,CAAmBC,IAAnB,EAAyB,CAAzB,EAA4B,MAA5B;;AAEAxE,YAAKuE,aAAL,CAAmBC,IAAnB,EAAyB,EAAzB,EAA6B,MAA7B;;AACAA,UAAI,CAAC4C,SAAL5C,CAAe,EAAfA,EAAmB,EAAnBA,EAAuB,IAAvBA;AACAA,UAAI,CAAC6C,SAAL7C,CAAe,EAAfA,EAAmB,CAAnBA,EAAsB,IAAtBA;AAEAA,UAAI,CAAC6C,SAAL7C,CAAe,EAAfA,EAAmB,CAAnBA,EAAsB,IAAtBA;AACAA,UAAI,CAAC4C,SAAL5C,CAAe,EAAfA,EAAmBxE,MAAKS,UAAxB+D,EAAoC,IAApCA;AACAA,UAAI,CAAC4C,SAAL5C,CAAe,EAAfA,EAAmBxE,MAAKS,UAAL,GAAkB,CAArC+D,EAAwC,IAAxCA;AACAA,UAAI,CAAC6C,SAAL7C,CAAe,EAAfA,EAAmB,CAAnBA,EAAsB,IAAtBA;AACAA,UAAI,CAAC6C,SAAL7C,CAAe,EAAfA,EAAmB,EAAnBA,EAAuB,IAAvBA;;AAEAxE,YAAKuE,aAAL,CAAmBC,IAAnB,EAAyB,EAAzB,EAA6B,MAA7B;;AACAA,UAAI,CAAC4C,SAAL5C,CAAe,EAAfA,EAAmByC,WAAW,CAACnD,MAAZmD,GAAqB,CAAxCzC,EAA2C,IAA3CA;AAGA,UAAIX,GAAG,GAAGoD,WAAW,CAACnD,MAAtB;AACA,UAAIQ,KAAK,GAAG,EAAZ;AACA,UAAI/D,MAAM,GAAG,CAAb;;AACA,WAAK,IAAIwD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5BS,YAAI,CAAC8C,QAAL9C,CAAcF,KAAdE,EAAqByC,WAAW,CAAClD,CAAD,CAAXkD,IAAkB,SAAS1G,MAA3B0G,CAArBzC,EAAyD,IAAzDA;AACAF,aAAK,IAAI,CAATA;AACD;;AAGD,UAAMiD,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAChD,IAAD,CAAT,EAAiB;AAAEqC,YAAI,EAAEA;AAAR,OAAjB,CAAb;AACA,UAAMY,QAAQ,GAAGC,GAAG,CAACC,eAAJD,CAAoBH,IAApBG,CAAjB;AAEAd,YAAM,IACJA,MAAM,CAAC;AACLW,YAAI,EAAEA,IADD;AAELK,WAAG,EAAEH,QAFA;AAGLZ,YAAI,EAAJA;AAHK,OAAD,CADRD;AAhUiB;;AAAA5G,UAwUnB6H,KAxUmB,GAwUX,YAAM;AACZ7H,YAAKK,SAAL,GAAiB,KAAjB;;AACAL,YAAK8G,QAAL;AA1UiB;;AAAA9G,UA6UnB8H,MA7UmB,GA6UV,YAAM;AACb9H,YAAKyG,QAAL;;AACAzG,YAAKK,SAAL,GAAiB,IAAjB;AA/UiB;;AAAAL,UAkVnB8G,QAlVmB,GAkVR,YAAM;AACf9G,YAAKoB,MAAL,CAAY2G,cAAZ,GAA6B3E,OAA7B,CAAqC,UAACC,KAAD,EAAW;AAC9CA,aAAK,CAACH,IAANG;AADF;;AAGArD,YAAKQ,UAAL,CAAgBwH,UAAhB,CAA2B,CAA3B;;AACAhI,YAAKc,QAAL,CAAckH,UAAd,CAAyB,CAAzB;;AACAhI,YAAKI,QAAL,CAAc4H,UAAd,CAAyB,CAAzB;AAxViB;;AAGjBhI,UAAKgB,SAAL,GAAiBiH,KAAK,CAACC,SAAND,EAAjB;AAHiB;AAIlB;;;;SAwBDE,iDAAoB;AAClB,SAAKlI,IAAL;AACD;;SAEDmI,iDAAmBC,SAAnB,EAA8BC,SAA9B,EAAyC;AAAA,QAC/BC,KAD+B,GACrB,KAAKxI,KAAL,CAAVwI,KAD+B;AAGvC,SAAKC,UAAL,CAAgBH,SAAS,CAACE,KAA1B,EAAiCA,KAAjC;AACD;;SAEDC,iCAAWC,aAAX,EAA0B;AACxB,YAAQA,aAAR;AACE,WAAKlJ,WAAW,CAACG,KAAjB;AACE,aAAKgJ,SAAL,CAAenJ,WAAW,CAACI,KAA3B,EAAkC,KAAKkI,KAAvC;AACA,aAAKa,SAAL,CAAenJ,WAAW,CAACK,IAA3B,EAAiC,KAAKsD,IAAtC;AACA;;AACF,WAAK3D,WAAW,CAACI,KAAjB;AACE,aAAK+I,SAAL,CAAenJ,WAAW,CAACG,KAA3B,EAAkC,KAAKoI,MAAvC;AACA,aAAKY,SAAL,CAAenJ,WAAW,CAACK,IAA3B,EAAiC,KAAKsD,IAAtC;AACA;;AACF,WAAK3D,WAAW,CAACK,IAAjB;AACE,aAAK8I,SAAL,CAAenJ,WAAW,CAACG,KAA3B,EAAkC,KAAKiH,KAAvC;AACA;;AACF;AACE,aAAK+B,SAAL,CAAenJ,WAAW,CAACG,KAA3B,EAAkC,KAAKiH,KAAvC;AACA;AAdJ;AAgBD;;SAED+B,+BAAUH,KAAV,EAAiBI,EAAjB,EAAqB;AACnB,QAAI,KAAK5I,KAAL,CAAWwI,KAAX,IAAoBA,KAAxB,EAA+B;AAC7BI,QAAE,IAAIA,EAAE,EAARA;AACD;AACF;;SAGDC,uDAAuB;;SA4RvBC,2BAAS;AAAA,uBAC+B,KAAK9I,KADpC;AAAA,QACC+I,WADD,gBACCA,WADD;AAAA,QACcC,YADd,gBACcA,YADd;AAGP,wBACEd;AAAKe,eAAS,EAAC;AAAf,oBACEf;AACEgB,SAAG,EAAE,KAAKjI,SADZ;AAEE+D,WAAK,EAAE+D,WAFT;AAGE7D,YAAM,EAAE8D,YAHV;AAIEC,eAAS,EAAC;AAJZ,MADF,CADF;AAUD;;;CA3WkBlJ,CAA2BmI,KAAK,CAACiB,SAAjCpJ;;AAAAA,mBASZqJ,SATYrJ,GASA;AACjByI,OAAK,EAAEa,SAAS,CAAC3E,MADA;AAEjBoC,MAAI,EAAEuC,SAAS,CAAC3E,MAAV2E,CAAiBC,UAFN;AAGjBzE,iBAAe,EAAEwE,SAAS,CAAC3E,MAHV;AAIjBI,iBAAe,EAAEuE,SAAS,CAAC3E,MAJV;AAKjBqE,aAAW,EAAEM,SAAS,CAACE,SAAVF,CAAoB,CAACA,SAAS,CAAC3E,MAAX,EAAmB2E,SAAS,CAACG,MAA7B,CAApBH,CALI;AAMjBL,cAAY,EAAEK,SAAS,CAACE,SAAVF,CAAoB,CAACA,SAAS,CAAC3E,MAAX,EAAmB2E,SAAS,CAACG,MAA7B,CAApBH,CANG;AASjBxC,QAAM,EAAEwC,SAAS,CAACI;AATD,CATA1J;AAAAA,mBAoBZ2J,YApBY3J,GAoBG;AACpByI,OAAK,EAAEhJ,WAAW,CAACM,IADC;AAEpBgH,MAAI,EAAE,WAFc;AAGpBjC,iBAAe,EAAE,oBAHG;AAIpBC,iBAAe,EAAE,cAJG;AAKpBiE,aAAW,EAAE,GALO;AAMpBC,cAAY,EAAE;AANM,CApBHjJ","names":["_iteratorSymbol","Symbol","iterator","_asyncIteratorSymbol","asyncIterator","_catch","body","recover","result","e","then","RecordState","Object","freeze","START","PAUSE","STOP","NONE","AudioReactRecorder","props","_this","init","leftchannel","rightchannel","recorder","recording","recordingLength","volume","audioInput","sampleRate","AudioContext","window","webkitAudioContext","context","analyser","canvas","canvasRef","current","canvasCtx","getContext","stream","tested","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","getStream","constraints","audio","video","mediaDevices","setUpRecording","createGain","createMediaStreamSource","createAnalyser","connect","bufferSize","createScriptProcessor","destination","self","onaudioprocess","left","inputBuffer","getChannelData","right","reduce","a","b","console","log","stop","getTracks","forEach","track","close","push","Float32Array","visualize","mergeBuffers","channelBuffer","offset","lng","length","i","buffer","set","interleave","leftChannel","rightChannel","inputIndex","index","writeUTFBytes","view","string","setUint8","charCodeAt","backgroundColor","foregroundColor","WIDTH","width","HEIGHT","height","CENTERX","CENTERY","fftSize","bufferLength","dataArray","Uint8Array","clearRect","draw","drawVisual","requestAnimationFrame","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","v","y","moveTo","lineTo","stroke","setupMic","err","start","onStop","type","closeMic","leftBuffer","rightBuffer","interleaved","ArrayBuffer","DataView","setUint32","setUint16","setInt16","blob","Blob","audioUrl","URL","createObjectURL","url","pause","resume","getAudioTracks","disconnect","React","createRef","componentDidMount","componentDidUpdate","prevProps","prevState","state","checkState","previousState","doIfState","cb","componentWillUnmount","render","canvasWidth","canvasHeight","className","ref","Component","propTypes","PropTypes","isRequired","oneOfType","number","func","defaultProps"],"sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/index.js"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import React from 'react'\r\nimport styles from './styles.module.css'\r\nimport PropTypes from 'prop-types' // ES6\r\n\r\n// export const AudioReactRecorder = ({ text }) => {\r\n//   return <div className={styles.test}>BULLSWEET: {text}</div>\r\n// }\r\n\r\nexport const RecordState = Object.freeze({\r\n  START: 'start',\r\n  PAUSE: 'pause',\r\n  STOP: 'stop',\r\n  NONE: 'none'\r\n})\r\n\r\nexport default class AudioReactRecorder extends React.Component {\r\n  //0 - constructor\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.canvasRef = React.createRef()\r\n  }\r\n\r\n  //TODO: add the props definitions\r\n  static propTypes = {\r\n    state: PropTypes.string,\r\n    type: PropTypes.string.isRequired,\r\n    backgroundColor: PropTypes.string,\r\n    foregroundColor: PropTypes.string,\r\n    canvasWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    canvasHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n    //method calls\r\n    onStop: PropTypes.func\r\n  }\r\n  static defaultProps = {\r\n    state: RecordState.NONE,\r\n    type: 'audio/wav',\r\n    backgroundColor: 'rgb(200, 200, 200)',\r\n    foregroundColor: 'rgb(0, 0, 0)',\r\n    canvasWidth: 500,\r\n    canvasHeight: 300\r\n  }\r\n\r\n  //2 - mount\r\n  componentDidMount() {\r\n    this.init()\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { state } = this.props\r\n\r\n    this.checkState(prevProps.state, state)\r\n  }\r\n\r\n  checkState(previousState) {\r\n    switch (previousState) {\r\n      case RecordState.START:\r\n        this.doIfState(RecordState.PAUSE, this.pause)\r\n        this.doIfState(RecordState.STOP, this.stop)\r\n        break\r\n      case RecordState.PAUSE:\r\n        this.doIfState(RecordState.START, this.resume)\r\n        this.doIfState(RecordState.STOP, this.stop)\r\n        break\r\n      case RecordState.STOP:\r\n        this.doIfState(RecordState.START, this.start)\r\n        break\r\n      default:\r\n        this.doIfState(RecordState.START, this.start)\r\n        break\r\n    }\r\n  }\r\n\r\n  doIfState(state, cb) {\r\n    if (this.props.state == state) {\r\n      cb && cb()\r\n    }\r\n  }\r\n\r\n  //TODO: destroy request animation frame\r\n  componentWillUnmount() {}\r\n\r\n  //TODO: change to state some conditionals\r\n  init = async () => {\r\n    this.leftchannel = []\r\n    this.rightchannel = []\r\n    this.recorder = null\r\n    this.recording = false\r\n    this.recordingLength = 0\r\n    this.volume = null\r\n    this.audioInput = null\r\n    this.sampleRate = null\r\n    this.AudioContext = window.AudioContext || window.webkitAudioContext\r\n    this.context = null\r\n    this.analyser = null\r\n    this.canvas = this.canvasRef.current\r\n    this.canvasCtx = this.canvas.getContext('2d')\r\n    this.stream = null\r\n    this.tested = false\r\n\r\n    navigator.getUserMedia =\r\n      navigator.getUserMedia ||\r\n      navigator.webkitGetUserMedia ||\r\n      navigator.mozGetUserMedia\r\n  }\r\n\r\n  //get mic stream\r\n  getStream = (constraints) => {\r\n    if (!constraints) {\r\n      constraints = { audio: true, video: false }\r\n    }\r\n\r\n    return navigator.mediaDevices.getUserMedia(constraints)\r\n  }\r\n\r\n  setUpRecording = () => {\r\n    this.context = new this.AudioContext()\r\n    this.sampleRate = this.context.sampleRate\r\n\r\n    // creates a gain node\r\n    this.volume = this.context.createGain()\r\n\r\n    // creates an audio node from teh microphone incoming stream\r\n    this.audioInput = this.context.createMediaStreamSource(this.stream)\r\n\r\n    // Create analyser\r\n    this.analyser = this.context.createAnalyser()\r\n\r\n    // connect audio input to the analyser\r\n    this.audioInput.connect(this.analyser)\r\n\r\n    // connect analyser to the volume control\r\n    // analyser.connect(volume);\r\n\r\n    let bufferSize = 2048\r\n    this.recorder = this.context.createScriptProcessor(bufferSize, 2, 2)\r\n\r\n    // we connect the volume control to the processor\r\n    // volume.connect(recorder);\r\n\r\n    this.analyser.connect(this.recorder)\r\n\r\n    // finally connect the processor to the output\r\n    this.recorder.connect(this.context.destination)\r\n\r\n    const self = this\r\n    this.recorder.onaudioprocess = function (e) {\r\n      // Check\r\n      if (!self.recording) return\r\n      // Do something with the data, i.e Convert this to WAV\r\n      let left = e.inputBuffer.getChannelData(0)\r\n      let right = e.inputBuffer.getChannelData(1)\r\n      if (!self.tested) {\r\n        self.tested = true\r\n        // if this reduces to 0 we are not getting any sound\r\n        if (!left.reduce((a, b) => a + b)) {\r\n          console.log('Error: There seems to be an issue with your Mic')\r\n          // clean up;\r\n          self.stop()\r\n          self.stream.getTracks().forEach(function (track) {\r\n            track.stop()\r\n          })\r\n          self.context.close()\r\n        }\r\n      }\r\n      // we clone the samples\r\n      self.leftchannel.push(new Float32Array(left))\r\n      self.rightchannel.push(new Float32Array(right))\r\n      self.recordingLength += bufferSize\r\n    }\r\n    this.visualize()\r\n  }\r\n\r\n  mergeBuffers = (channelBuffer, recordingLength) => {\r\n    let result = new Float32Array(recordingLength)\r\n    let offset = 0\r\n    let lng = channelBuffer.length\r\n    for (let i = 0; i < lng; i++) {\r\n      let buffer = channelBuffer[i]\r\n      result.set(buffer, offset)\r\n      offset += buffer.length\r\n    }\r\n    return result\r\n  }\r\n\r\n  interleave = (leftChannel, rightChannel) => {\r\n    let length = leftChannel.length + rightChannel.length\r\n    let result = new Float32Array(length)\r\n\r\n    let inputIndex = 0\r\n\r\n    for (let index = 0; index < length; ) {\r\n      result[index++] = leftChannel[inputIndex]\r\n      result[index++] = rightChannel[inputIndex]\r\n      inputIndex++\r\n    }\r\n    return result\r\n  }\r\n\r\n  writeUTFBytes = (view, offset, string) => {\r\n    let lng = string.length\r\n    for (let i = 0; i < lng; i++) {\r\n      view.setUint8(offset + i, string.charCodeAt(i))\r\n    }\r\n  }\r\n\r\n  visualize = () => {\r\n    const { backgroundColor, foregroundColor } = this.props\r\n\r\n    this.WIDTH = this.canvas.width\r\n    this.HEIGHT = this.canvas.height\r\n    this.CENTERX = this.canvas.width / 2\r\n    this.CENTERY = this.canvas.height / 2\r\n\r\n    if (!this.analyser) return\r\n\r\n    this.analyser.fftSize = 2048\r\n    const bufferLength = this.analyser.fftSize\r\n    const dataArray = new Uint8Array(bufferLength)\r\n\r\n    this.canvasCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT)\r\n\r\n    //reference this using self\r\n    let self = this\r\n    const draw = function () {\r\n      self.drawVisual = requestAnimationFrame(draw)\r\n\r\n      self.analyser.getByteTimeDomainData(dataArray)\r\n\r\n      self.canvasCtx.fillStyle = backgroundColor\r\n      self.canvasCtx.fillRect(0, 0, self.WIDTH, self.HEIGHT)\r\n\r\n      self.canvasCtx.lineWidth = 2\r\n      self.canvasCtx.strokeStyle = foregroundColor\r\n\r\n      self.canvasCtx.beginPath()\r\n\r\n      var sliceWidth = (self.WIDTH * 1.0) / bufferLength\r\n      var x = 0\r\n\r\n      for (var i = 0; i < bufferLength; i++) {\r\n        var v = dataArray[i] / 128.0\r\n        var y = (v * self.HEIGHT) / 2\r\n\r\n        if (i === 0) {\r\n          self.canvasCtx.moveTo(x, y)\r\n        } else {\r\n          self.canvasCtx.lineTo(x, y)\r\n        }\r\n\r\n        x += sliceWidth\r\n      }\r\n\r\n      self.canvasCtx.lineTo(self.canvas.width, self.canvas.height / 2)\r\n      self.canvasCtx.stroke()\r\n    }\r\n\r\n    draw()\r\n  }\r\n\r\n  setupMic = async () => {\r\n    //TODO: only get stream after clicking start\r\n    try {\r\n      window.stream = this.stream = await this.getStream()\r\n      //TODO: on got stream\r\n    } catch (err) {\r\n      //TODO: error getting stream\r\n      console.log('Error: Issue getting mic', err)\r\n    }\r\n\r\n    this.setUpRecording()\r\n  }\r\n\r\n  start = async () => {\r\n    await this.setupMic()\r\n\r\n    this.recording = true\r\n    // reset the buffers for the new recording\r\n    this.leftchannel.length = this.rightchannel.length = 0\r\n    this.recordingLength = 0\r\n  }\r\n\r\n  stop = () => {\r\n    const { onStop, type } = this.props\r\n\r\n    this.recording = false\r\n    this.closeMic()\r\n\r\n    // we flat the left and right channels down\r\n    this.leftBuffer = this.mergeBuffers(this.leftchannel, this.recordingLength)\r\n    this.rightBuffer = this.mergeBuffers(\r\n      this.rightchannel,\r\n      this.recordingLength\r\n    )\r\n    // we interleave both channels together\r\n    let interleaved = this.interleave(this.leftBuffer, this.rightBuffer)\r\n\r\n    ///////////// WAV Encode /////////////////\r\n    // from http://typedarray.org/from-microphone-to-wav-with-getusermedia-and-web-audio/\r\n    //\r\n\r\n    // we create our wav file\r\n    let buffer = new ArrayBuffer(44 + interleaved.length * 2)\r\n    let view = new DataView(buffer)\r\n\r\n    // RIFF chunk descriptor\r\n    this.writeUTFBytes(view, 0, 'RIFF')\r\n    view.setUint32(4, 44 + interleaved.length * 2, true)\r\n    this.writeUTFBytes(view, 8, 'WAVE')\r\n    // FMT sub-chunk\r\n    this.writeUTFBytes(view, 12, 'fmt ')\r\n    view.setUint32(16, 16, true)\r\n    view.setUint16(20, 1, true)\r\n    // stereo (2 channels)\r\n    view.setUint16(22, 2, true)\r\n    view.setUint32(24, this.sampleRate, true)\r\n    view.setUint32(28, this.sampleRate * 4, true)\r\n    view.setUint16(32, 4, true)\r\n    view.setUint16(34, 16, true)\r\n    // data sub-chunk\r\n    this.writeUTFBytes(view, 36, 'data')\r\n    view.setUint32(40, interleaved.length * 2, true)\r\n\r\n    // write the PCM samples\r\n    let lng = interleaved.length\r\n    let index = 44\r\n    let volume = 1\r\n    for (let i = 0; i < lng; i++) {\r\n      view.setInt16(index, interleaved[i] * (0x7fff * volume), true)\r\n      index += 2\r\n    }\r\n\r\n    // our final binary blob\r\n    const blob = new Blob([view], { type: type })\r\n    const audioUrl = URL.createObjectURL(blob)\r\n\r\n    onStop &&\r\n      onStop({\r\n        blob: blob,\r\n        url: audioUrl,\r\n        type\r\n      })\r\n  }\r\n\r\n  pause = () => {\r\n    this.recording = false\r\n    this.closeMic()\r\n  }\r\n\r\n  resume = () => {\r\n    this.setupMic()\r\n    this.recording = true\r\n  }\r\n\r\n  closeMic = () => {\r\n    this.stream.getAudioTracks().forEach((track) => {\r\n      track.stop()\r\n    })\r\n    this.audioInput.disconnect(0)\r\n    this.analyser.disconnect(0)\r\n    this.recorder.disconnect(0)\r\n  }\r\n\r\n  //1 - render\r\n  render() {\r\n    const { canvasWidth, canvasHeight } = this.props\r\n\r\n    return (\r\n      <div className='audio-react-recorder'>\r\n        <canvas\r\n          ref={this.canvasRef}\r\n          width={canvasWidth}\r\n          height={canvasHeight}\r\n          className='audio-react-recorder__canvas'\r\n        ></canvas>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}