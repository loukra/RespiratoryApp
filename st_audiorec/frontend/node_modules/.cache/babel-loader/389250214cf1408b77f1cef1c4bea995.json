{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from './buffer';\nimport { TextDecoder as TextDecoderPolyfill, TextEncoder as TextEncoderPolyfill } from 'text-encoding-utf-8';\n/** @ignore @suppress {missingRequire} */\n\nvar _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\n\n\nvar useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n/** @ignore */\n\nexport var decodeUtf8 = function (TextDecoder) {\n  if (useNativeEncoders || !_Buffer) {\n    var decoder = new TextDecoder('utf-8');\n    return function (buffer) {\n      return decoder.decode(buffer);\n    };\n  }\n\n  return function (input) {\n    var _toUint8Array = toUint8Array(input),\n        buffer = _toUint8Array.buffer,\n        byteOffset = _toUint8Array.byteOffset,\n        length = _toUint8Array.length;\n\n    return _Buffer.from(buffer, byteOffset, length).toString();\n  };\n}(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n/** @ignore */\n\nexport var encodeUtf8 = function (TextEncoder) {\n  if (useNativeEncoders || !_Buffer) {\n    var encoder = new TextEncoder();\n    return function (value) {\n      return encoder.encode(value);\n    };\n  }\n\n  return function () {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return toUint8Array(_Buffer.from(input, 'utf8'));\n  };\n}(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,YAAT,QAA6B,UAA7B;AACA,SACIC,WAAW,IAAIC,mBADnB,EAEIC,WAAW,IAAIC,mBAFnB,QAGO,qBAHP;AAKA;;AACA,IAAMC,OAAO,GAAG,OAAOC,MAAP,KAAkB,UAAlB,GAA+BA,MAA/B,GAAwC,IAAxD;AACA;;;AACA,IAAMC,iBAAiB,GAAG,OAAON,WAAP,KAAuB,UAAvB,IAAqC,OAAOE,WAAP,KAAuB,UAAtF;AAEA;;AACA,OAAO,IAAMK,UAAU,GAAI,UAACP,WAAD,EAAgB;AACvC,MAAIM,iBAAiB,IAAI,CAACF,OAA1B,EAAmC;AAC/B,QAAMI,OAAO,GAAG,IAAIR,WAAJ,CAAgB,OAAhB,CAAhB;AACA,WAAO,UAACS,MAAD;AAAA,aAA4CD,OAAO,CAACE,MAAR,CAAeD,MAAf,CAA5C;AAAA,KAAP;AACH;;AACD,SAAO,UAACE,KAAD,EAA6C;AAChD,wBAAuCZ,YAAY,CAACY,KAAD,CAAnD;AAAA,QAAQF,MAAR,iBAAQA,MAAR;AAAA,QAAgBG,UAAhB,iBAAgBA,UAAhB;AAAA,QAA4BC,MAA5B,iBAA4BA,MAA5B;;AACA,WAAOT,OAAO,CAACU,IAAR,CAAaL,MAAb,EAAqBG,UAArB,EAAiCC,MAAjC,EAAyCE,QAAzC,EAAP;AACH,GAHD;AAIH,CATyB,CASvB,OAAOf,WAAP,KAAuB,WAAvB,GAAqCA,WAArC,GAAmDC,mBAT5B,CAAnB;AAWP;;AACA,OAAO,IAAMe,UAAU,GAAI,UAACd,WAAD,EAAgB;AACvC,MAAII,iBAAiB,IAAI,CAACF,OAA1B,EAAmC;AAC/B,QAAMa,OAAO,GAAG,IAAIf,WAAJ,EAAhB;AACA,WAAO,UAACgB,KAAD;AAAA,aAAoBD,OAAO,CAACE,MAAR,CAAeD,KAAf,CAApB;AAAA,KAAP;AACH;;AACD,SAAO;AAAA,QAACP,KAAD,uEAAS,EAAT;AAAA,WAAgBZ,YAAY,CAACK,OAAO,CAACU,IAAR,CAAaH,KAAb,EAAoB,MAApB,CAAD,CAA5B;AAAA,GAAP;AACH,CANyB,CAMvB,OAAOT,WAAP,KAAuB,WAAvB,GAAqCA,WAArC,GAAmDC,mBAN5B,CAAnB","names":["toUint8Array","TextDecoder","TextDecoderPolyfill","TextEncoder","TextEncoderPolyfill","_Buffer","Buffer","useNativeEncoders","decodeUtf8","decoder","buffer","decode","input","byteOffset","length","from","toString","encodeUtf8","encoder","value","encode"],"sources":["util/utf8.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n"]},"metadata":{},"sourceType":"module"}