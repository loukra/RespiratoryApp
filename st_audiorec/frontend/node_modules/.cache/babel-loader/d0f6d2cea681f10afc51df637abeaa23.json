{"ast":null,"code":"import _regeneratorRuntime from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType } from '../type';\n\nTable.prototype.countBy = function (name) {\n  return new DataFrame(this.chunks).countBy(name);\n};\n\nTable.prototype.scan = function (next, bind) {\n  return new DataFrame(this.chunks).scan(next, bind);\n};\n\nTable.prototype.scanReverse = function (next, bind) {\n  return new DataFrame(this.chunks).scanReverse(next, bind);\n};\n\nTable.prototype.filter = function (predicate) {\n  return new DataFrame(this.chunks).filter(predicate);\n};\n\nexport var DataFrame = /*#__PURE__*/function (_Table) {\n  _inherits(DataFrame, _Table);\n\n  var _super = _createSuper(DataFrame);\n\n  function DataFrame() {\n    _classCallCheck(this, DataFrame);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DataFrame, [{\n    key: \"filter\",\n    value: function filter(predicate) {\n      return new FilteredDataFrame(this.chunks, predicate);\n    }\n  }, {\n    key: \"scan\",\n    value: function scan(next, bind) {\n      var batches = this.chunks,\n          numBatches = batches.length;\n\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n\n        if (bind) {\n          bind(batch);\n        } // yield all indices\n\n\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          next(index, batch);\n        }\n      }\n    }\n  }, {\n    key: \"scanReverse\",\n    value: function scanReverse(next, bind) {\n      var batches = this.chunks,\n          numBatches = batches.length;\n\n      for (var batchIndex = numBatches; --batchIndex >= 0;) {\n        // load batches\n        var batch = batches[batchIndex];\n\n        if (bind) {\n          bind(batch);\n        } // yield all indices\n\n\n        for (var index = batch.length; --index >= 0;) {\n          next(index, batch);\n        }\n      }\n    }\n  }, {\n    key: \"countBy\",\n    value: function countBy(name) {\n      var batches = this.chunks,\n          numBatches = batches.length;\n      var count_by = typeof name === 'string' ? new Col(name) : name; // Assume that all dictionary batches are deltas, which means that the\n      // last record batch has the most complete dictionary\n\n      count_by.bind(batches[numBatches - 1]);\n      var vector = count_by.vector;\n\n      if (!DataType.isDictionary(vector.type)) {\n        throw new Error('countBy currently only supports dictionary-encoded columns');\n      }\n\n      var countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n      var CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n      var counts = new CountsArrayType(vector.dictionary.length);\n\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex]; // rebind the countBy Col\n\n        count_by.bind(batch);\n        var keys = count_by.vector.indices; // yield all indices\n\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          var key = keys.get(index);\n\n          if (key !== null) {\n            counts[key]++;\n          }\n        }\n      }\n\n      return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n  }]);\n\n  return DataFrame;\n}(Table);\n/** @ignore */\n\nexport var CountByResult = /*#__PURE__*/function (_Table2) {\n  _inherits(CountByResult, _Table2);\n\n  var _super2 = _createSuper(CountByResult);\n\n  function CountByResult(values, counts) {\n    _classCallCheck(this, CountByResult);\n\n    var schema = new Schema([new Field('values', values.type), new Field('counts', counts.type)]);\n    return _super2.call(this, new RecordBatch(schema, counts.length, [values, counts]));\n  }\n\n  _createClass(CountByResult, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var values = this.getColumnAt(0);\n      var counts = this.getColumnAt(1);\n      var result = {};\n\n      for (var i = -1; ++i < this.length;) {\n        result[values.get(i)] = counts.get(i);\n      }\n\n      return result;\n    }\n  }]);\n\n  return CountByResult;\n}(Table);\n/** @ignore */\n\nexport var FilteredDataFrame = /*#__PURE__*/function (_DataFrame, _Symbol$iterator) {\n  _inherits(FilteredDataFrame, _DataFrame);\n\n  var _super3 = _createSuper(FilteredDataFrame);\n\n  function FilteredDataFrame(batches, predicate) {\n    var _this;\n\n    _classCallCheck(this, FilteredDataFrame);\n\n    _this = _super3.call(this, batches);\n    _this._predicate = predicate;\n    return _this;\n  }\n\n  _createClass(FilteredDataFrame, [{\n    key: \"scan\",\n    value: function scan(next, bind) {\n      // inlined version of this:\n      // this.parent.scan((idx, columns) => {\n      //     if (this.predicate(idx, columns)) next(idx, columns);\n      // });\n      var batches = this._chunks;\n      var numBatches = batches.length;\n\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n\n        var predicate = this._predicate.bind(batch);\n\n        var isBound = false; // yield all indices\n\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          if (predicate(index, batch)) {\n            // bind batches lazily - if predicate doesn't match anything\n            // in the batch we don't need to call bind on the batch\n            if (bind && !isBound) {\n              bind(batch);\n              isBound = true;\n            }\n\n            next(index, batch);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"scanReverse\",\n    value: function scanReverse(next, bind) {\n      var batches = this._chunks;\n      var numBatches = batches.length;\n\n      for (var batchIndex = numBatches; --batchIndex >= 0;) {\n        // load batches\n        var batch = batches[batchIndex];\n\n        var predicate = this._predicate.bind(batch);\n\n        var isBound = false; // yield all indices\n\n        for (var index = batch.length; --index >= 0;) {\n          if (predicate(index, batch)) {\n            // bind batches lazily - if predicate doesn't match anything\n            // in the batch we don't need to call bind on the batch\n            if (bind && !isBound) {\n              bind(batch);\n              isBound = true;\n            }\n\n            next(index, batch);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"count\",\n    value: function count() {\n      // inlined version of this:\n      // let sum = 0;\n      // this.parent.scan((idx, columns) => {\n      //     if (this.predicate(idx, columns)) ++sum;\n      // });\n      // return sum;\n      var sum = 0;\n      var batches = this._chunks;\n      var numBatches = batches.length;\n\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n\n        var predicate = this._predicate.bind(batch); // yield all indices\n\n\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          if (predicate(index, batch)) {\n            ++sum;\n          }\n        }\n      }\n\n      return sum;\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var batches, numBatches, batchIndex, batch, predicate, index, numRows;\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // inlined version of this:\n              // this.parent.scan((idx, columns) => {\n              //     if (this.predicate(idx, columns)) next(idx, columns);\n              // });\n              batches = this._chunks;\n              numBatches = batches.length;\n              batchIndex = -1;\n\n            case 3:\n              if (!(++batchIndex < numBatches)) {\n                _context.next = 15;\n                break;\n              }\n\n              // load batches\n              batch = batches[batchIndex]; // TODO: bind batches lazily\n              // If predicate doesn't match anything in the batch we don't need\n              // to bind the callback\n\n              predicate = this._predicate.bind(batch); // yield all indices\n\n              index = -1, numRows = batch.length;\n\n            case 7:\n              if (!(++index < numRows)) {\n                _context.next = 13;\n                break;\n              }\n\n              if (!predicate(index, batch)) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 11;\n              return batch.get(index);\n\n            case 11:\n              _context.next = 7;\n              break;\n\n            case 13:\n              _context.next = 3;\n              break;\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"filter\",\n    value: function filter(predicate) {\n      return new FilteredDataFrame(this._chunks, this._predicate.and(predicate));\n    }\n  }, {\n    key: \"countBy\",\n    value: function countBy(name) {\n      var batches = this._chunks,\n          numBatches = batches.length;\n      var count_by = typeof name === 'string' ? new Col(name) : name; // Assume that all dictionary batches are deltas, which means that the\n      // last record batch has the most complete dictionary\n\n      count_by.bind(batches[numBatches - 1]);\n      var vector = count_by.vector;\n\n      if (!DataType.isDictionary(vector.type)) {\n        throw new Error('countBy currently only supports dictionary-encoded columns');\n      }\n\n      var countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n      var CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n      var counts = new CountsArrayType(vector.dictionary.length);\n\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n\n        var predicate = this._predicate.bind(batch); // rebind the countBy Col\n\n\n        count_by.bind(batch);\n        var keys = count_by.vector.indices; // yield all indices\n\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          var key = keys.get(index);\n\n          if (key !== null && predicate(index, batch)) {\n            counts[key]++;\n          }\n        }\n      }\n\n      return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n  }]);\n\n  return FilteredDataFrame;\n}(DataFrame, Symbol.iterator);","map":{"version":3,"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAT,QAAsB,UAAtB;AAEA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,WAA9B;AACA,SAAoBC,GAApB,QAA+B,aAA/B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,SAASC,QAAT,QAAkD,SAAlD;;AAOAN,KAAK,CAACO,SAAN,CAAgBC,OAAhB,GAA0B,UAAsBC,IAAtB,EAAwC;AAAI,SAAO,IAAIC,SAAJ,CAAc,KAAKC,MAAnB,EAA2BH,OAA3B,CAAmCC,IAAnC,CAAP;AAAkD,CAAxH;;AACAT,KAAK,CAACO,SAAN,CAAgBK,IAAhB,GAAuB,UAAsBC,IAAtB,EAAsCC,IAAtC,EAAqD;AAAI,SAAO,IAAIJ,SAAJ,CAAc,KAAKC,MAAnB,EAA2BC,IAA3B,CAAgCC,IAAhC,EAAsCC,IAAtC,CAAP;AAAqD,CAArI;;AACAd,KAAK,CAACO,SAAN,CAAgBQ,WAAhB,GAA8B,UAAsBF,IAAtB,EAAsCC,IAAtC,EAAqD;AAAI,SAAO,IAAIJ,SAAJ,CAAc,KAAKC,MAAnB,EAA2BI,WAA3B,CAAuCF,IAAvC,EAA6CC,IAA7C,CAAP;AAA4D,CAAnJ;;AACAd,KAAK,CAACO,SAAN,CAAgBS,MAAhB,GAAyB,UAAsBC,SAAtB,EAA0C;AAAuB,SAAO,IAAIP,SAAJ,CAAc,KAAKC,MAAnB,EAA2BK,MAA3B,CAAkCC,SAAlC,CAAP;AAAsD,CAAhJ;;AAEA,WAAaP,SAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACW,gBAAOO,SAAP,EAA2B;AAC9B,aAAO,IAAIC,iBAAJ,CAAyB,KAAKP,MAA9B,EAAsCM,SAAtC,CAAP;AACH;AAHL;AAAA;AAAA,WAIW,cAAKJ,IAAL,EAAqBC,IAArB,EAAoC;AACvC,UAAMK,OAAO,GAAG,KAAKR,MAArB;AAAA,UAA6BS,UAAU,GAAGD,OAAO,CAACE,MAAlD;;AACA,WAAK,IAAIC,UAAU,GAAG,CAAC,CAAvB,EAA0B,EAAEA,UAAF,GAAeF,UAAzC,GAAsD;AAClD;AACA,YAAMG,KAAK,GAAGJ,OAAO,CAACG,UAAD,CAArB;;AACA,YAAIR,IAAJ,EAAU;AAAEA,cAAI,CAACS,KAAD,CAAJ;AAAc,SAHwB,CAIlD;;;AACA,aAAK,IAAIC,KAAK,GAAG,CAAC,CAAb,EAAgBC,OAAO,GAAGF,KAAK,CAACF,MAArC,EAA6C,EAAEG,KAAF,GAAUC,OAAvD,GAAiE;AAC7DZ,cAAI,CAACW,KAAD,EAAQD,KAAR,CAAJ;AACH;AACJ;AACJ;AAfL;AAAA;AAAA,WAgBW,qBAAYV,IAAZ,EAA4BC,IAA5B,EAA2C;AAC9C,UAAMK,OAAO,GAAG,KAAKR,MAArB;AAAA,UAA6BS,UAAU,GAAGD,OAAO,CAACE,MAAlD;;AACA,WAAK,IAAIC,UAAU,GAAGF,UAAtB,EAAkC,EAAEE,UAAF,IAAgB,CAAlD,GAAsD;AAClD;AACA,YAAMC,KAAK,GAAGJ,OAAO,CAACG,UAAD,CAArB;;AACA,YAAIR,IAAJ,EAAU;AAAEA,cAAI,CAACS,KAAD,CAAJ;AAAc,SAHwB,CAIlD;;;AACA,aAAK,IAAIC,KAAK,GAAGD,KAAK,CAACF,MAAvB,EAA+B,EAAEG,KAAF,IAAW,CAA1C,GAA8C;AAC1CX,cAAI,CAACW,KAAD,EAAQD,KAAR,CAAJ;AACH;AACJ;AACJ;AA3BL;AAAA;AAAA,WA4BW,iBAAQd,IAAR,EAA0B;AAC7B,UAAMU,OAAO,GAAG,KAAKR,MAArB;AAAA,UAA6BS,UAAU,GAAGD,OAAO,CAACE,MAAlD;AACA,UAAMK,QAAQ,GAAG,OAAOjB,IAAP,KAAgB,QAAhB,GAA2B,IAAIL,GAAJ,CAAQK,IAAR,CAA3B,GAA2CA,IAA5D,CAF6B,CAG7B;AACA;;AACAiB,cAAQ,CAACZ,IAAT,CAAcK,OAAO,CAACC,UAAU,GAAG,CAAd,CAArB;AACA,UAAMO,MAAM,GAAGD,QAAQ,CAACC,MAAxB;;AACA,UAAI,CAACrB,QAAQ,CAACsB,YAAT,CAAsBD,MAAM,CAACE,IAA7B,CAAL,EAAyC;AACrC,cAAM,IAAIC,KAAJ,CAAU,4DAAV,CAAN;AACH;;AAED,UAAMC,eAAe,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASP,MAAM,CAACN,MAAhB,IAA0BW,IAAI,CAACE,GAAL,CAAS,GAAT,CAApC,CAAxB;AACA,UAAMC,eAAe,GAAGJ,eAAe,IAAI,CAAnB,GAAuBK,WAAvB,GACAL,eAAe,IAAI,CAAnB,GAAuBM,WAAvB,GAAqCC,UAD7D;AAGA,UAAMC,MAAM,GAAG,IAAIJ,eAAJ,CAAoBR,MAAM,CAACa,UAAP,CAAkBnB,MAAtC,CAAf;;AACA,WAAK,IAAIC,UAAU,GAAG,CAAC,CAAvB,EAA0B,EAAEA,UAAF,GAAeF,UAAzC,GAAsD;AAClD;AACA,YAAMG,KAAK,GAAGJ,OAAO,CAACG,UAAD,CAArB,CAFkD,CAGlD;;AACAI,gBAAQ,CAACZ,IAAT,CAAcS,KAAd;AACA,YAAMkB,IAAI,GAAIf,QAAQ,CAACC,MAAT,CAAkCe,OAAhD,CALkD,CAMlD;;AACA,aAAK,IAAIlB,KAAK,GAAG,CAAC,CAAb,EAAgBC,OAAO,GAAGF,KAAK,CAACF,MAArC,EAA6C,EAAEG,KAAF,GAAUC,OAAvD,GAAiE;AAC7D,cAAIkB,GAAG,GAAGF,IAAI,CAACG,GAAL,CAASpB,KAAT,CAAV;;AACA,cAAImB,GAAG,KAAK,IAAZ,EAAkB;AAAEJ,kBAAM,CAACI,GAAD,CAAN;AAAgB;AACvC;AACJ;;AACD,aAAO,IAAIE,aAAJ,CAAkBlB,MAAM,CAACa,UAAzB,EAAqCvC,SAAS,CAAC6C,IAAV,CAAeP,MAAf,CAArC,CAAP;AACH;AAzDL;;AAAA;AAAA,EAA4EvC,KAA5E;AA4DA;;AACA,WAAa6C,aAAb;AAAA;;AAAA;;AACI,yBAAYE,MAAZ,EAA+BR,MAA/B,EAAgD;AAAA;;AAE5C,QAAMS,MAAM,GAAG,IAAI7C,MAAJ,CAAc,CACzB,IAAID,KAAJ,CAAU,QAAV,EAAoB6C,MAAM,CAAClB,IAA3B,CADyB,EAEzB,IAAI3B,KAAJ,CAAU,QAAV,EAAoBqC,MAAM,CAACV,IAA3B,CAFyB,CAAd,CAAf;AAF4C,8BAMtC,IAAIxB,WAAJ,CAAmB2C,MAAnB,EAA2BT,MAAM,CAAClB,MAAlC,EAA0C,CAAC0B,MAAD,EAASR,MAAT,CAA1C,CANsC;AAO/C;;AARL;AAAA;AAAA,WASW,kBAAM;AACT,UAAMQ,MAAM,GAAG,KAAKE,WAAL,CAAiB,CAAjB,CAAf;AACA,UAAMV,MAAM,GAAG,KAAKU,WAAL,CAAiB,CAAjB,CAAf;AACA,UAAMC,MAAM,GAAG,EAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAC,CAAd,EAAiB,EAAEA,CAAF,GAAM,KAAK9B,MAA5B,GAAqC;AACjC6B,cAAM,CAACH,MAAM,CAACH,GAAP,CAAWO,CAAX,CAAD,CAAN,GAAwBZ,MAAM,CAACK,GAAP,CAAWO,CAAX,CAAxB;AACH;;AACD,aAAOD,MAAP;AACH;AAjBL;;AAAA;AAAA,EAAuFlD,KAAvF;AAoBA;;AACA,WAAakB,iBAAb;AAAA;;AAAA;;AAEI,6BAAaC,OAAb,EAAwCF,SAAxC,EAA4D;AAAA;;AAAA;;AACxD,+BAAME,OAAN;AACA,UAAKiC,UAAL,GAAkBnC,SAAlB;AAFwD;AAG3D;;AALL;AAAA;AAAA,WAMW,cAAKJ,IAAL,EAAqBC,IAArB,EAAoC;AACvC;AACA;AACA;AACA;AACA,UAAMK,OAAO,GAAG,KAAKkC,OAArB;AACA,UAAMjC,UAAU,GAAGD,OAAO,CAACE,MAA3B;;AACA,WAAK,IAAIC,UAAU,GAAG,CAAC,CAAvB,EAA0B,EAAEA,UAAF,GAAeF,UAAzC,GAAsD;AAClD;AACA,YAAMG,KAAK,GAAGJ,OAAO,CAACG,UAAD,CAArB;;AACA,YAAML,SAAS,GAAG,KAAKmC,UAAL,CAAgBtC,IAAhB,CAAqBS,KAArB,CAAlB;;AACA,YAAI+B,OAAO,GAAG,KAAd,CAJkD,CAKlD;;AACA,aAAK,IAAI9B,KAAK,GAAG,CAAC,CAAb,EAAgBC,OAAO,GAAGF,KAAK,CAACF,MAArC,EAA6C,EAAEG,KAAF,GAAUC,OAAvD,GAAiE;AAC7D,cAAIR,SAAS,CAACO,KAAD,EAAQD,KAAR,CAAb,EAA6B;AACzB;AACA;AACA,gBAAIT,IAAI,IAAI,CAACwC,OAAb,EAAsB;AAClBxC,kBAAI,CAACS,KAAD,CAAJ;AACA+B,qBAAO,GAAG,IAAV;AACH;;AACDzC,gBAAI,CAACW,KAAD,EAAQD,KAAR,CAAJ;AACH;AACJ;AACJ;AACJ;AA/BL;AAAA;AAAA,WAgCW,qBAAYV,IAAZ,EAA4BC,IAA5B,EAA2C;AAC9C,UAAMK,OAAO,GAAG,KAAKkC,OAArB;AACA,UAAMjC,UAAU,GAAGD,OAAO,CAACE,MAA3B;;AACA,WAAK,IAAIC,UAAU,GAAGF,UAAtB,EAAkC,EAAEE,UAAF,IAAgB,CAAlD,GAAsD;AAClD;AACA,YAAMC,KAAK,GAAGJ,OAAO,CAACG,UAAD,CAArB;;AACA,YAAML,SAAS,GAAG,KAAKmC,UAAL,CAAgBtC,IAAhB,CAAqBS,KAArB,CAAlB;;AACA,YAAI+B,OAAO,GAAG,KAAd,CAJkD,CAKlD;;AACA,aAAK,IAAI9B,KAAK,GAAGD,KAAK,CAACF,MAAvB,EAA+B,EAAEG,KAAF,IAAW,CAA1C,GAA8C;AAC1C,cAAIP,SAAS,CAACO,KAAD,EAAQD,KAAR,CAAb,EAA6B;AACzB;AACA;AACA,gBAAIT,IAAI,IAAI,CAACwC,OAAb,EAAsB;AAClBxC,kBAAI,CAACS,KAAD,CAAJ;AACA+B,qBAAO,GAAG,IAAV;AACH;;AACDzC,gBAAI,CAACW,KAAD,EAAQD,KAAR,CAAJ;AACH;AACJ;AACJ;AACJ;AArDL;AAAA;AAAA,WAsDW,iBAAK;AACR;AACA;AACA;AACA;AACA;AACA;AACA,UAAIgC,GAAG,GAAG,CAAV;AACA,UAAMpC,OAAO,GAAG,KAAKkC,OAArB;AACA,UAAMjC,UAAU,GAAGD,OAAO,CAACE,MAA3B;;AACA,WAAK,IAAIC,UAAU,GAAG,CAAC,CAAvB,EAA0B,EAAEA,UAAF,GAAeF,UAAzC,GAAsD;AAClD;AACA,YAAMG,KAAK,GAAGJ,OAAO,CAACG,UAAD,CAArB;;AACA,YAAML,SAAS,GAAG,KAAKmC,UAAL,CAAgBtC,IAAhB,CAAqBS,KAArB,CAAlB,CAHkD,CAIlD;;;AACA,aAAK,IAAIC,KAAK,GAAG,CAAC,CAAb,EAAgBC,OAAO,GAAGF,KAAK,CAACF,MAArC,EAA6C,EAAEG,KAAF,GAAUC,OAAvD,GAAiE;AAC7D,cAAIR,SAAS,CAACO,KAAD,EAAQD,KAAR,CAAb,EAA6B;AAAE,cAAEgC,GAAF;AAAQ;AAC1C;AACJ;;AACD,aAAOA,GAAP;AACH;AA1EL;AAAA;AAAA,iDA2EW;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;AACA;AACA;AACA;AACMpC,qBALH,GAKa,KAAKkC,OALlB;AAMGjC,wBANH,GAMgBD,OAAO,CAACE,MANxB;AAOMC,wBAPN,GAOmB,CAAC,CAPpB;;AAAA;AAAA,oBAOuB,EAAEA,UAAF,GAAeF,UAPtC;AAAA;AAAA;AAAA;;AAQC;AACMG,mBATP,GASeJ,OAAO,CAACG,UAAD,CATtB,EAUC;AACA;AACA;;AACML,uBAbP,GAamB,KAAKmC,UAAL,CAAgBtC,IAAhB,CAAqBS,KAArB,CAbnB,EAcC;;AACSC,mBAfV,GAekB,CAAC,CAfnB,EAesBC,OAftB,GAegCF,KAAK,CAACF,MAftC;;AAAA;AAAA,oBAe8C,EAAEG,KAAF,GAAUC,OAfxD;AAAA;AAAA;AAAA;;AAAA,mBAgBSR,SAAS,CAACO,KAAD,EAAQD,KAAR,CAhBlB;AAAA;AAAA;AAAA;;AAAA;AAgBoC,qBAAMA,KAAK,CAACqB,GAAN,CAAUpB,KAAV,CAAN;;AAhBpC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3EX;AAAA;AAAA;AAAA,WA+FW,gBAAOP,SAAP,EAA2B;AAC9B,aAAO,IAAIC,iBAAJ,CACH,KAAKmC,OADF,EAEH,KAAKD,UAAL,CAAgBI,GAAhB,CAAoBvC,SAApB,CAFG,CAAP;AAIH;AApGL;AAAA;AAAA,WAqGW,iBAAQR,IAAR,EAA0B;AAC7B,UAAMU,OAAO,GAAG,KAAKkC,OAArB;AAAA,UAA8BjC,UAAU,GAAGD,OAAO,CAACE,MAAnD;AACA,UAAMK,QAAQ,GAAG,OAAOjB,IAAP,KAAgB,QAAhB,GAA2B,IAAIL,GAAJ,CAAQK,IAAR,CAA3B,GAA2CA,IAA5D,CAF6B,CAG7B;AACA;;AACAiB,cAAQ,CAACZ,IAAT,CAAcK,OAAO,CAACC,UAAU,GAAG,CAAd,CAArB;AACA,UAAMO,MAAM,GAAGD,QAAQ,CAACC,MAAxB;;AACA,UAAI,CAACrB,QAAQ,CAACsB,YAAT,CAAsBD,MAAM,CAACE,IAA7B,CAAL,EAAyC;AACrC,cAAM,IAAIC,KAAJ,CAAU,4DAAV,CAAN;AACH;;AAED,UAAMC,eAAe,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASP,MAAM,CAACN,MAAhB,IAA0BW,IAAI,CAACE,GAAL,CAAS,GAAT,CAApC,CAAxB;AACA,UAAMC,eAAe,GAAGJ,eAAe,IAAI,CAAnB,GAAuBK,WAAvB,GACAL,eAAe,IAAI,CAAnB,GAAuBM,WAAvB,GAAqCC,UAD7D;AAGA,UAAMC,MAAM,GAAG,IAAIJ,eAAJ,CAAoBR,MAAM,CAACa,UAAP,CAAkBnB,MAAtC,CAAf;;AAEA,WAAK,IAAIC,UAAU,GAAG,CAAC,CAAvB,EAA0B,EAAEA,UAAF,GAAeF,UAAzC,GAAsD;AAClD;AACA,YAAMG,KAAK,GAAGJ,OAAO,CAACG,UAAD,CAArB;;AACA,YAAML,SAAS,GAAG,KAAKmC,UAAL,CAAgBtC,IAAhB,CAAqBS,KAArB,CAAlB,CAHkD,CAIlD;;;AACAG,gBAAQ,CAACZ,IAAT,CAAcS,KAAd;AACA,YAAMkB,IAAI,GAAIf,QAAQ,CAACC,MAAT,CAAkCe,OAAhD,CANkD,CAOlD;;AACA,aAAK,IAAIlB,KAAK,GAAG,CAAC,CAAb,EAAgBC,OAAO,GAAGF,KAAK,CAACF,MAArC,EAA6C,EAAEG,KAAF,GAAUC,OAAvD,GAAiE;AAC7D,cAAIkB,GAAG,GAAGF,IAAI,CAACG,GAAL,CAASpB,KAAT,CAAV;;AACA,cAAImB,GAAG,KAAK,IAAR,IAAgB1B,SAAS,CAACO,KAAD,EAAQD,KAAR,CAA7B,EAA6C;AAAEgB,kBAAM,CAACI,GAAD,CAAN;AAAgB;AAClE;AACJ;;AACD,aAAO,IAAIE,aAAJ,CAAkBlB,MAAM,CAACa,UAAzB,EAAqCvC,SAAS,CAAC6C,IAAV,CAAeP,MAAf,CAArC,CAAP;AACH;AApIL;;AAAA;AAAA,EAAoF7B,SAApF,EA2Ea+C,MAAM,CAACC,QA3EpB","names":["Table","IntVector","Field","Schema","Col","RecordBatch","DataType","prototype","countBy","name","DataFrame","chunks","scan","next","bind","scanReverse","filter","predicate","FilteredDataFrame","batches","numBatches","length","batchIndex","batch","index","numRows","count_by","vector","isDictionary","type","Error","countByteLength","Math","ceil","log","CountsArrayType","Uint32Array","Uint16Array","Uint8Array","counts","dictionary","keys","indices","key","get","CountByResult","from","values","schema","getColumnAt","result","i","_predicate","_chunks","isBound","sum","and","Symbol","iterator"],"sources":["compute/dataframe.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}