{"ast":null,"code":"import _slicedToArray from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar _Field = Schema_.org.apache.arrow.flatbuf.Field;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nvar _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nvar _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32 } from '../../type';\n/**\n * @ignore\n * @private\n **/\n\nexport var Message = /*#__PURE__*/function () {\n  function Message(bodyLength, version, headerType, header) {\n    _classCallCheck(this, Message);\n\n    this._version = version;\n    this._headerType = headerType;\n    this.body = new Uint8Array(0);\n    header && (this._createHeader = function () {\n      return header;\n    });\n    this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n  }\n  /** @nocollapse */\n\n\n  _createClass(Message, [{\n    key: \"type\",\n    get: function get() {\n      return this.headerType;\n    }\n  }, {\n    key: \"version\",\n    get: function get() {\n      return this._version;\n    }\n  }, {\n    key: \"headerType\",\n    get: function get() {\n      return this._headerType;\n    }\n  }, {\n    key: \"bodyLength\",\n    get: function get() {\n      return this._bodyLength;\n    }\n  }, {\n    key: \"header\",\n    value: function header() {\n      return this._createHeader();\n    }\n  }, {\n    key: \"isSchema\",\n    value: function isSchema() {\n      return this.headerType === MessageHeader.Schema;\n    }\n  }, {\n    key: \"isRecordBatch\",\n    value: function isRecordBatch() {\n      return this.headerType === MessageHeader.RecordBatch;\n    }\n  }, {\n    key: \"isDictionaryBatch\",\n    value: function isDictionaryBatch() {\n      return this.headerType === MessageHeader.DictionaryBatch;\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(msg, headerType) {\n      var message = new Message(0, MetadataVersion.V4, headerType);\n      message._createHeader = messageHeaderFromJSON(msg, headerType);\n      return message;\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"decode\",\n    value: function decode(buf) {\n      buf = new ByteBuffer(toUint8Array(buf));\n\n      var _message = _Message.getRootAsMessage(buf);\n\n      var bodyLength = _message.bodyLength();\n\n      var version = _message.version();\n\n      var headerType = _message.headerType();\n\n      var message = new Message(bodyLength, version, headerType);\n      message._createHeader = decodeMessageHeader(_message, headerType);\n      return message;\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"encode\",\n    value: function encode(message) {\n      var b = new Builder(),\n          headerOffset = -1;\n\n      if (message.isSchema()) {\n        headerOffset = Schema.encode(b, message.header());\n      } else if (message.isRecordBatch()) {\n        headerOffset = RecordBatch.encode(b, message.header());\n      } else if (message.isDictionaryBatch()) {\n        headerOffset = DictionaryBatch.encode(b, message.header());\n      }\n\n      _Message.startMessage(b);\n\n      _Message.addVersion(b, MetadataVersion.V4);\n\n      _Message.addHeader(b, headerOffset);\n\n      _Message.addHeaderType(b, message.headerType);\n\n      _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n\n      _Message.finishMessageBuffer(b, _Message.endMessage(b));\n\n      return b.asUint8Array();\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"from\",\n    value: function from(header) {\n      var bodyLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (header instanceof Schema) {\n        return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n      }\n\n      if (header instanceof RecordBatch) {\n        return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n      }\n\n      if (header instanceof DictionaryBatch) {\n        return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n      }\n\n      throw new Error(\"Unrecognized Message header: \".concat(header));\n    }\n  }]);\n\n  return Message;\n}();\n/**\n * @ignore\n * @private\n **/\n\nexport var RecordBatch = /*#__PURE__*/function () {\n  function RecordBatch(length, nodes, buffers) {\n    _classCallCheck(this, RecordBatch);\n\n    this._nodes = nodes;\n    this._buffers = buffers;\n    this._length = typeof length === 'number' ? length : length.low;\n  }\n\n  _createClass(RecordBatch, [{\n    key: \"nodes\",\n    get: function get() {\n      return this._nodes;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n  }, {\n    key: \"buffers\",\n    get: function get() {\n      return this._buffers;\n    }\n  }]);\n\n  return RecordBatch;\n}();\n/**\n * @ignore\n * @private\n **/\n\nexport var DictionaryBatch = /*#__PURE__*/function () {\n  function DictionaryBatch(data, id) {\n    var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    _classCallCheck(this, DictionaryBatch);\n\n    this._data = data;\n    this._isDelta = isDelta;\n    this._id = typeof id === 'number' ? id : id.low;\n  }\n\n  _createClass(DictionaryBatch, [{\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    }\n  }, {\n    key: \"isDelta\",\n    get: function get() {\n      return this._isDelta;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.data.length;\n    }\n  }, {\n    key: \"nodes\",\n    get: function get() {\n      return this.data.nodes;\n    }\n  }, {\n    key: \"buffers\",\n    get: function get() {\n      return this.data.buffers;\n    }\n  }]);\n\n  return DictionaryBatch;\n}();\n/**\n * @ignore\n * @private\n **/\n\nexport var BufferRegion = /*#__PURE__*/_createClass(function BufferRegion(offset, length) {\n  _classCallCheck(this, BufferRegion);\n\n  this.offset = typeof offset === 'number' ? offset : offset.low;\n  this.length = typeof length === 'number' ? length : length.low;\n});\n/**\n * @ignore\n * @private\n **/\n\nexport var FieldNode = /*#__PURE__*/_createClass(function FieldNode(length, nullCount) {\n  _classCallCheck(this, FieldNode);\n\n  this.length = typeof length === 'number' ? length : length.low;\n  this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n});\n/** @ignore */\n\nfunction messageHeaderFromJSON(message, type) {\n  return function () {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.fromJSON(message);\n\n      case MessageHeader.RecordBatch:\n        return RecordBatch.fromJSON(message);\n\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.fromJSON(message);\n    }\n\n    throw new Error(\"Unrecognized Message type: { name: \".concat(MessageHeader[type], \", type: \").concat(type, \" }\"));\n  };\n}\n/** @ignore */\n\n\nfunction decodeMessageHeader(message, type) {\n  return function () {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.decode(message.header(new _Schema()));\n\n      case MessageHeader.RecordBatch:\n        return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n    }\n\n    throw new Error(\"Unrecognized Message type: { name: \".concat(MessageHeader[type], \", type: \").concat(type, \" }\"));\n  };\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n/** @ignore */\n\nfunction decodeSchema(_schema) {\n  var dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n  var fields = decodeSchemaFields(_schema, dictionaries);\n  return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n/** @ignore */\n\n\nfunction decodeRecordBatch(batch) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n  return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n/** @ignore */\n\n\nfunction decodeDictionaryBatch(batch) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n  return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\n/** @ignore */\n\n\nfunction decodeBufferRegion(b) {\n  return new BufferRegion(b.offset(), b.length());\n}\n/** @ignore */\n\n\nfunction decodeFieldNode(f) {\n  return new FieldNode(f.length(), f.nullCount());\n}\n/** @ignore */\n\n\nfunction decodeFieldNodes(batch) {\n  var nodes = [];\n\n  for (var f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n    if (f = batch.nodes(i)) {\n      nodes[++j] = FieldNode.decode(f);\n    }\n  }\n\n  return nodes;\n}\n/** @ignore */\n\n\nfunction decodeBuffers(batch, version) {\n  var bufferRegions = [];\n\n  for (var b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n    if (b = batch.buffers(i)) {\n      // If this Arrow buffer was written before version 4,\n      // advance the buffer's bb_pos 8 bytes to skip past\n      // the now-removed page_id field\n      if (version < MetadataVersion.V4) {\n        b.bb_pos += 8 * (i + 1);\n      }\n\n      bufferRegions[++j] = BufferRegion.decode(b);\n    }\n  }\n\n  return bufferRegions;\n}\n/** @ignore */\n\n\nfunction decodeSchemaFields(schema, dictionaries) {\n  var fields = [];\n\n  for (var f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n    if (f = schema.fields(i)) {\n      fields[++j] = Field.decode(f, dictionaries);\n    }\n  }\n\n  return fields;\n}\n/** @ignore */\n\n\nfunction decodeFieldChildren(field, dictionaries) {\n  var children = [];\n\n  for (var f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n    if (f = field.children(i)) {\n      children[++j] = Field.decode(f, dictionaries);\n    }\n  }\n\n  return children;\n}\n/** @ignore */\n\n\nfunction decodeField(f, dictionaries) {\n  var id;\n  var field;\n  var type;\n  var keys;\n  var dictType;\n  var dictMeta; // If no dictionary encoding\n\n  if (!dictionaries || !(dictMeta = f.dictionary())) {\n    type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n    field = new Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n  } // tslint:disable\n  // If dictionary encoded and the first time we've seen this dictionary id, decode\n  // the data type and child fields, then wrap in a Dictionary type and insert the\n  // data type into the dictionary types map.\n  else if (!dictionaries.has(id = dictMeta.id().low)) {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n    dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  } // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n  // data type and wrap in a new Dictionary type and field.\n  else {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n\n  return field || null;\n}\n/** @ignore */\n\n\nfunction decodeCustomMetadata(parent) {\n  var data = new Map();\n\n  if (parent) {\n    for (var entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n      if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n        data.set(key, entry.value());\n      }\n    }\n  }\n\n  return data;\n}\n/** @ignore */\n\n\nfunction decodeIndexType(_type) {\n  return new Int(_type.isSigned(), _type.bitWidth());\n}\n/** @ignore */\n\n\nfunction decodeFieldType(f, children) {\n  var typeId = f.typeType();\n\n  switch (typeId) {\n    case Type.NONE:\n      return new Null();\n\n    case Type.Null:\n      return new Null();\n\n    case Type.Binary:\n      return new Binary();\n\n    case Type.Utf8:\n      return new Utf8();\n\n    case Type.Bool:\n      return new Bool();\n\n    case Type.List:\n      return new List((children || [])[0]);\n\n    case Type.Struct_:\n      return new Struct(children || []);\n  }\n\n  switch (typeId) {\n    case Type.Int:\n      {\n        var t = f.type(new Schema_.org.apache.arrow.flatbuf.Int());\n        return new Int(t.isSigned(), t.bitWidth());\n      }\n\n    case Type.FloatingPoint:\n      {\n        var _t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint());\n\n        return new Float(_t.precision());\n      }\n\n    case Type.Decimal:\n      {\n        var _t2 = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal());\n\n        return new Decimal(_t2.scale(), _t2.precision());\n      }\n\n    case Type.Date:\n      {\n        var _t3 = f.type(new Schema_.org.apache.arrow.flatbuf.Date());\n\n        return new Date_(_t3.unit());\n      }\n\n    case Type.Time:\n      {\n        var _t4 = f.type(new Schema_.org.apache.arrow.flatbuf.Time());\n\n        return new Time(_t4.unit(), _t4.bitWidth());\n      }\n\n    case Type.Timestamp:\n      {\n        var _t5 = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp());\n\n        return new Timestamp(_t5.unit(), _t5.timezone());\n      }\n\n    case Type.Interval:\n      {\n        var _t6 = f.type(new Schema_.org.apache.arrow.flatbuf.Interval());\n\n        return new Interval(_t6.unit());\n      }\n\n    case Type.Union:\n      {\n        var _t7 = f.type(new Schema_.org.apache.arrow.flatbuf.Union());\n\n        return new Union(_t7.mode(), _t7.typeIdsArray() || [], children || []);\n      }\n\n    case Type.FixedSizeBinary:\n      {\n        var _t8 = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary());\n\n        return new FixedSizeBinary(_t8.byteWidth());\n      }\n\n    case Type.FixedSizeList:\n      {\n        var _t9 = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList());\n\n        return new FixedSizeList(_t9.listSize(), (children || [])[0]);\n      }\n\n    case Type.Map:\n      {\n        var _t10 = f.type(new Schema_.org.apache.arrow.flatbuf.Map());\n\n        return new Map_((children || [])[0], _t10.keysSorted());\n      }\n  }\n\n  throw new Error(\"Unrecognized type: \\\"\".concat(Type[typeId], \"\\\" (\").concat(typeId, \")\"));\n}\n/** @ignore */\n\n\nfunction encodeSchema(b, schema) {\n  var fieldOffsets = schema.fields.map(function (f) {\n    return Field.encode(b, f);\n  });\n\n  _Schema.startFieldsVector(b, fieldOffsets.length);\n\n  var fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n  var metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 : _Schema.createCustomMetadataVector(b, _toConsumableArray(schema.metadata).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        k = _ref2[0],\n        v = _ref2[1];\n\n    var key = b.createString(\"\".concat(k));\n    var val = b.createString(\"\".concat(v));\n\n    _KeyValue.startKeyValue(b);\n\n    _KeyValue.addKey(b, key);\n\n    _KeyValue.addValue(b, val);\n\n    return _KeyValue.endKeyValue(b);\n  }));\n\n  _Schema.startSchema(b);\n\n  _Schema.addFields(b, fieldsVectorOffset);\n\n  _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n  if (metadataOffset !== -1) {\n    _Schema.addCustomMetadata(b, metadataOffset);\n  }\n\n  return _Schema.endSchema(b);\n}\n/** @ignore */\n\n\nfunction encodeField(b, field) {\n  var nameOffset = -1;\n  var typeOffset = -1;\n  var dictionaryOffset = -1;\n  var type = field.type;\n  var typeId = field.typeId;\n\n  if (!DataType.isDictionary(type)) {\n    typeOffset = typeAssembler.visit(type, b);\n  } else {\n    typeId = type.dictionary.typeId;\n    dictionaryOffset = typeAssembler.visit(type, b);\n    typeOffset = typeAssembler.visit(type.dictionary, b);\n  }\n\n  var childOffsets = (type.children || []).map(function (f) {\n    return Field.encode(b, f);\n  });\n\n  var childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n  var metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 : _Field.createCustomMetadataVector(b, _toConsumableArray(field.metadata).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        k = _ref4[0],\n        v = _ref4[1];\n\n    var key = b.createString(\"\".concat(k));\n    var val = b.createString(\"\".concat(v));\n\n    _KeyValue.startKeyValue(b);\n\n    _KeyValue.addKey(b, key);\n\n    _KeyValue.addValue(b, val);\n\n    return _KeyValue.endKeyValue(b);\n  }));\n\n  if (field.name) {\n    nameOffset = b.createString(field.name);\n  }\n\n  _Field.startField(b);\n\n  _Field.addType(b, typeOffset);\n\n  _Field.addTypeType(b, typeId);\n\n  _Field.addChildren(b, childrenVectorOffset);\n\n  _Field.addNullable(b, !!field.nullable);\n\n  if (nameOffset !== -1) {\n    _Field.addName(b, nameOffset);\n  }\n\n  if (dictionaryOffset !== -1) {\n    _Field.addDictionary(b, dictionaryOffset);\n  }\n\n  if (metadataOffset !== -1) {\n    _Field.addCustomMetadata(b, metadataOffset);\n  }\n\n  return _Field.endField(b);\n}\n/** @ignore */\n\n\nfunction encodeRecordBatch(b, recordBatch) {\n  var nodes = recordBatch.nodes || [];\n  var buffers = recordBatch.buffers || [];\n\n  _RecordBatch.startNodesVector(b, nodes.length);\n\n  nodes.slice().reverse().forEach(function (n) {\n    return FieldNode.encode(b, n);\n  });\n  var nodesVectorOffset = b.endVector();\n\n  _RecordBatch.startBuffersVector(b, buffers.length);\n\n  buffers.slice().reverse().forEach(function (b_) {\n    return BufferRegion.encode(b, b_);\n  });\n  var buffersVectorOffset = b.endVector();\n\n  _RecordBatch.startRecordBatch(b);\n\n  _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n\n  _RecordBatch.addNodes(b, nodesVectorOffset);\n\n  _RecordBatch.addBuffers(b, buffersVectorOffset);\n\n  return _RecordBatch.endRecordBatch(b);\n}\n/** @ignore */\n\n\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n  var dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n\n  _DictionaryBatch.startDictionaryBatch(b);\n\n  _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n\n  _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n\n  _DictionaryBatch.addData(b, dataOffset);\n\n  return _DictionaryBatch.endDictionaryBatch(b);\n}\n/** @ignore */\n\n\nfunction encodeFieldNode(b, node) {\n  return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n/** @ignore */\n\n\nfunction encodeBufferRegion(b, node) {\n  return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n/** @ignore */\n\n\nvar platformIsLittleEndian = function () {\n  var buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true\n  /* littleEndian */\n  ); // Int16Array uses the platform's endianness.\n\n  return new Int16Array(buffer)[0] === 256;\n}();","map":{"version":3,"mappings":"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","names":["flatbuffers","Schema_","Message_","Schema","Field","toUint8Array","MessageHeader","MetadataVersion","instance","typeAssembler","fieldFromJSON","schemaFromJSON","recordBatchFromJSON","dictionaryBatchFromJSON","Long","Builder","ByteBuffer","Type","org","apache","arrow","flatbuf","_Field","_Schema","_Buffer","Buffer","_Message","Message","_KeyValue","KeyValue","_FieldNode","FieldNode","_Endianness","Endianness","_RecordBatch","RecordBatch","_DictionaryBatch","DictionaryBatch","DataType","Dictionary","Utf8","Binary","Decimal","FixedSizeBinary","List","FixedSizeList","Map_","Struct","Union","Bool","Null","Int","Float","Date_","Time","Interval","Timestamp","Int32","bodyLength","version","headerType","header","_version","_headerType","body","Uint8Array","_createHeader","_bodyLength","low","msg","message","V4","messageHeaderFromJSON","buf","_message","getRootAsMessage","decodeMessageHeader","b","headerOffset","isSchema","encode","isRecordBatch","isDictionaryBatch","startMessage","addVersion","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","asUint8Array","Error","length","nodes","buffers","_nodes","_buffers","_length","data","id","isDelta","_data","_isDelta","_id","BufferRegion","offset","nullCount","type","fromJSON","decode","encodeField","decodeField","encodeSchema","decodeSchema","encodeRecordBatch","decodeRecordBatch","encodeDictionaryBatch","decodeDictionaryBatch","encodeFieldNode","decodeFieldNode","encodeBufferRegion","decodeBufferRegion","_schema","dictionaries","Map","fields","decodeSchemaFields","decodeCustomMetadata","batch","decodeFieldNodes","decodeBuffers","f","i","j","n","nodesLength","bufferRegions","buffersLength","bb_pos","schema","fieldsLength","decodeFieldChildren","field","children","childrenLength","keys","dictType","dictMeta","dictionary","decodeFieldType","name","nullable","has","indexType","decodeIndexType","set","isOrdered","get","parent","entry","key","customMetadataLength","customMetadata","value","_type","isSigned","bitWidth","typeId","typeType","NONE","Struct_","t","FloatingPoint","precision","scale","Date","unit","timezone","mode","typeIdsArray","byteWidth","listSize","keysSorted","fieldOffsets","map","startFieldsVector","fieldsVectorOffset","createFieldsVector","metadataOffset","metadata","size","createCustomMetadataVector","k","v","createString","val","startKeyValue","addKey","addValue","endKeyValue","startSchema","addFields","addEndianness","platformIsLittleEndian","Little","Big","addCustomMetadata","endSchema","nameOffset","typeOffset","dictionaryOffset","isDictionary","visit","childOffsets","childrenVectorOffset","createChildrenVector","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","endField","recordBatch","startNodesVector","slice","reverse","forEach","nodesVectorOffset","endVector","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","dictionaryBatch","dataOffset","startDictionaryBatch","addId","addIsDelta","addData","endDictionaryBatch","node","createFieldNode","createBuffer","buffer","ArrayBuffer","DataView","setInt16","Int16Array"],"sources":["ipc/metadata/message.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n"]},"metadata":{},"sourceType":"module"}