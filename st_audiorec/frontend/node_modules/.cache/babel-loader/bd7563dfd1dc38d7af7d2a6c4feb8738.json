{"ast":null,"code":"/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n}; // Safari doesn't support the EventTarget class, so we use a shim.\n\n\nimport { EventTarget } from \"event-target-shim\";\nimport { ArrowTable } from \"./ArrowTable\";\n/** Messages from Component -> Streamlit */\n\nvar ComponentMessageType;\n\n(function (ComponentMessageType) {\n  // A component sends this message when it's ready to receive messages\n  // from Streamlit. Streamlit won't send any messages until it gets this.\n  // Data: { apiVersion: number }\n  ComponentMessageType[\"COMPONENT_READY\"] = \"streamlit:componentReady\"; // The component has a new widget value. Send it back to Streamlit, which\n  // will then re-run the app.\n  // Data: { value: any }\n\n  ComponentMessageType[\"SET_COMPONENT_VALUE\"] = \"streamlit:setComponentValue\"; // The component has a new height for its iframe.\n  // Data: { height: number }\n\n  ComponentMessageType[\"SET_FRAME_HEIGHT\"] = \"streamlit:setFrameHeight\";\n})(ComponentMessageType || (ComponentMessageType = {}));\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\n\n\nvar Streamlit =\n/** @class */\nfunction () {\n  function Streamlit() {}\n  /**\n   * The Streamlit component API version we're targetting.\n   * There's currently only 1!\n   */\n\n\n  Streamlit.API_VERSION = 1;\n  Streamlit.RENDER_EVENT = \"streamlit:render\";\n  /** Dispatches events received from Streamlit. */\n\n  Streamlit.events = new EventTarget();\n  Streamlit.registeredMessageListener = false;\n  /**\n   * Tell Streamlit that the component is ready to start receiving data.\n   * Streamlit will defer emitting RENDER events until it receives the\n   * COMPONENT_READY message.\n   */\n\n  Streamlit.setComponentReady = function () {\n    if (!Streamlit.registeredMessageListener) {\n      // Register for message events if we haven't already\n      window.addEventListener(\"message\", Streamlit.onMessageEvent);\n      Streamlit.registeredMessageListener = true;\n    }\n\n    Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n      apiVersion: Streamlit.API_VERSION\n    });\n  };\n  /**\n   * Report the component's height to Streamlit.\n   * This should be called every time the component changes its DOM - that is,\n   * when it's first loaded, and any time it updates.\n   */\n\n\n  Streamlit.setFrameHeight = function (height) {\n    if (height === undefined) {\n      // `height` is optional. If undefined, it defaults to scrollHeight,\n      // which is the entire height of the element minus its border,\n      // scrollbar, and margin.\n      height = document.body.scrollHeight;\n    }\n\n    if (height === Streamlit.lastFrameHeight) {\n      // Don't bother updating if our height hasn't changed.\n      return;\n    }\n\n    Streamlit.lastFrameHeight = height;\n    Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, {\n      height: height\n    });\n  };\n  /**\n   * Set the component's value. This value will be returned to the Python\n   * script, and the script will be re-run.\n   *\n   * For example:\n   *\n   * JavaScript:\n   * Streamlit.setComponentValue(\"ahoy!\")\n   *\n   * Python:\n   * value = st.my_component(...)\n   * st.write(value) # -> \"ahoy!\"\n   *\n   * The value must be an ArrowTable, a typed array, an ArrayBuffer, or be\n   * serializable to JSON.\n   */\n\n\n  Streamlit.setComponentValue = function (value) {\n    var dataType;\n\n    if (value instanceof ArrowTable) {\n      dataType = \"dataframe\";\n      value = value.serialize();\n    } else if (isTypedArray(value)) {\n      // All typed arrays get sent as Uint8Array, because that's what our\n      // protobuf library uses for the \"bytes\" field type.\n      dataType = \"bytes\";\n      value = new Uint8Array(value.buffer);\n    } else if (value instanceof ArrayBuffer) {\n      dataType = \"bytes\";\n      value = new Uint8Array(value);\n    } else {\n      dataType = \"json\";\n    }\n\n    Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, {\n      value: value,\n      dataType: dataType\n    });\n  };\n  /** Receive a ForwardMsg from the Streamlit app */\n\n\n  Streamlit.onMessageEvent = function (event) {\n    var type = event.data[\"type\"];\n\n    switch (type) {\n      case Streamlit.RENDER_EVENT:\n        Streamlit.onRenderMessage(event.data);\n        break;\n    }\n  };\n  /**\n   * Handle an untyped Streamlit render event and redispatch it as a\n   * StreamlitRenderEvent.\n   */\n\n\n  Streamlit.onRenderMessage = function (data) {\n    var args = data[\"args\"];\n\n    if (args == null) {\n      console.error(\"Got null args in onRenderMessage. This should never happen\");\n      args = {};\n    } // Parse our dataframe arguments with arrow, and merge them into our args dict\n\n\n    var dataframeArgs = data[\"dfs\"] && data[\"dfs\"].length > 0 ? Streamlit.argsDataframeToObject(data[\"dfs\"]) : {};\n    args = __assign(__assign({}, args), dataframeArgs);\n    var disabled = Boolean(data[\"disabled\"]);\n    var theme = data[\"theme\"];\n\n    if (theme) {\n      _injectTheme(theme);\n    } // Dispatch a render event!\n\n\n    var eventData = {\n      disabled: disabled,\n      args: args,\n      theme: theme\n    };\n    var event = new CustomEvent(Streamlit.RENDER_EVENT, {\n      detail: eventData\n    });\n    Streamlit.events.dispatchEvent(event);\n  };\n\n  Streamlit.argsDataframeToObject = function (argsDataframe) {\n    var argsDataframeArrow = argsDataframe.map(function (_a) {\n      var key = _a.key,\n          value = _a.value;\n      return [key, Streamlit.toArrowTable(value)];\n    });\n    return Object.fromEntries(argsDataframeArrow);\n  };\n\n  Streamlit.toArrowTable = function (df) {\n    var _a = df.data,\n        data = _a.data,\n        index = _a.index,\n        columns = _a.columns,\n        styler = _a.styler;\n    return new ArrowTable(data, index, columns, styler);\n  };\n  /** Post a message to the Streamlit app. */\n\n\n  Streamlit.sendBackMsg = function (type, data) {\n    window.parent.postMessage(__assign({\n      isStreamlitMessage: true,\n      type: type\n    }, data), \"*\");\n  };\n\n  return Streamlit;\n}();\n\nexport { Streamlit };\n\nvar _injectTheme = function _injectTheme(theme) {\n  var style = document.createElement(\"style\");\n  document.head.appendChild(style);\n  style.innerHTML = \"\\n    :root {\\n      --primary-color: \" + theme.primaryColor + \";\\n      --background-color: \" + theme.backgroundColor + \";\\n      --secondary-background-color: \" + theme.secondaryBackgroundColor + \";\\n      --text-color: \" + theme.textColor + \";\\n      --font: \" + theme.font + \";\\n    }\\n\\n    body {\\n      background-color: var(--background-color);\\n      color: var(--text-color);\\n    }\\n  \";\n};\n/** True if the value is a TypedArray. */\n\n\nfunction isTypedArray(value) {\n  var isBigIntArray = false;\n\n  try {\n    isBigIntArray = value instanceof BigInt64Array || value instanceof BigUint64Array;\n  } catch (e) {// Ignore cause Safari does not support this\n    // https://caniuse.com/mdn-javascript_builtins_bigint64array\n  }\n\n  return value instanceof Int8Array || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int16Array || value instanceof Uint16Array || value instanceof Int32Array || value instanceof Uint32Array || value instanceof Float32Array || value instanceof Float64Array || isBigIntArray;\n}","map":{"version":3,"sources":["/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/streamlit-component-lib/dist/streamlit.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","EventTarget","ArrowTable","ComponentMessageType","Streamlit","API_VERSION","RENDER_EVENT","events","registeredMessageListener","setComponentReady","window","addEventListener","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","undefined","document","body","scrollHeight","lastFrameHeight","SET_FRAME_HEIGHT","setComponentValue","value","dataType","serialize","isTypedArray","Uint8Array","buffer","ArrayBuffer","SET_COMPONENT_VALUE","event","type","data","onRenderMessage","args","console","error","dataframeArgs","argsDataframeToObject","disabled","Boolean","theme","_injectTheme","eventData","CustomEvent","detail","dispatchEvent","argsDataframe","argsDataframeArrow","map","_a","key","toArrowTable","fromEntries","df","index","columns","styler","parent","postMessage","isStreamlitMessage","style","createElement","head","appendChild","innerHTML","primaryColor","backgroundColor","secondaryBackgroundColor","textColor","font","isBigIntArray","BigInt64Array","BigUint64Array","e","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\";\nimport { ArrowTable } from \"./ArrowTable\";\n/** Messages from Component -> Streamlit */\nvar ComponentMessageType;\n(function (ComponentMessageType) {\n    // A component sends this message when it's ready to receive messages\n    // from Streamlit. Streamlit won't send any messages until it gets this.\n    // Data: { apiVersion: number }\n    ComponentMessageType[\"COMPONENT_READY\"] = \"streamlit:componentReady\";\n    // The component has a new widget value. Send it back to Streamlit, which\n    // will then re-run the app.\n    // Data: { value: any }\n    ComponentMessageType[\"SET_COMPONENT_VALUE\"] = \"streamlit:setComponentValue\";\n    // The component has a new height for its iframe.\n    // Data: { height: number }\n    ComponentMessageType[\"SET_FRAME_HEIGHT\"] = \"streamlit:setFrameHeight\";\n})(ComponentMessageType || (ComponentMessageType = {}));\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nvar Streamlit = /** @class */ (function () {\n    function Streamlit() {\n    }\n    /**\n     * The Streamlit component API version we're targetting.\n     * There's currently only 1!\n     */\n    Streamlit.API_VERSION = 1;\n    Streamlit.RENDER_EVENT = \"streamlit:render\";\n    /** Dispatches events received from Streamlit. */\n    Streamlit.events = new EventTarget();\n    Streamlit.registeredMessageListener = false;\n    /**\n     * Tell Streamlit that the component is ready to start receiving data.\n     * Streamlit will defer emitting RENDER events until it receives the\n     * COMPONENT_READY message.\n     */\n    Streamlit.setComponentReady = function () {\n        if (!Streamlit.registeredMessageListener) {\n            // Register for message events if we haven't already\n            window.addEventListener(\"message\", Streamlit.onMessageEvent);\n            Streamlit.registeredMessageListener = true;\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n            apiVersion: Streamlit.API_VERSION\n        });\n    };\n    /**\n     * Report the component's height to Streamlit.\n     * This should be called every time the component changes its DOM - that is,\n     * when it's first loaded, and any time it updates.\n     */\n    Streamlit.setFrameHeight = function (height) {\n        if (height === undefined) {\n            // `height` is optional. If undefined, it defaults to scrollHeight,\n            // which is the entire height of the element minus its border,\n            // scrollbar, and margin.\n            height = document.body.scrollHeight;\n        }\n        if (height === Streamlit.lastFrameHeight) {\n            // Don't bother updating if our height hasn't changed.\n            return;\n        }\n        Streamlit.lastFrameHeight = height;\n        Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height: height });\n    };\n    /**\n     * Set the component's value. This value will be returned to the Python\n     * script, and the script will be re-run.\n     *\n     * For example:\n     *\n     * JavaScript:\n     * Streamlit.setComponentValue(\"ahoy!\")\n     *\n     * Python:\n     * value = st.my_component(...)\n     * st.write(value) # -> \"ahoy!\"\n     *\n     * The value must be an ArrowTable, a typed array, an ArrayBuffer, or be\n     * serializable to JSON.\n     */\n    Streamlit.setComponentValue = function (value) {\n        var dataType;\n        if (value instanceof ArrowTable) {\n            dataType = \"dataframe\";\n            value = value.serialize();\n        }\n        else if (isTypedArray(value)) {\n            // All typed arrays get sent as Uint8Array, because that's what our\n            // protobuf library uses for the \"bytes\" field type.\n            dataType = \"bytes\";\n            value = new Uint8Array(value.buffer);\n        }\n        else if (value instanceof ArrayBuffer) {\n            dataType = \"bytes\";\n            value = new Uint8Array(value);\n        }\n        else {\n            dataType = \"json\";\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, {\n            value: value,\n            dataType: dataType\n        });\n    };\n    /** Receive a ForwardMsg from the Streamlit app */\n    Streamlit.onMessageEvent = function (event) {\n        var type = event.data[\"type\"];\n        switch (type) {\n            case Streamlit.RENDER_EVENT:\n                Streamlit.onRenderMessage(event.data);\n                break;\n        }\n    };\n    /**\n     * Handle an untyped Streamlit render event and redispatch it as a\n     * StreamlitRenderEvent.\n     */\n    Streamlit.onRenderMessage = function (data) {\n        var args = data[\"args\"];\n        if (args == null) {\n            console.error(\"Got null args in onRenderMessage. This should never happen\");\n            args = {};\n        }\n        // Parse our dataframe arguments with arrow, and merge them into our args dict\n        var dataframeArgs = data[\"dfs\"] && data[\"dfs\"].length > 0\n            ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n            : {};\n        args = __assign(__assign({}, args), dataframeArgs);\n        var disabled = Boolean(data[\"disabled\"]);\n        var theme = data[\"theme\"];\n        if (theme) {\n            _injectTheme(theme);\n        }\n        // Dispatch a render event!\n        var eventData = { disabled: disabled, args: args, theme: theme };\n        var event = new CustomEvent(Streamlit.RENDER_EVENT, {\n            detail: eventData\n        });\n        Streamlit.events.dispatchEvent(event);\n    };\n    Streamlit.argsDataframeToObject = function (argsDataframe) {\n        var argsDataframeArrow = argsDataframe.map(function (_a) {\n            var key = _a.key, value = _a.value;\n            return [key, Streamlit.toArrowTable(value)];\n        });\n        return Object.fromEntries(argsDataframeArrow);\n    };\n    Streamlit.toArrowTable = function (df) {\n        var _a = df.data, data = _a.data, index = _a.index, columns = _a.columns, styler = _a.styler;\n        return new ArrowTable(data, index, columns, styler);\n    };\n    /** Post a message to the Streamlit app. */\n    Streamlit.sendBackMsg = function (type, data) {\n        window.parent.postMessage(__assign({ isStreamlitMessage: true, type: type }, data), \"*\");\n    };\n    return Streamlit;\n}());\nexport { Streamlit };\nvar _injectTheme = function (theme) {\n    var style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    style.innerHTML = \"\\n    :root {\\n      --primary-color: \" + theme.primaryColor + \";\\n      --background-color: \" + theme.backgroundColor + \";\\n      --secondary-background-color: \" + theme.secondaryBackgroundColor + \";\\n      --text-color: \" + theme.textColor + \";\\n      --font: \" + theme.font + \";\\n    }\\n\\n    body {\\n      background-color: var(--background-color);\\n      color: var(--text-color);\\n    }\\n  \";\n};\n/** True if the value is a TypedArray. */\nfunction isTypedArray(value) {\n    var isBigIntArray = false;\n    try {\n        isBigIntArray =\n            value instanceof BigInt64Array || value instanceof BigUint64Array;\n    }\n    catch (e) {\n        // Ignore cause Safari does not support this\n        // https://caniuse.com/mdn-javascript_builtins_bigint64array\n    }\n    return (value instanceof Int8Array ||\n        value instanceof Uint8Array ||\n        value instanceof Uint8ClampedArray ||\n        value instanceof Int16Array ||\n        value instanceof Uint16Array ||\n        value instanceof Int32Array ||\n        value instanceof Uint32Array ||\n        value instanceof Float32Array ||\n        value instanceof Float64Array ||\n        isBigIntArray);\n}\n"]},"metadata":{},"sourceType":"module"}