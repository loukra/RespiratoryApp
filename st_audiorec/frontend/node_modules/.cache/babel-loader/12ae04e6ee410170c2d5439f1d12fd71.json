{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nvar undf = void 0;\n/** @ignore */\n\nexport function valueToString(x) {\n  if (x === null) {\n    return 'null';\n  }\n\n  if (x === undf) {\n    return 'undefined';\n  }\n\n  switch (typeof x) {\n    case 'number':\n      return \"\".concat(x);\n\n    case 'bigint':\n      return \"\".concat(x);\n\n    case 'string':\n      return \"\\\"\".concat(x, \"\\\"\");\n  } // If [Symbol.toPrimitive] is implemented (like in BN)\n  // use it instead of JSON.stringify(). This ensures we\n  // print BigInts, Decimals, and Binary in their native\n  // representation\n\n\n  if (typeof x[Symbol.toPrimitive] === 'function') {\n    return x[Symbol.toPrimitive]('string');\n  }\n\n  return ArrayBuffer.isView(x) ? \"[\".concat(x, \"]\") : JSON.stringify(x);\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAe,IAAMA,IAAI,GAAG,KAAM,CAAnB;AAEf;;AACA,OAAM,SAAUC,aAAV,CAAwBC,CAAxB,EAA8B;AAChC,MAAIA,CAAC,KAAK,IAAV,EAAgB;AAAE,WAAO,MAAP;AAAgB;;AAClC,MAAIA,CAAC,KAAKF,IAAV,EAAgB;AAAE,WAAO,WAAP;AAAqB;;AACvC,UAAQ,OAAOE,CAAf;AACI,SAAK,QAAL;AAAe,uBAAUA,CAAV;;AACf,SAAK,QAAL;AAAe,uBAAUA,CAAV;;AACf,SAAK,QAAL;AAAe,yBAAWA,CAAX;AAHnB,GAHgC,CAQhC;AACA;AACA;AACA;;;AACA,MAAI,OAAOA,CAAC,CAACC,MAAM,CAACC,WAAR,CAAR,KAAiC,UAArC,EAAiD;AAC7C,WAAOF,CAAC,CAACC,MAAM,CAACC,WAAR,CAAD,CAAsB,QAAtB,CAAP;AACH;;AACD,SAAOC,WAAW,CAACC,MAAZ,CAAmBJ,CAAnB,eAA4BA,CAA5B,SAAmCK,IAAI,CAACC,SAAL,CAAeN,CAAf,CAA1C;AACH","names":["undf","valueToString","x","Symbol","toPrimitive","ArrayBuffer","isView","JSON","stringify"],"sources":["util/pretty.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n"]},"metadata":{},"sourceType":"module"}