{"ast":null,"code":"import _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\n\nexport var Utf8Builder = /*#__PURE__*/function (_VariableWidthBuilder) {\n  _inherits(Utf8Builder, _VariableWidthBuilder);\n\n  var _super = _createSuper(Utf8Builder);\n\n  function Utf8Builder(opts) {\n    var _this;\n\n    _classCallCheck(this, Utf8Builder);\n\n    _this = _super.call(this, opts);\n    _this._values = new BufferBuilder(new Uint8Array(0));\n    return _this;\n  }\n\n  _createClass(Utf8Builder, [{\n    key: \"byteLength\",\n    get: function get() {\n      var size = this._pendingLength + this.length * 4;\n      this._offsets && (size += this._offsets.byteLength);\n      this._values && (size += this._values.byteLength);\n      this._nulls && (size += this._nulls.byteLength);\n      return size;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(index, value) {\n      return _get(_getPrototypeOf(Utf8Builder.prototype), \"setValue\", this).call(this, index, encodeUtf8(value));\n    } // @ts-ignore\n\n  }, {\n    key: \"_flushPending\",\n    value: function _flushPending(pending, pendingLength) {}\n  }]);\n\n  return Utf8Builder;\n}(VariableWidthBuilder);\nUtf8Builder.prototype._flushPending = BinaryBuilder.prototype._flushPending;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,oBAAT,QAAqD,YAArD;AAEA;;AACA,WAAaC,WAAb;AAAA;;AAAA;;AACI,uBAAYC,IAAZ,EAA6C;AAAA;;AAAA;;AACzC,8BAAMA,IAAN;AACA,UAAKC,OAAL,GAAe,IAAIJ,aAAJ,CAAkB,IAAIK,UAAJ,CAAe,CAAf,CAAlB,CAAf;AAFyC;AAG5C;;AAJL;AAAA;AAAA,SAKI,eAAqB;AACjB,UAAIC,IAAI,GAAG,KAAKC,cAAL,GAAuB,KAAKC,MAAL,GAAc,CAAhD;AACA,WAAKC,QAAL,KAAkBH,IAAI,IAAI,KAAKG,QAAL,CAAcC,UAAxC;AACA,WAAKN,OAAL,KAAiBE,IAAI,IAAI,KAAKF,OAAL,CAAaM,UAAtC;AACA,WAAKC,MAAL,KAAgBL,IAAI,IAAI,KAAKK,MAAL,CAAYD,UAApC;AACA,aAAOJ,IAAP;AACH;AAXL;AAAA;AAAA,WAYW,kBAASM,KAAT,EAAwBC,KAAxB,EAAqC;AACxC,uFAAsBD,KAAtB,EAA6Bd,UAAU,CAACe,KAAD,CAAvC;AACH,KAdL,CAeI;;AAfJ;AAAA;AAAA,WAgBc,uBAAcC,OAAd,EAA4DC,aAA5D,EAAiF,CAAU;AAhBzG;;AAAA;AAAA,EAA8Cd,oBAA9C;AAmBCC,WAAW,CAACc,SAAZ,CAA8BC,aAA9B,GAA+ClB,aAAa,CAACiB,SAAd,CAAgCC,aAA/E","names":["encodeUtf8","BinaryBuilder","BufferBuilder","VariableWidthBuilder","Utf8Builder","opts","_values","Uint8Array","size","_pendingLength","length","_offsets","byteLength","_nulls","index","value","pending","pendingLength","prototype","_flushPending"],"sources":["builder/utf8.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n"]},"metadata":{},"sourceType":"module"}