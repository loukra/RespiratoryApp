{"ast":null,"code":"import _regeneratorRuntime from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/regenerator\";\nimport _createForOfIteratorHelper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(binaryToString),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(bigNumsToStrings);\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport { DataType } from '../type';\n/** @ignore */\n\nexport var JSONVectorAssembler = /*#__PURE__*/function (_Visitor) {\n  _inherits(JSONVectorAssembler, _Visitor);\n\n  var _super = _createSuper(JSONVectorAssembler);\n\n  function JSONVectorAssembler() {\n    _classCallCheck(this, JSONVectorAssembler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(JSONVectorAssembler, [{\n    key: \"visit\",\n    value: function visit(column) {\n      var data = column.data,\n          name = column.name,\n          length = column.length;\n      var offset = data.offset,\n          nullCount = data.nullCount,\n          nullBitmap = data.nullBitmap;\n      var type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n      var buffers = Object.assign([], data.buffers, _defineProperty({}, BufferType.VALIDITY, undefined));\n      return _objectSpread({\n        'name': name,\n        'count': length,\n        'VALIDITY': DataType.isNull(type) ? undefined : nullCount <= 0 ? Array.from({\n          length: length\n        }, function () {\n          return 1;\n        }) : _toConsumableArray(iterateBits(nullBitmap, offset, length, null, getBit))\n      }, _get(_getPrototypeOf(JSONVectorAssembler.prototype), \"visit\", this).call(this, Vector.new(data.clone(type, offset, length, 0, buffers))));\n    }\n  }, {\n    key: \"visitNull\",\n    value: function visitNull() {\n      return {};\n    }\n  }, {\n    key: \"visitBool\",\n    value: function visitBool(_ref) {\n      var values = _ref.values,\n          offset = _ref.offset,\n          length = _ref.length;\n      return {\n        'DATA': _toConsumableArray(iterateBits(values, offset, length, null, getBool))\n      };\n    }\n  }, {\n    key: \"visitInt\",\n    value: function visitInt(vector) {\n      return {\n        'DATA': vector.type.bitWidth < 64 ? _toConsumableArray(vector.values) : _toConsumableArray(bigNumsToStrings(vector.values, 2))\n      };\n    }\n  }, {\n    key: \"visitFloat\",\n    value: function visitFloat(vector) {\n      return {\n        'DATA': _toConsumableArray(vector.values)\n      };\n    }\n  }, {\n    key: \"visitUtf8\",\n    value: function visitUtf8(vector) {\n      return {\n        'DATA': _toConsumableArray(vector),\n        'OFFSET': _toConsumableArray(vector.valueOffsets)\n      };\n    }\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(vector) {\n      return {\n        'DATA': _toConsumableArray(binaryToString(vector)),\n        OFFSET: _toConsumableArray(vector.valueOffsets)\n      };\n    }\n  }, {\n    key: \"visitFixedSizeBinary\",\n    value: function visitFixedSizeBinary(vector) {\n      return {\n        'DATA': _toConsumableArray(binaryToString(vector))\n      };\n    }\n  }, {\n    key: \"visitDate\",\n    value: function visitDate(vector) {\n      return {\n        'DATA': vector.type.unit === DateUnit.DAY ? _toConsumableArray(vector.values) : _toConsumableArray(bigNumsToStrings(vector.values, 2))\n      };\n    }\n  }, {\n    key: \"visitTimestamp\",\n    value: function visitTimestamp(vector) {\n      return {\n        'DATA': _toConsumableArray(bigNumsToStrings(vector.values, 2))\n      };\n    }\n  }, {\n    key: \"visitTime\",\n    value: function visitTime(vector) {\n      return {\n        'DATA': vector.type.unit < TimeUnit.MICROSECOND ? _toConsumableArray(vector.values) : _toConsumableArray(bigNumsToStrings(vector.values, 2))\n      };\n    }\n  }, {\n    key: \"visitDecimal\",\n    value: function visitDecimal(vector) {\n      return {\n        'DATA': _toConsumableArray(bigNumsToStrings(vector.values, 4))\n      };\n    }\n  }, {\n    key: \"visitList\",\n    value: function visitList(vector) {\n      var _this = this;\n\n      return {\n        'OFFSET': _toConsumableArray(vector.valueOffsets),\n        'children': vector.type.children.map(function (f, i) {\n          return _this.visit(new Column(f, [vector.getChildAt(i)]));\n        })\n      };\n    }\n  }, {\n    key: \"visitStruct\",\n    value: function visitStruct(vector) {\n      var _this2 = this;\n\n      return {\n        'children': vector.type.children.map(function (f, i) {\n          return _this2.visit(new Column(f, [vector.getChildAt(i)]));\n        })\n      };\n    }\n  }, {\n    key: \"visitUnion\",\n    value: function visitUnion(vector) {\n      var _this3 = this;\n\n      return {\n        'TYPE': _toConsumableArray(vector.typeIds),\n        'OFFSET': vector.type.mode === UnionMode.Dense ? _toConsumableArray(vector.valueOffsets) : undefined,\n        'children': vector.type.children.map(function (f, i) {\n          return _this3.visit(new Column(f, [vector.getChildAt(i)]));\n        })\n      };\n    }\n  }, {\n    key: \"visitInterval\",\n    value: function visitInterval(vector) {\n      return {\n        'DATA': _toConsumableArray(vector.values)\n      };\n    }\n  }, {\n    key: \"visitFixedSizeList\",\n    value: function visitFixedSizeList(vector) {\n      var _this4 = this;\n\n      return {\n        'children': vector.type.children.map(function (f, i) {\n          return _this4.visit(new Column(f, [vector.getChildAt(i)]));\n        })\n      };\n    }\n  }, {\n    key: \"visitMap\",\n    value: function visitMap(vector) {\n      var _this5 = this;\n\n      return {\n        'OFFSET': _toConsumableArray(vector.valueOffsets),\n        'children': vector.type.children.map(function (f, i) {\n          return _this5.visit(new Column(f, [vector.getChildAt(i)]));\n        })\n      };\n    }\n  }], [{\n    key: \"assemble\",\n    value:\n    /** @nocollapse */\n    function assemble() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n  }]);\n\n  return JSONVectorAssembler;\n}(Visitor);\n/** @ignore */\n\nfunction binaryToString(vector) {\n  var _iterator, _step, octets;\n\n  return _regeneratorRuntime.wrap(function binaryToString$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _iterator = _createForOfIteratorHelper(vector);\n          _context.prev = 1;\n\n          _iterator.s();\n\n        case 3:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 9;\n            break;\n          }\n\n          octets = _step.value;\n          _context.next = 7;\n          return octets.reduce(function (str, byte) {\n            return \"\".concat(str).concat(('0' + (byte & 0xFF).toString(16)).slice(-2));\n          }, '').toUpperCase();\n\n        case 7:\n          _context.next = 3;\n          break;\n\n        case 9:\n          _context.next = 14;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](1);\n\n          _iterator.e(_context.t0);\n\n        case 14:\n          _context.prev = 14;\n\n          _iterator.f();\n\n          return _context.finish(14);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 11, 14, 17]]);\n}\n/** @ignore */\n\n\nfunction bigNumsToStrings(values, stride) {\n  var i, n;\n  return _regeneratorRuntime.wrap(function bigNumsToStrings$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          i = -1, n = values.length / stride;\n\n        case 1:\n          if (!(++i < n)) {\n            _context2.next = 6;\n            break;\n          }\n\n          _context2.next = 4;\n          return \"\".concat(BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false));\n\n        case 4:\n          _context2.next = 1;\n          break;\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"mappings":"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","names":["binaryToString","bigNumsToStrings","BN","Column","Vector","Visitor","BufferType","RecordBatch","UnionMode","DateUnit","TimeUnit","iterateBits","getBit","getBool","selectColumnChildrenArgs","DataType","JSONVectorAssembler","column","data","name","length","offset","nullCount","nullBitmap","type","isDictionary","indices","buffers","Object","assign","VALIDITY","undefined","isNull","Array","from","new","clone","values","vector","bitWidth","valueOffsets","OFFSET","unit","DAY","MICROSECOND","children","map","f","i","visit","getChildAt","typeIds","mode","Dense","args","visitMany","octets","reduce","str","byte","toString","slice","toUpperCase","stride","n","subarray"],"sources":["visitor/jsonvectorassembler.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: V<T>): { };\n    visitBool                 <T extends Bool>            (vector: V<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: V<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: V<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: V<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: V<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: V<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: V<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: V<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: V<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: V<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: V<T>): { children: any[] };\n}\n\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n        return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': DataType.isNull(type) ? undefined\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: V<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: V<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: V<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: V<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}