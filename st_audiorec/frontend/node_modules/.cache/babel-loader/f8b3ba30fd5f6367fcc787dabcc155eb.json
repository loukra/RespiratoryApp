{"ast":null,"code":"import _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\n/** @ignore */\n\nexport var VectorLoader = /*#__PURE__*/function (_Visitor) {\n  _inherits(VectorLoader, _Visitor);\n\n  var _super = _createSuper(VectorLoader);\n\n  function VectorLoader(bytes, nodes, buffers, dictionaries) {\n    var _this;\n\n    _classCallCheck(this, VectorLoader);\n\n    _this = _super.call(this);\n    _this.nodesIndex = -1;\n    _this.buffersIndex = -1;\n    _this.bytes = bytes;\n    _this.nodes = nodes;\n    _this.buffers = buffers;\n    _this.dictionaries = dictionaries;\n    return _this;\n  }\n\n  _createClass(VectorLoader, [{\n    key: \"visit\",\n    value: function visit(node) {\n      return _get(_getPrototypeOf(VectorLoader.prototype), \"visit\", this).call(this, node instanceof Field ? node.type : node);\n    }\n  }, {\n    key: \"visitNull\",\n    value: function visitNull(type) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref.length;\n\n      return Data.Null(type, 0, length);\n    }\n  }, {\n    key: \"visitBool\",\n    value: function visitBool(type) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref2.length,\n          nullCount = _ref2.nullCount;\n\n      return Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitInt\",\n    value: function visitInt(type) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref3.length,\n          nullCount = _ref3.nullCount;\n\n      return Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitFloat\",\n    value: function visitFloat(type) {\n      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref4.length,\n          nullCount = _ref4.nullCount;\n\n      return Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitUtf8\",\n    value: function visitUtf8(type) {\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref5.length,\n          nullCount = _ref5.nullCount;\n\n      return Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n    }\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(type) {\n      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref6.length,\n          nullCount = _ref6.nullCount;\n\n      return Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n    }\n  }, {\n    key: \"visitFixedSizeBinary\",\n    value: function visitFixedSizeBinary(type) {\n      var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref7.length,\n          nullCount = _ref7.nullCount;\n\n      return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitDate\",\n    value: function visitDate(type) {\n      var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref8.length,\n          nullCount = _ref8.nullCount;\n\n      return Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitTimestamp\",\n    value: function visitTimestamp(type) {\n      var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref9.length,\n          nullCount = _ref9.nullCount;\n\n      return Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitTime\",\n    value: function visitTime(type) {\n      var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref10.length,\n          nullCount = _ref10.nullCount;\n\n      return Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitDecimal\",\n    value: function visitDecimal(type) {\n      var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref11.length,\n          nullCount = _ref11.nullCount;\n\n      return Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitList\",\n    value: function visitList(type) {\n      var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref12.length,\n          nullCount = _ref12.nullCount;\n\n      return Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n    }\n  }, {\n    key: \"visitStruct\",\n    value: function visitStruct(type) {\n      var _ref13 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref13.length,\n          nullCount = _ref13.nullCount;\n\n      return Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));\n    }\n  }, {\n    key: \"visitUnion\",\n    value: function visitUnion(type) {\n      return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type);\n    }\n  }, {\n    key: \"visitDenseUnion\",\n    value: function visitDenseUnion(type) {\n      var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref14.length,\n          nullCount = _ref14.nullCount;\n\n      return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children));\n    }\n  }, {\n    key: \"visitSparseUnion\",\n    value: function visitSparseUnion(type) {\n      var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref15.length,\n          nullCount = _ref15.nullCount;\n\n      return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));\n    }\n  }, {\n    key: \"visitDictionary\",\n    value: function visitDictionary(type) {\n      var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref16.length,\n          nullCount = _ref16.nullCount;\n\n      return Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));\n    }\n  }, {\n    key: \"visitInterval\",\n    value: function visitInterval(type) {\n      var _ref17 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref17.length,\n          nullCount = _ref17.nullCount;\n\n      return Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitFixedSizeList\",\n    value: function visitFixedSizeList(type) {\n      var _ref18 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref18.length,\n          nullCount = _ref18.nullCount;\n\n      return Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));\n    }\n  }, {\n    key: \"visitMap\",\n    value: function visitMap(type) {\n      var _ref19 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n          length = _ref19.length,\n          nullCount = _ref19.nullCount;\n\n      return Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n    }\n  }, {\n    key: \"nextFieldNode\",\n    value: function nextFieldNode() {\n      return this.nodes[++this.nodesIndex];\n    }\n  }, {\n    key: \"nextBufferRange\",\n    value: function nextBufferRange() {\n      return this.buffers[++this.buffersIndex];\n    }\n  }, {\n    key: \"readNullBitmap\",\n    value: function readNullBitmap(type, nullCount) {\n      var buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange();\n      return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n  }, {\n    key: \"readOffsets\",\n    value: function readOffsets(type, buffer) {\n      return this.readData(type, buffer);\n    }\n  }, {\n    key: \"readTypeIds\",\n    value: function readTypeIds(type, buffer) {\n      return this.readData(type, buffer);\n    }\n  }, {\n    key: \"readData\",\n    value: function readData(_type) {\n      var _ref20 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),\n          length = _ref20.length,\n          offset = _ref20.offset;\n\n      return this.bytes.subarray(offset, offset + length);\n    }\n  }, {\n    key: \"readDictionary\",\n    value: function readDictionary(type) {\n      return this.dictionaries.get(type.id);\n    }\n  }]);\n\n  return VectorLoader;\n}(Visitor);\n/** @ignore */\n\nexport var JSONVectorLoader = /*#__PURE__*/function (_VectorLoader) {\n  _inherits(JSONVectorLoader, _VectorLoader);\n\n  var _super2 = _createSuper(JSONVectorLoader);\n\n  function JSONVectorLoader(sources, nodes, buffers, dictionaries) {\n    var _this2;\n\n    _classCallCheck(this, JSONVectorLoader);\n\n    _this2 = _super2.call(this, new Uint8Array(0), nodes, buffers, dictionaries);\n    _this2.sources = sources;\n    return _this2;\n  }\n\n  _createClass(JSONVectorLoader, [{\n    key: \"readNullBitmap\",\n    value: function readNullBitmap(_type, nullCount) {\n      var _ref21 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange(),\n          offset = _ref21.offset;\n\n      return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n  }, {\n    key: \"readOffsets\",\n    value: function readOffsets(_type) {\n      var _ref22 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),\n          offset = _ref22.offset;\n\n      return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n  }, {\n    key: \"readTypeIds\",\n    value: function readTypeIds(type) {\n      var _ref23 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),\n          offset = _ref23.offset;\n\n      return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n  }, {\n    key: \"readData\",\n    value: function readData(type) {\n      var _ref24 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),\n          offset = _ref24.offset;\n\n      var sources = this.sources;\n\n      if (DataType.isTimestamp(type)) {\n        return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n      } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n        return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n      } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n        return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n      } else if (DataType.isDecimal(type)) {\n        return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset]));\n      } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n        return binaryDataFromJSON(sources[offset]);\n      } else if (DataType.isBool(type)) {\n        return packBools(sources[offset]);\n      } else if (DataType.isUtf8(type)) {\n        return encodeUtf8(sources[offset].join(''));\n      }\n\n      return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map(function (x) {\n        return +x;\n      })));\n    }\n  }]);\n\n  return JSONVectorLoader;\n}(VectorLoader);\n/** @ignore */\n\nfunction binaryDataFromJSON(values) {\n  // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n  // There are definitely more efficient ways to do this... but it gets the\n  // job done.\n  var joined = values.join('');\n  var data = new Uint8Array(joined.length / 2);\n\n  for (var i = 0; i < joined.length; i += 2) {\n    data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n  }\n\n  return data;\n}","map":{"version":3,"mappings":"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","names":["Data","Field","DataType","Visitor","packBools","encodeUtf8","Int64","Int128","UnionMode","DateUnit","toArrayBufferView","VectorLoader","bytes","nodes","buffers","dictionaries","node","type","nextFieldNode","length","Null","nullCount","Bool","readNullBitmap","readData","Int","Float","Utf8","readOffsets","Binary","FixedSizeBinary","Date","Timestamp","Time","Decimal","List","visit","children","Struct","visitMany","mode","Sparse","visitSparseUnion","visitDenseUnion","Union","readTypeIds","Dictionary","indices","readDictionary","Interval","FixedSizeList","Map","nodesIndex","buffersIndex","buffer","nextBufferRange","Uint8Array","_type","offset","subarray","get","id","JSONVectorLoader","sources","Int32Array","ArrayType","isTimestamp","convertArray","isInt","isTime","bitWidth","isDate","unit","MILLISECOND","isDecimal","isBinary","isFixedSizeBinary","binaryDataFromJSON","isBool","isUtf8","join","map","x","values","joined","data","i","parseInt","substr"],"sources":["visitor/vectorloader.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n"]},"metadata":{},"sourceType":"module"}