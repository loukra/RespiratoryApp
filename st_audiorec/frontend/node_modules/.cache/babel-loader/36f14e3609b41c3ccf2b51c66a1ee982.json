{"ast":null,"code":"import _classCallCheck from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/louiskrause/neuefische/RespiratoryApp/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nimport * as Schema_ from '../fb/Schema';\nimport { Visitor } from '../visitor';\nvar Null = Schema_.org.apache.arrow.flatbuf.Null;\nvar Int = Schema_.org.apache.arrow.flatbuf.Int;\nvar FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nvar Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nvar Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nvar Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nvar Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nvar Date = Schema_.org.apache.arrow.flatbuf.Date;\nvar Time = Schema_.org.apache.arrow.flatbuf.Time;\nvar Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nvar Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nvar List = Schema_.org.apache.arrow.flatbuf.List;\nvar Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nvar Union = Schema_.org.apache.arrow.flatbuf.Union;\nvar DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nvar FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nvar FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nvar Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n/** @ignore */\n\nexport var TypeAssembler = /*#__PURE__*/function (_Visitor) {\n  _inherits(TypeAssembler, _Visitor);\n\n  var _super = _createSuper(TypeAssembler);\n\n  function TypeAssembler() {\n    _classCallCheck(this, TypeAssembler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TypeAssembler, [{\n    key: \"visit\",\n    value: function visit(node, builder) {\n      return node == null || builder == null ? undefined : _get(_getPrototypeOf(TypeAssembler.prototype), \"visit\", this).call(this, node, builder);\n    }\n  }, {\n    key: \"visitNull\",\n    value: function visitNull(_node, b) {\n      Null.startNull(b);\n      return Null.endNull(b);\n    }\n  }, {\n    key: \"visitInt\",\n    value: function visitInt(node, b) {\n      Int.startInt(b);\n      Int.addBitWidth(b, node.bitWidth);\n      Int.addIsSigned(b, node.isSigned);\n      return Int.endInt(b);\n    }\n  }, {\n    key: \"visitFloat\",\n    value: function visitFloat(node, b) {\n      FloatingPoint.startFloatingPoint(b);\n      FloatingPoint.addPrecision(b, node.precision);\n      return FloatingPoint.endFloatingPoint(b);\n    }\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(_node, b) {\n      Binary.startBinary(b);\n      return Binary.endBinary(b);\n    }\n  }, {\n    key: \"visitBool\",\n    value: function visitBool(_node, b) {\n      Bool.startBool(b);\n      return Bool.endBool(b);\n    }\n  }, {\n    key: \"visitUtf8\",\n    value: function visitUtf8(_node, b) {\n      Utf8.startUtf8(b);\n      return Utf8.endUtf8(b);\n    }\n  }, {\n    key: \"visitDecimal\",\n    value: function visitDecimal(node, b) {\n      Decimal.startDecimal(b);\n      Decimal.addScale(b, node.scale);\n      Decimal.addPrecision(b, node.precision);\n      return Decimal.endDecimal(b);\n    }\n  }, {\n    key: \"visitDate\",\n    value: function visitDate(node, b) {\n      Date.startDate(b);\n      Date.addUnit(b, node.unit);\n      return Date.endDate(b);\n    }\n  }, {\n    key: \"visitTime\",\n    value: function visitTime(node, b) {\n      Time.startTime(b);\n      Time.addUnit(b, node.unit);\n      Time.addBitWidth(b, node.bitWidth);\n      return Time.endTime(b);\n    }\n  }, {\n    key: \"visitTimestamp\",\n    value: function visitTimestamp(node, b) {\n      var timezone = node.timezone && b.createString(node.timezone) || undefined;\n      Timestamp.startTimestamp(b);\n      Timestamp.addUnit(b, node.unit);\n\n      if (timezone !== undefined) {\n        Timestamp.addTimezone(b, timezone);\n      }\n\n      return Timestamp.endTimestamp(b);\n    }\n  }, {\n    key: \"visitInterval\",\n    value: function visitInterval(node, b) {\n      Interval.startInterval(b);\n      Interval.addUnit(b, node.unit);\n      return Interval.endInterval(b);\n    }\n  }, {\n    key: \"visitList\",\n    value: function visitList(_node, b) {\n      List.startList(b);\n      return List.endList(b);\n    }\n  }, {\n    key: \"visitStruct\",\n    value: function visitStruct(_node, b) {\n      Struct.startStruct_(b);\n      return Struct.endStruct_(b);\n    }\n  }, {\n    key: \"visitUnion\",\n    value: function visitUnion(node, b) {\n      Union.startTypeIdsVector(b, node.typeIds.length);\n      var typeIds = Union.createTypeIdsVector(b, node.typeIds);\n      Union.startUnion(b);\n      Union.addMode(b, node.mode);\n      Union.addTypeIds(b, typeIds);\n      return Union.endUnion(b);\n    }\n  }, {\n    key: \"visitDictionary\",\n    value: function visitDictionary(node, b) {\n      var indexType = this.visit(node.indices, b);\n      DictionaryEncoding.startDictionaryEncoding(b);\n      DictionaryEncoding.addId(b, new Long(node.id, 0));\n      DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n\n      if (indexType !== undefined) {\n        DictionaryEncoding.addIndexType(b, indexType);\n      }\n\n      return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n  }, {\n    key: \"visitFixedSizeBinary\",\n    value: function visitFixedSizeBinary(node, b) {\n      FixedSizeBinary.startFixedSizeBinary(b);\n      FixedSizeBinary.addByteWidth(b, node.byteWidth);\n      return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n  }, {\n    key: \"visitFixedSizeList\",\n    value: function visitFixedSizeList(node, b) {\n      FixedSizeList.startFixedSizeList(b);\n      FixedSizeList.addListSize(b, node.listSize);\n      return FixedSizeList.endFixedSizeList(b);\n    }\n  }, {\n    key: \"visitMap\",\n    value: function visitMap(node, b) {\n      Map_.startMap(b);\n      Map_.addKeysSorted(b, node.keysSorted);\n      return Map_.endMap(b);\n    }\n  }]);\n\n  return TypeAssembler;\n}(Visitor);\n/** @ignore */\n\nexport var instance = new TypeAssembler();","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,QAA4B,aAA5B;AACA,IAAOC,IAAI,GAAGD,WAAW,CAACC,IAA1B;AAEA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AAGA,SAASC,OAAT,QAAwB,YAAxB;AAEA,IAAOC,IAAI,GAAGF,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCJ,IAA/C;AACA,IAAOK,GAAG,GAAGP,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCC,GAA9C;AACA,IAAOC,aAAa,GAAGR,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCE,aAAxD;AACA,IAAOC,MAAM,GAAGT,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCG,MAAjD;AACA,IAAOC,IAAI,GAAGV,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCI,IAA/C;AACA,IAAOC,IAAI,GAAGX,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCK,IAA/C;AACA,IAAOC,OAAO,GAAGZ,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCM,OAAlD;AACA,IAAOC,IAAI,GAAGb,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCO,IAA/C;AACA,IAAOC,IAAI,GAAGd,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCQ,IAA/C;AACA,IAAOC,SAAS,GAAGf,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCS,SAApD;AACA,IAAOC,QAAQ,GAAGhB,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCU,QAAnD;AACA,IAAOC,IAAI,GAAGjB,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCW,IAA/C;AACA,IAAOC,MAAM,GAAGlB,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCa,OAAjD;AACA,IAAOC,KAAK,GAAGpB,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCc,KAAhD;AACA,IAAOC,kBAAkB,GAAGrB,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCe,kBAA7D;AACA,IAAOC,eAAe,GAAGtB,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCgB,eAA1D;AACA,IAAOC,aAAa,GAAGvB,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCiB,aAAxD;AACA,IAAOC,IAAI,GAAGxB,OAAO,CAACG,GAAR,CAAYC,MAAZ,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCmB,GAA/C;AAOA;;AACA,WAAaC,aAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACW,eAA+BC,IAA/B,EAAwCC,OAAxC,EAAwD;AAC3D,aAAQD,IAAI,IAAI,IAAR,IAAgBC,OAAO,IAAI,IAA5B,GAAoCC,SAApC,4EAA4DF,IAA5D,EAAkEC,OAAlE,CAAP;AACH;AAHL;AAAA;AAAA,WAIW,mBAA+BE,KAA/B,EAAyCC,CAAzC,EAAmD;AACtD7B,UAAI,CAAC8B,SAAL,CAAeD,CAAf;AACA,aAAO7B,IAAI,CAAC+B,OAAL,CAAaF,CAAb,CAAP;AACH;AAPL;AAAA;AAAA,WAQW,kBAA6BJ,IAA7B,EAAsCI,CAAtC,EAAgD;AACnDxB,SAAG,CAAC2B,QAAJ,CAAaH,CAAb;AACAxB,SAAG,CAAC4B,WAAJ,CAAgBJ,CAAhB,EAAmBJ,IAAI,CAACS,QAAxB;AACA7B,SAAG,CAAC8B,WAAJ,CAAgBN,CAAhB,EAAmBJ,IAAI,CAACW,QAAxB;AACA,aAAO/B,GAAG,CAACgC,MAAJ,CAAWR,CAAX,CAAP;AACH;AAbL;AAAA;AAAA,WAcW,oBAAiCJ,IAAjC,EAA0CI,CAA1C,EAAoD;AACvDvB,mBAAa,CAACgC,kBAAd,CAAiCT,CAAjC;AACAvB,mBAAa,CAACiC,YAAd,CAA2BV,CAA3B,EAA8BJ,IAAI,CAACe,SAAnC;AACA,aAAOlC,aAAa,CAACmC,gBAAd,CAA+BZ,CAA/B,CAAP;AACH;AAlBL;AAAA;AAAA,WAmBW,qBAAmCD,KAAnC,EAA6CC,CAA7C,EAAuD;AAC1DtB,YAAM,CAACmC,WAAP,CAAmBb,CAAnB;AACA,aAAOtB,MAAM,CAACoC,SAAP,CAAiBd,CAAjB,CAAP;AACH;AAtBL;AAAA;AAAA,WAuBW,mBAA+BD,KAA/B,EAAyCC,CAAzC,EAAmD;AACtDrB,UAAI,CAACoC,SAAL,CAAef,CAAf;AACA,aAAOrB,IAAI,CAACqC,OAAL,CAAahB,CAAb,CAAP;AACH;AA1BL;AAAA;AAAA,WA2BW,mBAA+BD,KAA/B,EAAyCC,CAAzC,EAAmD;AACtDpB,UAAI,CAACqC,SAAL,CAAejB,CAAf;AACA,aAAOpB,IAAI,CAACsC,OAAL,CAAalB,CAAb,CAAP;AACH;AA9BL;AAAA;AAAA,WA+BW,sBAAqCJ,IAArC,EAA8CI,CAA9C,EAAwD;AAC3DnB,aAAO,CAACsC,YAAR,CAAqBnB,CAArB;AACAnB,aAAO,CAACuC,QAAR,CAAiBpB,CAAjB,EAAoBJ,IAAI,CAACyB,KAAzB;AACAxC,aAAO,CAAC6B,YAAR,CAAqBV,CAArB,EAAwBJ,IAAI,CAACe,SAA7B;AACA,aAAO9B,OAAO,CAACyC,UAAR,CAAmBtB,CAAnB,CAAP;AACH;AApCL;AAAA;AAAA,WAqCW,mBAAgCJ,IAAhC,EAAyCI,CAAzC,EAAmD;AACtDlB,UAAI,CAACyC,SAAL,CAAevB,CAAf;AACAlB,UAAI,CAAC0C,OAAL,CAAaxB,CAAb,EAAgBJ,IAAI,CAAC6B,IAArB;AACA,aAAO3C,IAAI,CAAC4C,OAAL,CAAa1B,CAAb,CAAP;AACH;AAzCL;AAAA;AAAA,WA0CW,mBAA+BJ,IAA/B,EAAwCI,CAAxC,EAAkD;AACrDjB,UAAI,CAAC4C,SAAL,CAAe3B,CAAf;AACAjB,UAAI,CAACyC,OAAL,CAAaxB,CAAb,EAAgBJ,IAAI,CAAC6B,IAArB;AACA1C,UAAI,CAACqB,WAAL,CAAiBJ,CAAjB,EAAoBJ,IAAI,CAACS,QAAzB;AACA,aAAOtB,IAAI,CAAC6C,OAAL,CAAa5B,CAAb,CAAP;AACH;AA/CL;AAAA;AAAA,WAgDW,wBAAyCJ,IAAzC,EAAkDI,CAAlD,EAA4D;AAC/D,UAAM6B,QAAQ,GAAIjC,IAAI,CAACiC,QAAL,IAAiB7B,CAAC,CAAC8B,YAAF,CAAelC,IAAI,CAACiC,QAApB,CAAlB,IAAoD/B,SAArE;AACAd,eAAS,CAAC+C,cAAV,CAAyB/B,CAAzB;AACAhB,eAAS,CAACwC,OAAV,CAAkBxB,CAAlB,EAAqBJ,IAAI,CAAC6B,IAA1B;;AACA,UAAII,QAAQ,KAAK/B,SAAjB,EAA4B;AACxBd,iBAAS,CAACgD,WAAV,CAAsBhC,CAAtB,EAAyB6B,QAAzB;AACH;;AACD,aAAO7C,SAAS,CAACiD,YAAV,CAAuBjC,CAAvB,CAAP;AACH;AAxDL;AAAA;AAAA,WAyDW,uBAAuCJ,IAAvC,EAAgDI,CAAhD,EAA0D;AAC7Df,cAAQ,CAACiD,aAAT,CAAuBlC,CAAvB;AACAf,cAAQ,CAACuC,OAAT,CAAiBxB,CAAjB,EAAoBJ,IAAI,CAAC6B,IAAzB;AACA,aAAOxC,QAAQ,CAACkD,WAAT,CAAqBnC,CAArB,CAAP;AACH;AA7DL;AAAA;AAAA,WA8DW,mBAA+BD,KAA/B,EAAyCC,CAAzC,EAAmD;AACtDd,UAAI,CAACkD,SAAL,CAAepC,CAAf;AACA,aAAOd,IAAI,CAACmD,OAAL,CAAarC,CAAb,CAAP;AACH;AAjEL;AAAA;AAAA,WAkEW,qBAAmCD,KAAnC,EAA6CC,CAA7C,EAAuD;AAC1Db,YAAM,CAACmD,YAAP,CAAoBtC,CAApB;AACA,aAAOb,MAAM,CAACoD,UAAP,CAAkBvC,CAAlB,CAAP;AACH;AArEL;AAAA;AAAA,WAsEW,oBAAiCJ,IAAjC,EAA0CI,CAA1C,EAAoD;AACvDX,WAAK,CAACmD,kBAAN,CAAyBxC,CAAzB,EAA4BJ,IAAI,CAAC6C,OAAL,CAAaC,MAAzC;AACA,UAAMD,OAAO,GAAGpD,KAAK,CAACsD,mBAAN,CAA0B3C,CAA1B,EAA6BJ,IAAI,CAAC6C,OAAlC,CAAhB;AACApD,WAAK,CAACuD,UAAN,CAAiB5C,CAAjB;AACAX,WAAK,CAACwD,OAAN,CAAc7C,CAAd,EAAiBJ,IAAI,CAACkD,IAAtB;AACAzD,WAAK,CAAC0D,UAAN,CAAiB/C,CAAjB,EAAoByC,OAApB;AACA,aAAOpD,KAAK,CAAC2D,QAAN,CAAehD,CAAf,CAAP;AACH;AA7EL;AAAA;AAAA,WA8EW,yBAA2CJ,IAA3C,EAAoDI,CAApD,EAA8D;AACjE,UAAMiD,SAAS,GAAG,KAAKC,KAAL,CAAWtD,IAAI,CAACuD,OAAhB,EAAyBnD,CAAzB,CAAlB;AACAV,wBAAkB,CAAC8D,uBAAnB,CAA2CpD,CAA3C;AACAV,wBAAkB,CAAC+D,KAAnB,CAAyBrD,CAAzB,EAA4B,IAAIhC,IAAJ,CAAS4B,IAAI,CAAC0D,EAAd,EAAkB,CAAlB,CAA5B;AACAhE,wBAAkB,CAACiE,YAAnB,CAAgCvD,CAAhC,EAAmCJ,IAAI,CAAC4D,SAAxC;;AACA,UAAIP,SAAS,KAAKnD,SAAlB,EAA6B;AACzBR,0BAAkB,CAACmE,YAAnB,CAAgCzD,CAAhC,EAAmCiD,SAAnC;AACH;;AACD,aAAO3D,kBAAkB,CAACoE,qBAAnB,CAAyC1D,CAAzC,CAAP;AACH;AAvFL;AAAA;AAAA,WAwFW,8BAAqDJ,IAArD,EAA8DI,CAA9D,EAAwE;AAC3ET,qBAAe,CAACoE,oBAAhB,CAAqC3D,CAArC;AACAT,qBAAe,CAACqE,YAAhB,CAA6B5D,CAA7B,EAAgCJ,IAAI,CAACiE,SAArC;AACA,aAAOtE,eAAe,CAACuE,kBAAhB,CAAmC9D,CAAnC,CAAP;AACH;AA5FL;AAAA;AAAA,WA6FW,4BAAiDJ,IAAjD,EAA0DI,CAA1D,EAAoE;AACvER,mBAAa,CAACuE,kBAAd,CAAiC/D,CAAjC;AACAR,mBAAa,CAACwE,WAAd,CAA0BhE,CAA1B,EAA6BJ,IAAI,CAACqE,QAAlC;AACA,aAAOzE,aAAa,CAAC0E,gBAAd,CAA+BlE,CAA/B,CAAP;AACH;AAjGL;AAAA;AAAA,WAkGW,kBAA8BJ,IAA9B,EAAuCI,CAAvC,EAAiD;AACpDP,UAAI,CAAC0E,QAAL,CAAcnE,CAAd;AACAP,UAAI,CAAC2E,aAAL,CAAmBpE,CAAnB,EAAsBJ,IAAI,CAACyE,UAA3B;AACA,aAAO5E,IAAI,CAAC6E,MAAL,CAAYtE,CAAZ,CAAP;AACH;AAtGL;;AAAA;AAAA,EAAmC9B,OAAnC;AAyGA;;AACA,OAAO,IAAMqG,QAAQ,GAAG,IAAI5E,aAAJ,EAAjB","names":["flatbuffers","Long","Schema_","Visitor","Null","org","apache","arrow","flatbuf","Int","FloatingPoint","Binary","Bool","Utf8","Decimal","Date","Time","Timestamp","Interval","List","Struct","Struct_","Union","DictionaryEncoding","FixedSizeBinary","FixedSizeList","Map_","Map","TypeAssembler","node","builder","undefined","_node","b","startNull","endNull","startInt","addBitWidth","bitWidth","addIsSigned","isSigned","endInt","startFloatingPoint","addPrecision","precision","endFloatingPoint","startBinary","endBinary","startBool","endBool","startUtf8","endUtf8","startDecimal","addScale","scale","endDecimal","startDate","addUnit","unit","endDate","startTime","endTime","timezone","createString","startTimestamp","addTimezone","endTimestamp","startInterval","endInterval","startList","endList","startStruct_","endStruct_","startTypeIdsVector","typeIds","length","createTypeIdsVector","startUnion","addMode","mode","addTypeIds","endUnion","indexType","visit","indices","startDictionaryEncoding","addId","id","addIsOrdered","isOrdered","addIndexType","endDictionaryEncoding","startFixedSizeBinary","addByteWidth","byteWidth","endFixedSizeBinary","startFixedSizeList","addListSize","listSize","endFixedSizeList","startMap","addKeysSorted","keysSorted","endMap","instance"],"sources":["visitor/typeassembler.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n"]},"metadata":{},"sourceType":"module"}